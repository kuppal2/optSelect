
R version 3.4.0 (2017-04-21) -- "You Stupid Darkness"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> #.libPaths("/home/kuppal3/karan_libs/Rlibs")
> library(snow)
> library(e1071)
> library(yaImpute)

Attaching package: ‘yaImpute’

The following object is masked from ‘package:e1071’:

    impute

> library(pROC)
Type 'citation("pROC")' for a citation.

Attaching package: ‘pROC’

The following objects are masked from ‘package:stats’:

    cov, smooth, var

> library(bioDist)
Loading required package: Biobase
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘parallel’

The following objects are masked from ‘package:snow’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, clusterSplit, makeCluster, parApply,
    parCapply, parLapply, parRapply, parSapply, splitIndices,
    stopCluster


Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following object is masked from ‘package:pROC’:

    var

The following objects are masked from ‘package:snow’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parRapply, parSapply

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, cbind, colMeans, colnames,
    colSums, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, lengths, Map, mapply, match,
    mget, order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rowMeans, rownames, rowSums, sapply, setdiff, sort,
    table, tapply, union, unique, unsplit, which, which.max, which.min

Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

Loading required package: KernSmooth
KernSmooth 2.23 loaded
Copyright M. P. Wand 1997-2009
> #library(CMA, lib="/home/kuppal3/karan_libs/Rlibs/")
> library(RankAggreg)
> library(CMA)

Attaching package: ‘CMA’

The following object is masked from ‘package:pROC’:

    roc

The following object is masked from ‘package:e1071’:

    tune

> library(expm)
Loading required package: Matrix

Attaching package: ‘expm’

The following object is masked from ‘package:Matrix’:

    expm

> library(plyr)

Attaching package: ‘plyr’

The following object is masked from ‘package:CMA’:

    join

> library(doParallel)
Loading required package: foreach
Loading required package: iterators
> cl<-makeCluster(1)
> 
> 
> args<-commandArgs(trailingOnly=TRUE)
> 
> #dirloc<-"/Users/karanuppal/Documents/Gatech/Projects/Algorithms/TwostagePSO/"
> #sname<-paste("/home/stu/kuppal3/Research/Feature_selection/Rcode/versionnov2014/OCFS_",args[9],".R",sep="")
> 
> sname<-paste("/home/kuppal2/Documents/Projects/xmsPANDA/Other/scripts/OCFS_",args[9],".R",sep="")
> source(sname)
> print(sname)
[1] "/home/kuppal2/Documents/Projects/xmsPANDA/Other/scripts/OCFS_vfeb817_v5C_2018_v12.R"
> 
> dirloc<-"/home/kuppal2/Documents/Projects/xmsPANDA/Other/Datasets/ARCENE/"
> setwd(dirloc)
> 
> 
> 
> 
> outloc<-paste(dirloc,"/OCFSvmay2415_Arcene",args[9],"/",sep="")
> 
> 
> sname<-paste(dirloc,"ARCENE.Rda",sep="")
> load(sname)
> 
> trainm<-ARCENE$X
> testm<-ARCENE$Xt
> trainclass<-ARCENE$Y
> testclass<-ARCENE$Yt
> 
> 
> trainm<-trainm[,-c(10001)]
> testm<-testm[,-c(10001)]
> trainm<-apply(trainm,2,as.numeric)
> testm<-apply(testm,2,as.numeric)
> 
> trainm<-cbind(trainclass,trainm)
> testm<-cbind(testclass,testm)
> 
> trainm<-na.omit(trainm)
> testm<-na.omit(testm)
> 
> dir.create(outloc)
Warning message:
In dir.create(outloc) :
  '/home/kuppal2/Documents/Projects/xmsPANDA/Other/Datasets/ARCENE//OCFSvmay2415_Arcenevfeb817_v5C_2018_v12' already exists
> setwd(outloc)
> 
> 
> trainm<-as.matrix(trainm)
> testm<-as.matrix(testm)
> trainclass<-trainm[,1] #CMAres$modtrainclass
> testclass<-testm[,1] #CMAres$modtestclass
> trainm<-trainm[,-c(1)] #CMAres$modtrainmata
> testm<-testm[,-c(1)] #CMAres$modtestmata
> 
> #a: Confusions
> #b: Neighbors
> #c: Global
> #d: Death
> 
> a<-c(0.25,0.25,0.25,0.25)
> b<-c(0.3,0.1,0.4,0.1)
> c<-c(0.25,0.25,0.5,0)
> d<-c(0.9,0.1,0,0.1)
> 
> a<-c(0,0.4,0.1,0.5)
> b<-c(0.3,0.1,0.4,0.1)
> c<-c(0,0.5,0.5,0)
> d<-c(0.9,0.1,0,0)
> 
> a<-c(0,0.4,0.1,0.5)
> b<-c(0.2,0.3,0.4,0.1)
> c<-c(0,0.4,0.4,0.2)
> d<-c(0.9,0.1,0,0)
> 
> transition_matrix<-rbind(a,b,c,d)
> 
> 
> dir.create(outloc)
Warning message:
In dir.create(outloc) :
  '/home/kuppal2/Documents/Projects/xmsPANDA/Other/Datasets/ARCENE//OCFSvmay2415_Arcenevfeb817_v5C_2018_v12' already exists
> setwd(outloc)
> temp2=t(trainm)
> temp2=apply(temp2, 2, function(x){which(x=="MD")})
> temp2=unlist(temp2)
> temp2=unique(temp2)
> if(length(temp2)>1)
+ {
+ 	trainm=trainm[,-c(temp2)]
+ 
+ 	rm(temp2)
+ }
> 
> boostweight=rep(0,dim(trainm)[2])
> 
> print("max num")
[1] "max num"
> print(as.numeric(args[10]))
[1] 5
> 
> #if(FALSE)
> {
+ CMAres<-performCMA(trainm, trainclass, testm, testclass,outloc,
+ maxnum=as.numeric(args[10]),
+ minnum=3,
+ stepitr=1,
+ gsmethods=c("limma"), #"lasso","elasticnet","kruskal.test"), #"f.test", "f.test", "elasticnet", "wilcox.test", "welch.test"),
+ pct_train=0.40,
+ accuracyweight=1,
+ featweight=0.06,
+ minpresent=1,
+ kname="radial",
+ norm_method="none",
+ tolerance=0.5,
+ maxitrs=5,
+ classindex=1,
+ numfacts=0,
+ evalmethod="CV",
+ numfolds=10,
+ CVfoldthresh=0.7,
+ varselmethod=args[11],
+ scheme_val="one-vs-all",
+ iter_learn=1,boostweight=rep(0,dim(trainm)[2]))
+ 
+ 
+ CMAres<-performCMA(trainm, trainclass, testm, testclass,outloc,
+ maxnum=as.numeric(args[10]),
+ minnum=3,
+ stepitr=1,
+ gsmethods=c("lasso"), #"lasso","elasticnet","kruskal.test"), #"f.test", "f.test", "elasticnet", "wilcox.test", "welch.test"),
+ pct_train=0.40,
+ accuracyweight=1,
+ featweight=0.06,
+ minpresent=1,
+ kname="radial",
+ norm_method="none",
+ tolerance=0.5,
+ maxitrs=5,
+ classindex=1,
+ numfacts=0,
+ evalmethod="CV",
+ numfolds=10,
+ CVfoldthresh=0.7,
+ varselmethod=args[11],
+ scheme_val="one-vs-all",
+ iter_learn=1,boostweight=rep(0,dim(trainm)[2]))
+ 
+ CMAres<-performCMA(trainm, trainclass, testm, testclass,outloc,
+ maxnum=as.numeric(args[10]),
+ minnum=3,
+ stepitr=1,
+ gsmethods=c("rfe"), #"lasso","elasticnet","kruskal.test"), #"f.test", "f.test", "elasticnet", "wilcox.test", "welch.test"),
+ pct_train=0.40,
+ accuracyweight=1,
+ featweight=0.06,
+ minpresent=1,
+ kname="radial",
+ norm_method="none",
+ tolerance=0.5,
+ maxitrs=5,
+ classindex=1,
+ numfacts=0,
+ evalmethod="CV",
+ numfolds=10,
+ CVfoldthresh=0.7,
+ varselmethod=args[11],
+ scheme_val="one-vs-all",
+ iter_learn=1,boostweight=rep(0,dim(trainm)[2]))
+ 
+ CMAres<-performCMA(trainm, trainclass, testm, testclass,outloc,
+ maxnum=as.numeric(args[10]),
+ minnum=3,
+ stepitr=1,
+ gsmethods=c("elasticnet"), #"lasso","elasticnet","kruskal.test"), #"f.test", "f.test", "elasticnet", "wilcox.test", "welch.test"),
+ pct_train=0.40,
+ accuracyweight=1,
+ featweight=0.06,
+ minpresent=1,
+ kname="radial",
+ norm_method="none",
+ tolerance=0.5,
+ maxitrs=5,
+ classindex=1,
+ numfacts=0,
+ evalmethod="CV",
+ numfolds=10,
+ CVfoldthresh=0.7,
+ varselmethod=args[11],
+ scheme_val="one-vs-all",
+ iter_learn=1,boostweight=rep(0,dim(trainm)[2]))
+ 
+ if(FALSE){
+ CMAres<-performCMA(trainm, trainclass, testm, testclass,outloc,
+ maxnum=as.numeric(args[10]),
+ minnum=3,
+ stepitr=1,
+ gsmethods=c("rf"), #"lasso","elasticnet","kruskal.test"), #"f.test", "f.test", "elasticnet", "wilcox.test", "welch.test"),
+ pct_train=0.40,
+ accuracyweight=1,
+ featweight=0.06,
+ minpresent=1,
+ kname="radial",
+ norm_method="none",
+ tolerance=0.5,
+ maxitrs=5,
+ classindex=1,
+ numfacts=0,
+ evalmethod="CV",
+ numfolds=10,
+ CVfoldthresh=0.7,
+ varselmethod=args[11],
+ scheme_val="one-vs-all",
+ iter_learn=1,boostweight=rep(0,dim(trainm)[2]))
+ }
+ 
+ CMAres<-performCMA(trainm, trainclass, testm, testclass,outloc,
+ maxnum=as.numeric(args[10]),
+ minnum=3,
+ stepitr=1,
+ gsmethods=c("f.test"), #"lasso","elasticnet","kruskal.test"), #"f.test", "f.test", "elasticnet", "wilcox.test", "welch.test"),
+ pct_train=0.40,
+ accuracyweight=1,
+ featweight=0.06,
+ minpresent=1,
+ kname="radial",
+ norm_method="none",
+ tolerance=0.5,
+ maxitrs=5,
+ classindex=1,
+ numfacts=0,
+ evalmethod="CV",
+ numfolds=10,
+ CVfoldthresh=0.7,
+ varselmethod=args[11],
+ scheme_val="one-vs-all",
+ iter_learn=1,boostweight=rep(0,dim(trainm)[2]))
+ }
[1] "dim of trainm is "
[1]   100 10000
[1]   100 10000
[1] "length of factcols"
[1] 0
[1]   100 10000
[1]   100 10000
integer(0)
character(0)
NULL
[1] "ok"
[1] "test class"
 1  2  3  4 
-1 -1 -1  1 
Levels: -1 1
[1] "orig train matrix"
      V1 V2  V3  V4 V5  V6  V7 V8 V9 V10
[1,]   0 71   0  95  0 538 404 20  0   0
[2,]   0 41  82 165 60 554 379  0 71   0
[3,]   0  0   1  40  0 451 402  0  0   0
[4,]   0 56  44 275 14 511 470  0  0   0
[5,] 105  0 141 348  0 268 329  0  0   1
[1] "orig train matrix"
      V1 V2  V3  V4 V5  V6  V7 V8 V9 V10
[1,]   0 71   0  95  0 538 404 20  0   0
[2,]   0 41  82 165 60 554 379  0 71   0
[3,]   0  0   1  40  0 451 402  0  0   0
[4,]   0 56  44 275 14 511 470  0  0   0
[5,] 105  0 141 348  0 268 329  0  0   1
[1]  0 82  1
[1] "norm train matrix"
      V1 V2  V3  V4 V5  V6  V7 V8 V9 V10
[1,]   0 71   0  95  0 538 404 20  0   0
[2,]   0 41  82 165 60 554 379  0 71   0
[3,]   0  0   1  40  0 451 402  0  0   0
[4,]   0 56  44 275 14 511 470  0  0   0
[5,] 105  0 141 348  0 268 329  0  0   1
[1] "mean of feat 2"
[1] 35.33
[1] "sd of feat 2"
[1] 37.69094
[1] "maxnum is "
[1] 5
[1] "# of genes left after filtering:"
[1]   100 10000
GeneSelection: iteration 1 

Attaching package: ‘limma’

The following object is masked from ‘package:BiocGenerics’:

    plotMA

GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
[1] "varselmethod"
[1] "backward"
[1] "limma:5:81.6141111111111"
[1] "limma:5:81.6141111111111 : 4"
[1] "limma:4:79.6135111111111"
[1] "limma:5:81.6141111111111 : 3"
[1] "dim of scoring matrix is "
[1] 10000     1
[1] 10000
[1] "DS index stage 1"
[1] NA
[1] "bestgenelist"
[1]  698 4290 5473 7748 8502
     V698 V4290 V5473 V7748 V8502
[1,]    0     0     6     0     1
[2,]   14    21    35     8    28
[3,]    0     0     0     0     0
     V698 V4290 V5473 V7748 V8502
[1,]    0     0     0     0     0
[2,]    0     0     0     0     0
[3,]   44    45    49    44    47
[1] "numgenes selected:5"
[1] "test acc:0.69"
[1] "test AUC acc:0.706168831168831"
[1] "10 fold train67"
[1] "confusion matrix train 10 fold"
          nci_y
pred10fold -1  1
        -1 31  4
        1  25 40
[1] "confusion matrix test"
         test_y
pred_test -1  1
       -1 32  7
       1  24 37
[1] "train acc:0.71"
[1] "confusion matrix train"
          nci_y
pred_train -1  1
        -1 31  4
        1  25 40
[1] "DS index stage 1"
[1] NA
[1] "KI index stage 1"
[1] NA
[1] "dim of trainm is "
[1]   100 10000
[1]   100 10000
[1] "length of factcols"
[1] 0
[1]   100 10000
[1]   100 10000
integer(0)
character(0)
NULL
[1] "ok"
[1] "test class"
 1  2  3  4 
-1 -1 -1  1 
Levels: -1 1
[1] "orig train matrix"
      V1 V2  V3  V4 V5  V6  V7 V8 V9 V10
[1,]   0 71   0  95  0 538 404 20  0   0
[2,]   0 41  82 165 60 554 379  0 71   0
[3,]   0  0   1  40  0 451 402  0  0   0
[4,]   0 56  44 275 14 511 470  0  0   0
[5,] 105  0 141 348  0 268 329  0  0   1
[1] "orig train matrix"
      V1 V2  V3  V4 V5  V6  V7 V8 V9 V10
[1,]   0 71   0  95  0 538 404 20  0   0
[2,]   0 41  82 165 60 554 379  0 71   0
[3,]   0  0   1  40  0 451 402  0  0   0
[4,]   0 56  44 275 14 511 470  0  0   0
[5,] 105  0 141 348  0 268 329  0  0   1
[1]  0 82  1
[1] "norm train matrix"
      V1 V2  V3  V4 V5  V6  V7 V8 V9 V10
[1,]   0 71   0  95  0 538 404 20  0   0
[2,]   0 41  82 165 60 554 379  0 71   0
[3,]   0  0   1  40  0 451 402  0  0   0
[4,]   0 56  44 275 14 511 470  0  0   0
[5,] 105  0 141 348  0 268 329  0  0   1
[1] "mean of feat 2"
[1] 35.33
[1] "sd of feat 2"
[1] 37.69094
[1] "maxnum is "
[1] 5
[1] "# of genes left after filtering:"
[1]   100 10000
GeneSelection: iteration 1 
Loaded glmnet 2.0-16


Attaching package: ‘glmnet’

The following object is masked from ‘package:pROC’:

    auc

GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
genelist
1184 4290 4352  698 8135 1975 9970  271  312 1552 2462 2743 2857 3257 5144 5473 
  20   12   10    8    6    4    4    2    2    2    2    2    2    2    2    2 
5520 5956 5995 6584 7437 7928 8954 9082 9868 
   2    2    2    2    2    2    2    2    2 
[1] "varselmethod"
[1] "backward"
[1] "lasso:5:107.050619047619"
[1] "lasso:5:107.050619047619 : 4"
[1] "lasso:4:106.59366984127"
[1] "lasso:4:107.050619047619 : 3"
[1] "dim of scoring matrix is "
[1] 10000     1
[1] 10000
[1] "DS index stage 1"
[1] NA
[1] "bestgenelist"
[1]  698 1184 4290 4352
     V698 V1184 V4290 V4352
[1,]    0     0     0     0
[2,]   14     0    21     0
[3,]    0    25     0     0
     V698 V1184 V4290 V4352
[1,]    0    35     0     0
[2,]    0   144     0    49
[3,]   44     0    45     1
[1] "numgenes selected:4"
[1] "test acc:0.62"
[1] "test AUC acc:0.616883116883117"
[1] "10 fold train83"
[1] "confusion matrix train 10 fold"
          nci_y
pred10fold -1  1
        -1 45  6
        1  11 38
[1] "confusion matrix test"
         test_y
pred_test -1  1
       -1 36 18
       1  20 26
[1] "train acc:0.83"
[1] "confusion matrix train"
          nci_y
pred_train -1  1
        -1 45  6
        1  11 38
[1] "DS index stage 1"
[1] NA
[1] "KI index stage 1"
[1] NA
[1] "dim of trainm is "
[1]   100 10000
[1]   100 10000
[1] "length of factcols"
[1] 0
[1]   100 10000
[1]   100 10000
integer(0)
character(0)
NULL
[1] "ok"
[1] "test class"
 1  2  3  4 
-1 -1 -1  1 
Levels: -1 1
[1] "orig train matrix"
      V1 V2  V3  V4 V5  V6  V7 V8 V9 V10
[1,]   0 71   0  95  0 538 404 20  0   0
[2,]   0 41  82 165 60 554 379  0 71   0
[3,]   0  0   1  40  0 451 402  0  0   0
[4,]   0 56  44 275 14 511 470  0  0   0
[5,] 105  0 141 348  0 268 329  0  0   1
[1] "orig train matrix"
      V1 V2  V3  V4 V5  V6  V7 V8 V9 V10
[1,]   0 71   0  95  0 538 404 20  0   0
[2,]   0 41  82 165 60 554 379  0 71   0
[3,]   0  0   1  40  0 451 402  0  0   0
[4,]   0 56  44 275 14 511 470  0  0   0
[5,] 105  0 141 348  0 268 329  0  0   1
[1]  0 82  1
[1] "norm train matrix"
      V1 V2  V3  V4 V5  V6  V7 V8 V9 V10
[1,]   0 71   0  95  0 538 404 20  0   0
[2,]   0 41  82 165 60 554 379  0 71   0
[3,]   0  0   1  40  0 451 402  0  0   0
[4,]   0 56  44 275 14 511 470  0  0   0
[5,] 105  0 141 348  0 268 329  0  0   1
[1] "mean of feat 2"
[1] 35.33
[1] "sd of feat 2"
[1] 37.69094
[1] "maxnum is "
[1] 5
[1] "# of genes left after filtering:"
[1]   100 10000
GeneSelection: iteration 1 
GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
[1] "varselmethod"
[1] "backward"
[1] "rfe:5:92.9553809523809"
[1] "rfe:5:92.9553809523809 : 4"
[1] "rfe:4:68.7762095238095"
[1] "rfe:5:92.9553809523809 : 3"
[1] "dim of scoring matrix is "
[1] 10000     1
[1] 10000
[1] "DS index stage 1"
[1] NA
[1] "bestgenelist"
[1] 1184 1627 3644 4542 9550
     V1184 V1627 V3644 V4542 V9550
[1,]     0     0     0     5    23
[2,]     0     0     0     0    33
[3,]    25     0   287     0     5
     V1184 V1627 V3644 V4542 V9550
[1,]    35    54     0    11    19
[2,]   144     0   672     0   116
[3,]     0    19     0     0    51
[1] "numgenes selected:5"
[1] "test acc:0.48"
[1] "test AUC acc:0.465097402597403"
[1] "10 fold train68"
[1] "confusion matrix train 10 fold"
          nci_y
pred10fold -1  1
        -1 44  9
        1  12 35
[1] "confusion matrix test"
         test_y
pred_test -1  1
       -1 33 29
       1  23 15
[1] "train acc:0.79"
[1] "confusion matrix train"
          nci_y
pred_train -1  1
        -1 44  9
        1  12 35
[1] "DS index stage 1"
[1] NA
[1] "KI index stage 1"
[1] NA
[1] "dim of trainm is "
[1]   100 10000
[1]   100 10000
[1] "length of factcols"
[1] 0
[1]   100 10000
[1]   100 10000
integer(0)
character(0)
NULL
[1] "ok"
[1] "test class"
 1  2  3  4 
-1 -1 -1  1 
Levels: -1 1
[1] "orig train matrix"
      V1 V2  V3  V4 V5  V6  V7 V8 V9 V10
[1,]   0 71   0  95  0 538 404 20  0   0
[2,]   0 41  82 165 60 554 379  0 71   0
[3,]   0  0   1  40  0 451 402  0  0   0
[4,]   0 56  44 275 14 511 470  0  0   0
[5,] 105  0 141 348  0 268 329  0  0   1
[1] "orig train matrix"
      V1 V2  V3  V4 V5  V6  V7 V8 V9 V10
[1,]   0 71   0  95  0 538 404 20  0   0
[2,]   0 41  82 165 60 554 379  0 71   0
[3,]   0  0   1  40  0 451 402  0  0   0
[4,]   0 56  44 275 14 511 470  0  0   0
[5,] 105  0 141 348  0 268 329  0  0   1
[1]  0 82  1
[1] "norm train matrix"
      V1 V2  V3  V4 V5  V6  V7 V8 V9 V10
[1,]   0 71   0  95  0 538 404 20  0   0
[2,]   0 41  82 165 60 554 379  0 71   0
[3,]   0  0   1  40  0 451 402  0  0   0
[4,]   0 56  44 275 14 511 470  0  0   0
[5,] 105  0 141 348  0 268 329  0  0   1
[1] "mean of feat 2"
[1] 35.33
[1] "sd of feat 2"
[1] 37.69094
[1] "maxnum is "
[1] 5
[1] "# of genes left after filtering:"
[1]   100 10000
GeneSelection: iteration 1 
GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
[1] "varselmethod"
[1] "backward"
[1] "elasticnet:5:121.364111111111"
[1] "elasticnet:5:121.364111111111 : 4"
[1] "elasticnet:4:106.59366984127"
[1] "elasticnet:5:121.364111111111 : 3"
[1] "dim of scoring matrix is "
[1] 10000     1
[1] 10000
[1] "DS index stage 1"
[1] NA
[1] "bestgenelist"
[1]  698 1184 4290 4352 5672
     V698 V1184 V4290 V4352 V5672
[1,]    0     0     0     0     0
[2,]   14     0    21     0     0
[3,]    0    25     0     0     0
     V698 V1184 V4290 V4352 V5672
[1,]    0    35     0     0     0
[2,]    0   144     0    49     0
[3,]   44     0    45     1    23
[1] "numgenes selected:5"
[1] "test acc:0.64"
[1] "test AUC acc:0.62987012987013"
[1] "10 fold train85"
[1] "confusion matrix train 10 fold"
          nci_y
pred10fold -1  1
        -1 46  1
        1  10 43
[1] "confusion matrix test"
         test_y
pred_test -1  1
       -1 40 20
       1  16 24
[1] "train acc:0.89"
[1] "confusion matrix train"
          nci_y
pred_train -1  1
        -1 46  1
        1  10 43
[1] "DS index stage 1"
[1] NA
[1] "KI index stage 1"
[1] NA
[1] "dim of trainm is "
[1]   100 10000
[1]   100 10000
[1] "length of factcols"
[1] 0
[1]   100 10000
[1]   100 10000
integer(0)
character(0)
NULL
[1] "ok"
[1] "test class"
 1  2  3  4 
-1 -1 -1  1 
Levels: -1 1
[1] "orig train matrix"
      V1 V2  V3  V4 V5  V6  V7 V8 V9 V10
[1,]   0 71   0  95  0 538 404 20  0   0
[2,]   0 41  82 165 60 554 379  0 71   0
[3,]   0  0   1  40  0 451 402  0  0   0
[4,]   0 56  44 275 14 511 470  0  0   0
[5,] 105  0 141 348  0 268 329  0  0   1
[1] "orig train matrix"
      V1 V2  V3  V4 V5  V6  V7 V8 V9 V10
[1,]   0 71   0  95  0 538 404 20  0   0
[2,]   0 41  82 165 60 554 379  0 71   0
[3,]   0  0   1  40  0 451 402  0  0   0
[4,]   0 56  44 275 14 511 470  0  0   0
[5,] 105  0 141 348  0 268 329  0  0   1
[1]  0 82  1
[1] "norm train matrix"
      V1 V2  V3  V4 V5  V6  V7 V8 V9 V10
[1,]   0 71   0  95  0 538 404 20  0   0
[2,]   0 41  82 165 60 554 379  0 71   0
[3,]   0  0   1  40  0 451 402  0  0   0
[4,]   0 56  44 275 14 511 470  0  0   0
[5,] 105  0 141 348  0 268 329  0  0   1
[1] "mean of feat 2"
[1] 35.33
[1] "sd of feat 2"
[1] 37.69094
[1] "maxnum is "
[1] 5
[1] "# of genes left after filtering:"
[1]   100 10000
GeneSelection: iteration 1 
GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
[1] "varselmethod"
[1] "backward"
[1] "f.test:5:81.6141111111111"
[1] "f.test:5:81.6141111111111 : 4"
[1] "f.test:4:79.6135111111111"
[1] "f.test:5:81.6141111111111 : 3"
[1] "dim of scoring matrix is "
[1] 10000     1
[1] 10000
[1] "DS index stage 1"
[1] NA
[1] "bestgenelist"
[1]  698 4290 5473 7748 8502
     V698 V4290 V5473 V7748 V8502
[1,]    0     0     6     0     1
[2,]   14    21    35     8    28
[3,]    0     0     0     0     0
     V698 V4290 V5473 V7748 V8502
[1,]    0     0     0     0     0
[2,]    0     0     0     0     0
[3,]   44    45    49    44    47
[1] "numgenes selected:5"
[1] "test acc:0.69"
[1] "test AUC acc:0.706168831168831"
[1] "10 fold train67"
[1] "confusion matrix train 10 fold"
          nci_y
pred10fold -1  1
        -1 31  4
        1  25 40
[1] "confusion matrix test"
         test_y
pred_test -1  1
       -1 32  7
       1  24 37
[1] "train acc:0.71"
[1] "confusion matrix train"
          nci_y
pred_train -1  1
        -1 31  4
        1  25 40
[1] "DS index stage 1"
[1] NA
[1] "KI index stage 1"
[1] NA
There were 50 or more warnings (use warnings() to see the first 50)
> 
> 
> #1
> CMAres<-performCMA(trainm, trainclass, testm, testclass,outloc,
+ maxnum=as.numeric(args[10]),
+ minnum=3,
+ stepitr=1,
+ gsmethods=c("limma","lasso","rfe","elasticnet", "f.test"), #"lasso","elasticnet","kruskal.test"), #"f.test", "f.test", "elasticnet", "wilcox.test", "welch.test"),
+ pct_train=0.40,
+ accuracyweight=1,
+ featweight=0.06,
+ minpresent=1,
+ kname="radial",
+ norm_method="none",
+ tolerance=0.5,
+ maxitrs=5,
+ classindex=1,
+ numfacts=0,
+ evalmethod="CV",
+ numfolds=10,
+ CVfoldthresh=0.7,
+ varselmethod=args[11],
+ scheme_val="one-vs-all",
+ iter_learn=1,boostweight=rep(0,dim(trainm)[2]))
[1] "dim of trainm is "
[1]   100 10000
[1]   100 10000
[1] "length of factcols"
[1] 0
[1]   100 10000
[1]   100 10000
integer(0)
character(0)
NULL
[1] "ok"
[1] "test class"
 1  2  3  4 
-1 -1 -1  1 
Levels: -1 1
[1] "orig train matrix"
      V1 V2  V3  V4 V5  V6  V7 V8 V9 V10
[1,]   0 71   0  95  0 538 404 20  0   0
[2,]   0 41  82 165 60 554 379  0 71   0
[3,]   0  0   1  40  0 451 402  0  0   0
[4,]   0 56  44 275 14 511 470  0  0   0
[5,] 105  0 141 348  0 268 329  0  0   1
[1] "orig train matrix"
      V1 V2  V3  V4 V5  V6  V7 V8 V9 V10
[1,]   0 71   0  95  0 538 404 20  0   0
[2,]   0 41  82 165 60 554 379  0 71   0
[3,]   0  0   1  40  0 451 402  0  0   0
[4,]   0 56  44 275 14 511 470  0  0   0
[5,] 105  0 141 348  0 268 329  0  0   1
[1]  0 82  1
[1] "norm train matrix"
      V1 V2  V3  V4 V5  V6  V7 V8 V9 V10
[1,]   0 71   0  95  0 538 404 20  0   0
[2,]   0 41  82 165 60 554 379  0 71   0
[3,]   0  0   1  40  0 451 402  0  0   0
[4,]   0 56  44 275 14 511 470  0  0   0
[5,] 105  0 141 348  0 268 329  0  0   1
[1] "mean of feat 2"
[1] 35.33
[1] "sd of feat 2"
[1] 37.69094
[1] "maxnum is "
[1] 5
[1] "# of genes left after filtering:"
[1]   100 10000
GeneSelection: iteration 1 
GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
[1] "varselmethod"
[1] "backward"
[1] "limma:5:81.6141111111111"
[1] "limma:5:81.6141111111111 : 4"
[1] "limma:4:79.6135111111111"
[1] "limma:5:81.6141111111111 : 3"
GeneSelection: iteration 1 
GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
genelist
1184 4290 4352  698 8135 1975 9970  271  312 1552 2462 2743 2857 3257 5144 5473 
  20   12   10    8    6    4    4    2    2    2    2    2    2    2    2    2 
5520 5956 5995 6584 7437 7928 8954 9082 9868 
   2    2    2    2    2    2    2    2    2 
[1] "varselmethod"
[1] "backward"
[1] "lasso:5:107.050619047619"
[1] "lasso:5:107.050619047619 : 4"
[1] "lasso:4:106.59366984127"
[1] "lasso:4:107.050619047619 : 3"
GeneSelection: iteration 1 
GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
[1] "varselmethod"
[1] "backward"
[1] "rfe:5:92.9553809523809"
[1] "rfe:5:92.9553809523809 : 4"
[1] "rfe:4:68.7762095238095"
[1] "rfe:5:92.9553809523809 : 3"
GeneSelection: iteration 1 
GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
[1] "varselmethod"
[1] "backward"
[1] "elasticnet:5:121.364111111111"
[1] "elasticnet:5:121.364111111111 : 4"
[1] "elasticnet:4:106.59366984127"
[1] "elasticnet:5:121.364111111111 : 3"
GeneSelection: iteration 1 
GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
[1] "varselmethod"
[1] "backward"
[1] "f.test:5:81.6141111111111"
[1] "f.test:5:81.6141111111111 : 4"
[1] "f.test:4:79.6135111111111"
[1] "f.test:5:81.6141111111111 : 3"
[1] "dim of scoring matrix is "
[1] 10000     5
[1] 10000
[1] "DS index stage 1"
[1] 0.4
[1] "bestgenelist"
 [1]  698 1184 1627 3644 4290 4352 4542 5473 5672 7748 8502 9550
     V698 V1184 V1627 V3644 V4290 V4352 V4542 V5473 V5672 V7748 V8502 V9550
[1,]    0     0     0     0     0     0     5     6     0     0     1    23
[2,]   14     0     0     0    21     0     0    35     0     8    28    33
[3,]    0    25     0   287     0     0     0     0     0     0     0     5
     V698 V1184 V1627 V3644 V4290 V4352 V4542 V5473 V5672 V7748 V8502 V9550
[1,]    0    35    54     0     0     0    11     0     0     0     0    19
[2,]    0   144     0   672     0    49     0     0     0     0     0   116
[3,]   44     0    19     0    45     1     0    49    23    44    47    51
[1] "numgenes selected:12"
[1] "test acc:0.67"
[1] "test AUC acc:0.668831168831169"
[1] "10 fold train82"
[1] "confusion matrix train 10 fold"
          nci_y
pred10fold -1  1
        -1 48  3
        1   8 41
[1] "confusion matrix test"
         test_y
pred_test -1  1
       -1 38 15
       1  18 29
[1] "train acc:0.89"
[1] "confusion matrix train"
          nci_y
pred_train -1  1
        -1 48  3
        1   8 41
[1] "DS index stage 1"
[1] 0.4
[1] "KI index stage 1"
[1] 0.6898449
There were 50 or more warnings (use warnings() to see the first 50)
> 
> cma_feat_list<-colnames(trainm)
> 
> save(CMAres,file="CMAres.Rda")
> write.table(cma_feat_list,file="selected_cma_feat_list.txt",sep="t",row.names=FALSE)
> 
> # modtraindata=modtrain, modtestdata=modtest, blindtest=testacc, modtrainclass=nci_y, modtestclass=test_y
> #if(FALSE)
> {
+ trainm<-CMAres$modtraindata
+ testm<-CMAres$modtestdata
+ trainclass<-CMAres$modtrainclass
+ testclass<-CMAres$modtestclass
+ learningsets<-CMAres$learningsets
+ }
> 
> if(FALSE)
+ {
+ trainclass<-trainm[,1] #CMAres$modtrainclass
+ testclass<-testm[,1] #CMAres$modtestclass
+ trainm<-trainm[,-c(1)] #CMAres$modtrainmata
+ testm<-testm[,-c(1)] #CMAres$modtestmata
+ 
+ }
> 
> d_dim<-dim(trainm)
> 
> print("Original dimension")
[1] "Original dimension"
> print(d_dim)
[1] 100  12
> 
> 
> system.time(psores<-run_pso(outloc=outloc,trainm,trainclass,testm,testclass,transition_matrix,c1=2.05,
+ c2=2.05,
+ itr=10,
+ globalpso_maxitr=10,
+ global_max_itr=10,
+ num_part=20,
+ kname="radial",
+ errortype="BER",
+ weightA<-as.numeric(args[1]),
+ weightB<-as.numeric(args[2]),
+ weightC<-as.numeric(args[3]),
+ weightD<-as.numeric(args[4]),
+ featweight.max=0.1,
+ featweight.min=0.01,
+ numfolds=10,
+ followerprob=as.numeric(args[6]),
+ confusionprob=as.numeric(args[7]),
+ leaderprob=as.numeric(args[8]),
+ wmax=1,
+ wmin=0.1,
+ behavior_reset_itr=5,
+ maxitrreset=10,
+ num_neighbors=3,
+ minselect.pct=0.5,
+ evalMode="CV2",
+ minfitnessthresh=50,
+ maxnum=as.numeric(args[10]),minnum=3,inertia_method=args[5],particlebehav_method="randbased",constriction_factor=1,
+ select.global.best=TRUE,numnodes=4,evalFunc=eval_fit_kfold_diff,itr.terminate=FALSE,train.pct=0.8))
[1] "c1: 2.05"
[1] "c2: 2.05"
[1] "itr: 10"
[1] "globalpso_maxitr: 10"
[1] "global_max_itr: 10"
[1] "num_part: 20"
[1] "kname: radial"
[1] "errortype: BER"
[1] "weightA: 0.8"
[1] "weightB: 0.05"
[1] "weightC: 0.05"
[1] "weightD: 0.1"
[1] "featweight.max: 0.1"
[1] "featweight.min: 0.01"
[1] "numfolds: 10"
[1] "followerprob: 0.3"
[1] "confusionprob: 0.1"
[1] "leaderprob: 0.5"
[1] "wmax: 1"
[1] "wmin: 0.1"
[1] "behavior_reset_itr: 5"
[1] "maxitrreset: 10"
[1] "num_neighbors: 3"
[1] "minselect.pct: 0.5"
[1] "minfitnessthresh: 50"
[1] "maxnum: 5"
[1] "minnum: 3"
[1] "inertia_method: global"
[1] "particlebehav_method: randbased"
[1] "constriction_factor: 1"
[1] "select.global.best: TRUE"
[1] "train 10 fold"
[1] 84
[1] "here"
[1] "s"
[1] 80
[1] 100  12
[1] 10
[1] "learning sets: 1"
 [1] 96 92 20 21 34 26 37 22 35 65 45 25 54  5 40 15 42 23 19 38 89 56 51 76 28
[26] 63 47 99  8 53 10 90 43 60 86 17 83  2 46 97 95  9 11 79 18 50  1 94 81 85
[51] 82 55 69 88 24 49 36 91  4 78 27 31 75 93 41 70 44 84 33 58 12  3 72 57 16
[76] 87 52 29 59 64
[1] "Starting global iteration number : 1"
[1] "iteration number: "
[1] 1
[1] "iteration number: "
[1] 2
[1] "iteration number: "
[1] 3
[1] "iteration number: "
[1] 4
[1] "iteration number: "
[1] 5
[1] "iteration number: "
[1] 6
[1] "iteration number: "
[1] 7
[1] "iteration number: "
[1] 8
[1] "iteration number: "
[1] 9
[1] "iteration number: "
[1] 10
[1] "iteration number: "
[1] 11
[1] "iteration number: "
[1] 12
[1] "iteration number: "
[1] 13
[1] "iteration number: "
[1] 14
[1] "iteration number: "
[1] 15
[1] "iteration number: "
[1] 16
[1] "iteration number: "
[1] 17
[1] "iteration number: "
[1] 18
[1] "iteration number: "
[1] 19
[1] "iteration number: "
[1] 20
[1] "iteration number: "
[1] 21
[1] "iteration number: "
[1] 22
[1] "iteration number: "
[1] 23
[1] "iteration number: "
[1] 24
[1] "iteration number: "
[1] 25
[1] "iteration number: "
[1] 26
[1] "iteration number: "
[1] 27
[1] "iteration number: "
[1] 28
[1] "iteration number: "
[1] 29
[1] "iteration number: "
[1] 30
[1] "iteration number: "
[1] 31
[1] "iteration number: "
[1] 32
[1] "iteration number: "
[1] 33
[1] "iteration number: "
[1] 34
[1] "iteration number: "
[1] 35
[1] "iteration number: "
[1] 36
[1] "iteration number: "
[1] 37
[1] "iteration number: "
[1] 38
