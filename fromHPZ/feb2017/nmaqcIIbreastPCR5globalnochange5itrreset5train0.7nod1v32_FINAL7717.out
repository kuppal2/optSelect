
R version 3.4.0 (2017-04-21) -- "You Stupid Darkness"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> #.libPaths("/home/stu/kuppal3/karan_libs/Rlibs")
> library(snow)
> library(e1071)
> library(yaImpute)

Attaching package: ‘yaImpute’

The following object is masked from ‘package:e1071’:

    impute

> library(pROC)
Type 'citation("pROC")' for a citation.

Attaching package: ‘pROC’

The following objects are masked from ‘package:stats’:

    cov, smooth, var

> library(bioDist)
Loading required package: Biobase
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘parallel’

The following objects are masked from ‘package:snow’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, clusterSplit, makeCluster, parApply,
    parCapply, parLapply, parRapply, parSapply, splitIndices,
    stopCluster


Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following object is masked from ‘package:pROC’:

    var

The following objects are masked from ‘package:snow’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parRapply, parSapply

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, cbind, colMeans, colnames,
    colSums, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, lengths, Map, mapply, match,
    mget, order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rowMeans, rownames, rowSums, sapply, setdiff, sort,
    table, tapply, union, unique, unsplit, which, which.max, which.min

Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

Loading required package: KernSmooth
KernSmooth 2.23 loaded
Copyright M. P. Wand 1997-2009
> #library(CMA, lib="/home/stu/kuppal3/karan_libs/Rlibs/")
> library(RankAggreg)
> library(CMA)

Attaching package: ‘CMA’

The following object is masked from ‘package:pROC’:

    roc

The following object is masked from ‘package:e1071’:

    tune

> library(expm)
Loading required package: Matrix

Attaching package: ‘expm’

The following object is masked from ‘package:Matrix’:

    expm

> library(glmnet)
Loading required package: foreach
Loaded glmnet 2.0-10


Attaching package: ‘glmnet’

The following object is masked from ‘package:pROC’:

    auc

> 
> cl<-makeCluster(1)
> 
> 
> args<-commandArgs(trailingOnly=TRUE)
> #sname<-paste("/home/stu/kuppal3/Research/Feature_selection/Rcode/version2016/OCFS_",args[9],".R",sep="")
> #sname<-paste("/Users/karanuppal/Documents/Gatech/Projects/Algorithms/TwostagePSO/version2016/OCFS_",args[9],".R",sep="")
> 
> sname<-paste("/home/kuppal2/Documents/Projects/xmsPANDA/Other/scripts/OCFS_",args[9],".R",sep="")
> source(sname)
> print(sname)
[1] "/home/kuppal2/Documents/Projects/xmsPANDA/Other/scripts/OCFS_vfeb817_v4.R"
> 
> #data_loc<-"/home/stu/kuppal3/Research/Feature_selection/Datasets/MAQCII_BreastCancer/" 
> #data_loc<-"/Users/karanuppal/Documents/Gatech/Projects/Algorithms/TwostagePSO/Datasets/MAQCII_BreastCancer/"
> 
> data_loc<-"/home/kuppal2/Documents/Projects/xmsPANDA/Other/Datasets/MAQCII_BreastCancer/"
> setwd(data_loc)
> #load("/home/stu/kuppal3/Research/Feature_selection/Datasets/MAQCII_BreastCancer/MaqcIIbr.Rda")
> 
> load("MaqcIIbr.Rda")
> 
> outloc<-paste(data_loc,"OCFS_PCR",args[9],"_",args[10],"_",args[11],"/",sep="")
> dir.create(outloc)
Warning message:
In dir.create(outloc) :
  '/home/kuppal2/Documents/Projects/xmsPANDA/Other/Datasets/MAQCII_BreastCancer/OCFS_PCRvfeb817_v4_5_0.7' already exists
> setwd(outloc)
> 
> trainm<-MaqcIIbr$trainx
> testm<-MaqcIIbr$testx
> #trainclass<-MaqcIIbr$trainER #PCRvsRD
> #testclass<-MaqcIIbr$testER #PCRvsRD
> 
> trainclass<-MaqcIIbr$trainPCRvsRD
> testclass<-MaqcIIbr$testPCRvsRD
> 
> trainm<-trainm[,-c(22284)]
> testm<-testm[,-c(22284)]
> trainm<-apply(trainm,2,as.numeric)
> testm<-apply(testm,2,as.numeric)
> 
> 
> 
> 
> trainm<-cbind(trainclass,trainm)
> testm<-cbind(testclass,testm)
> 
> trainm<-na.omit(trainm)
> testm<-na.omit(testm)
> 
> 
> 
> 
> 
> 
> #OCFSvmay2415v2reg_itr1_LassoRFELIMMAELpres1backwsel_l0.25f0.45c0.25_top10pctmaxitrs100minselmedianrandbehavfeatw0.01_CV2accA100B1wrand6methodsmax100wrand/"
> 
> dir.create(outloc)
Warning message:
In dir.create(outloc) :
  '/home/kuppal2/Documents/Projects/xmsPANDA/Other/Datasets/MAQCII_BreastCancer/OCFS_PCRvfeb817_v4_5_0.7' already exists
> setwd(outloc)
> 
> trainm<-as.matrix(trainm)
> testm<-as.matrix(testm)
> trainclass<-trainm[,1] #CMAres$modtrainclass
> testclass<-testm[,1] #CMAres$modtestclass
> trainm<-trainm[,-c(1)] #CMAres$modtrainmata
> testm<-testm[,-c(1)] #CMAres$modtestmata
> 
> #a: Confusions
> #b: Neighbors
> #c: Global
> #d: Death
> 
> a<-c(0.25,0.25,0.25,0.25)
> b<-c(0.3,0.1,0.4,0.1)
> c<-c(0.25,0.25,0.5,0)
> d<-c(0.9,0.1,0,0.1)
> 
> a<-c(0,0.4,0.1,0.5)
> b<-c(0.3,0.1,0.4,0.1)
> c<-c(0,0.5,0.5,0)
> d<-c(0.9,0.1,0,0)
> 
> a<-c(0,0.4,0.1,0.5)
> b<-c(0.2,0.3,0.4,0.1)
> c<-c(0,0.4,0.4,0.2)
> d<-c(0.9,0.1,0,0)
> 
> transition_matrix<-rbind(a,b,c,d)
> 
> 
> dir.create(outloc)
Warning message:
In dir.create(outloc) :
  '/home/kuppal2/Documents/Projects/xmsPANDA/Other/Datasets/MAQCII_BreastCancer/OCFS_PCRvfeb817_v4_5_0.7' already exists
> setwd(outloc)
> temp2=t(trainm)
> temp2=apply(temp2, 2, function(x){which(x=="MD")})
> temp2=unlist(temp2)
> temp2=unique(temp2)
> if(length(temp2)>1)
+ {
+ 	trainm=trainm[,-c(temp2)]
+ 
+ 	rm(temp2)
+ }
> 
> boostweight=rep(0,dim(trainm)[2])
> 
> CMAres<-performCMA(trainm, trainclass, testm, testclass,outloc,
+ maxnum=as.numeric(args[10]),
+ minnum=3,
+ stepitr=1,
+ gsmethods=c("limma"), #"lasso","elasticnet","kruskal.test"), #"f.test", "f.test", "elasticnet", "wilcox.test", "welch.test"),
+ pct_train=0.40,
+ accuracyweight=1,
+ featweight=0.06,
+ minpresent=1,
+ kname="radial",
+ norm_method="none",
+ tolerance=0.1,
+ maxitrs=5,
+ classindex=1,
+ numfacts=0,
+ evalmethod="CV",
+ numfolds=10,
+ CVfoldthresh=0.7,
+ varselmethod="none",
+ scheme_val="one-vs-all",
+ iter_learn=1,boostweight=rep(0,dim(trainm)[2]))
[1] "dim of trainm is "
[1]   130 22283
[1]   130 22283
[1] "length of factcols"
[1] 0
[1]   130 22283
[1]   100 22283
integer(0)
character(0)
NULL
[1] "ok"
[1] "test class"
[1] 2 1 2 2
Levels: 1 2
[1] "orig train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] "orig train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] 6.7866 8.0963 7.4812
[1] "norm train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] "mean of feat 2"
[1] 8.273493
[1] "sd of feat 2"
[1] 0.7010279
[1] "maxnum is "
[1] 5
[1] "# of genes left after filtering:"
[1]   130 22283
GeneSelection: iteration 1 

Attaching package: ‘limma’

The following object is masked from ‘package:BiocGenerics’:

    plotMA

GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
[1] "varselmethod"
[1] "none"
[1] "dim of scoring matrix is "
[1] 22283     1
[1] 22283
[1] "DS index stage 1"
[1] NA
[1] "bestgenelist"
[1]  3155  4352  5927 13543 18415
     203628_at 204825_at 206401_s_at 214164_x_at 219051_x_at
[1,]   10.7755    8.9393      9.9796     12.6474      8.5236
[2,]    9.8410    7.7652      9.9498     11.7852      8.9626
[3,]    9.4169    9.9136      6.0807     12.7464     10.7458
     203628_at 204825_at 206401_s_at 214164_x_at 219051_x_at
[1,]    9.4326    7.9851     10.6463     12.7392      9.5138
[2,]    9.8046    5.2744      8.2532     10.9092      5.3641
[3,]    7.9079    5.9481      7.4477     10.6696      7.1097
[1] "numgenes selected:5"
[1] "test acc:0.77"
[1] "test AUC acc:0.7"
[1] "10 fold train81.5384615384615"
[1] "confusion matrix train 10 fold"
          nci_y
pred10fold  1  2
         1 22  7
         2 11 90
[1] "confusion matrix test"
         test_y
pred_test  1  2
        1  9 17
        2  6 68
[1] "train acc:0.861538461538462"
[1] "confusion matrix train"
          nci_y
pred_train  1  2
         1 22  7
         2 11 90
[1] "DS index stage 1"
[1] NA
[1] "KI index stage 1"
[1] NA
Warning messages:
1: In if (is.na(boostweight) == TRUE) { :
  the condition has length > 1 and only the first element will be used
2: In if (is.na(testm) == TRUE) { :
  the condition has length > 1 and only the first element will be used
3: In if (is.na(testclass) == TRUE) { :
  the condition has length > 1 and only the first element will be used
4: In mean.default(DS_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
5: In mean.default(DS_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
6: In mean.default(KI_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
> 
> 
> CMAres<-performCMA(trainm, trainclass, testm, testclass,outloc,
+ maxnum=as.numeric(args[10]),
+ minnum=3,
+ stepitr=1,
+ gsmethods=c("lasso"), #"lasso","elasticnet","kruskal.test"), #"f.test", "f.test", "elasticnet", "wilcox.test", "welch.test"),
+ pct_train=0.40,
+ accuracyweight=1,
+ featweight=0.06,
+ minpresent=1,
+ kname="radial",
+ norm_method="none",
+ tolerance=0.1,
+ maxitrs=5,
+ classindex=1,
+ numfacts=0,
+ evalmethod="CV",
+ numfolds=10,
+ CVfoldthresh=0.7,
+ varselmethod="none",
+ scheme_val="one-vs-all",
+ iter_learn=1,boostweight=rep(0,dim(trainm)[2]))
[1] "dim of trainm is "
[1]   130 22283
[1]   130 22283
[1] "length of factcols"
[1] 0
[1]   130 22283
[1]   100 22283
integer(0)
character(0)
NULL
[1] "ok"
[1] "test class"
[1] 2 1 2 2
Levels: 1 2
[1] "orig train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] "orig train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] 6.7866 8.0963 7.4812
[1] "norm train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] "mean of feat 2"
[1] 8.273493
[1] "sd of feat 2"
[1] 0.7010279
[1] "maxnum is "
[1] 5
[1] "# of genes left after filtering:"
[1]   130 22283
GeneSelection: iteration 1 
GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
genelist
 1083 15464  2667 11253  2211  8166 11968 18226  1326 18415  1732  3155  4208 
   18    14    12     8     6     6     6     6     4     4     2     2     2 
 4349  4352  5278  8550 18456 
    2     2     2     2     2 
[1] "varselmethod"
[1] "none"
[1] "dim of scoring matrix is "
[1] 22283     1
[1] 22283
[1] "DS index stage 1"
[1] NA
[1] "bestgenelist"
[1]  1083  2211  2667 11253 15464
     201555_at 202683_s_at 203139_at 211864_s_at 216092_s_at
[1,]    9.9323      8.8393    9.7965     10.7931     10.4159
[2,]    9.5628      8.4030    8.3696      9.0349      9.7648
[3,]   10.3905      8.3998    9.0933     10.4934      8.3641
     201555_at 202683_s_at 203139_at 211864_s_at 216092_s_at
[1,]    9.9499      8.8732    8.8140      9.2348     10.6963
[2,]    9.6616      8.5511    8.7652     10.1938      9.3780
[3,]    9.4638      8.5826    9.4426      8.4931      9.3840
[1] "numgenes selected:5"
[1] "test acc:0.7"
[1] "test AUC acc:0.658823529411765"
[1] "10 fold train83.8461538461538"
[1] "confusion matrix train 10 fold"
          nci_y
pred10fold  1  2
         1 25  5
         2  8 92
[1] "confusion matrix test"
         test_y
pred_test  1  2
        1  9 24
        2  6 61
[1] "train acc:0.9"
[1] "confusion matrix train"
          nci_y
pred_train  1  2
         1 25  5
         2  8 92
[1] "DS index stage 1"
[1] NA
[1] "KI index stage 1"
[1] NA
Warning messages:
1: In if (is.na(boostweight) == TRUE) { :
  the condition has length > 1 and only the first element will be used
2: In if (is.na(testm) == TRUE) { :
  the condition has length > 1 and only the first element will be used
3: In if (is.na(testclass) == TRUE) { :
  the condition has length > 1 and only the first element will be used
4: In mean.default(DS_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
5: In mean.default(DS_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
6: In mean.default(KI_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
> 
> CMAres<-performCMA(trainm, trainclass, testm, testclass,outloc,
+ maxnum=as.numeric(args[10]),
+ minnum=3,
+ stepitr=1,
+ gsmethods=c("rfe"), #"lasso","elasticnet","kruskal.test"), #"f.test", "f.test", "elasticnet", "wilcox.test", "welch.test"),
+ pct_train=0.40,
+ accuracyweight=1,
+ featweight=0.06,
+ minpresent=1,
+ kname="radial",
+ norm_method="none",
+ tolerance=0.1,
+ maxitrs=5,
+ classindex=1,
+ numfacts=0,
+ evalmethod="CV",
+ numfolds=10,
+ CVfoldthresh=0.7,
+ varselmethod="none",
+ scheme_val="one-vs-all",
+ iter_learn=1,boostweight=rep(0,dim(trainm)[2]))
[1] "dim of trainm is "
[1]   130 22283
[1]   130 22283
[1] "length of factcols"
[1] 0
[1]   130 22283
[1]   100 22283
integer(0)
character(0)
NULL
[1] "ok"
[1] "test class"
[1] 2 1 2 2
Levels: 1 2
[1] "orig train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] "orig train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] 6.7866 8.0963 7.4812
[1] "norm train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] "mean of feat 2"
[1] 8.273493
[1] "sd of feat 2"
[1] 0.7010279
[1] "maxnum is "
[1] 5
[1] "# of genes left after filtering:"
[1]   130 22283
GeneSelection: iteration 1 
GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
[1] "varselmethod"
[1] "none"
[1] "dim of scoring matrix is "
[1] 22283     1
[1] 22283
[1] "DS index stage 1"
[1] NA
[1] "bestgenelist"
[1] 4756 5240 5278 8388 8667
     205229_s_at 205713_s_at 205751_at 208893_s_at 209173_at
[1,]      6.8695     10.0607    5.3569      4.0949   12.9392
[2,]      5.4533      5.6228    3.7733      9.2703   14.1501
[3,]      6.2767      6.8404    2.5009      3.9487   14.5585
     205229_s_at 205713_s_at 205751_at 208893_s_at 209173_at
[1,]      5.2668      5.2933    5.4450      7.6049   13.2041
[2,]      7.1769      4.3142    6.3482      8.9154   11.3631
[3,]      6.9284      4.5240    6.0619      9.1121   11.1800
[1] "numgenes selected:5"
[1] "test acc:0.79"
[1] "test AUC acc:0.629411764705882"
[1] "10 fold train84.6153846153846"
[1] "confusion matrix train 10 fold"
          nci_y
pred10fold  1  2
         1 26  4
         2  7 93
[1] "confusion matrix test"
         test_y
pred_test  1  2
        1  6 12
        2  9 73
[1] "train acc:0.915384615384615"
[1] "confusion matrix train"
          nci_y
pred_train  1  2
         1 26  4
         2  7 93
[1] "DS index stage 1"
[1] NA
[1] "KI index stage 1"
[1] NA
Warning messages:
1: In if (is.na(boostweight) == TRUE) { :
  the condition has length > 1 and only the first element will be used
2: In if (is.na(testm) == TRUE) { :
  the condition has length > 1 and only the first element will be used
3: In if (is.na(testclass) == TRUE) { :
  the condition has length > 1 and only the first element will be used
4: In mean.default(DS_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
5: In mean.default(DS_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
6: In mean.default(KI_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
> 
> CMAres<-performCMA(trainm, trainclass, testm, testclass,outloc,
+ maxnum=as.numeric(args[10]),
+ minnum=3,
+ stepitr=1,
+ gsmethods=c("elasticnet"), #"lasso","elasticnet","kruskal.test"), #"f.test", "f.test", "elasticnet", "wilcox.test", "welch.test"),
+ pct_train=0.40,
+ accuracyweight=1,
+ featweight=0.06,
+ minpresent=1,
+ kname="radial",
+ norm_method="none",
+ tolerance=0.1,
+ maxitrs=5,
+ classindex=1,
+ numfacts=0,
+ evalmethod="CV",
+ numfolds=10,
+ CVfoldthresh=0.7,
+ varselmethod="none",
+ scheme_val="one-vs-all",
+ iter_learn=1,boostweight=rep(0,dim(trainm)[2]))
[1] "dim of trainm is "
[1]   130 22283
[1]   130 22283
[1] "length of factcols"
[1] 0
[1]   130 22283
[1]   100 22283
integer(0)
character(0)
NULL
[1] "ok"
[1] "test class"
[1] 2 1 2 2
Levels: 1 2
[1] "orig train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] "orig train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] 6.7866 8.0963 7.4812
[1] "norm train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] "mean of feat 2"
[1] 8.273493
[1] "sd of feat 2"
[1] 0.7010279
[1] "maxnum is "
[1] 5
[1] "# of genes left after filtering:"
[1]   130 22283
GeneSelection: iteration 1 
GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
[1] "varselmethod"
[1] "none"
[1] "dim of scoring matrix is "
[1] 22283     1
[1] 22283
[1] "DS index stage 1"
[1] NA
[1] "bestgenelist"
[1]  1083  2211  2667  8166 15464
     201555_at 202683_s_at 203139_at 208670_s_at 216092_s_at
[1,]    9.9323      8.8393    9.7965      8.6539     10.4159
[2,]    9.5628      8.4030    8.3696      9.5953      9.7648
[3,]   10.3905      8.3998    9.0933      9.8134      8.3641
     201555_at 202683_s_at 203139_at 208670_s_at 216092_s_at
[1,]    9.9499      8.8732    8.8140      8.8319     10.6963
[2,]    9.6616      8.5511    8.7652      9.8519      9.3780
[3,]    9.4638      8.5826    9.4426      9.3521      9.3840
[1] "numgenes selected:5"
[1] "test acc:0.75"
[1] "test AUC acc:0.715686274509804"
[1] "10 fold train81.5384615384615"
[1] "confusion matrix train 10 fold"
          nci_y
pred10fold  1  2
         1 23  4
         2 10 93
[1] "confusion matrix test"
         test_y
pred_test  1  2
        1 10 20
        2  5 65
[1] "train acc:0.892307692307692"
[1] "confusion matrix train"
          nci_y
pred_train  1  2
         1 23  4
         2 10 93
[1] "DS index stage 1"
[1] NA
[1] "KI index stage 1"
[1] NA
Warning messages:
1: In if (is.na(boostweight) == TRUE) { :
  the condition has length > 1 and only the first element will be used
2: In if (is.na(testm) == TRUE) { :
  the condition has length > 1 and only the first element will be used
3: In if (is.na(testclass) == TRUE) { :
  the condition has length > 1 and only the first element will be used
4: In mean.default(DS_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
5: In mean.default(DS_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
6: In mean.default(KI_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
> 
> if(FALSE){
+ CMAres<-performCMA(trainm, trainclass, testm, testclass,outloc,
+ maxnum=as.numeric(args[10]),
+ minnum=3,
+ stepitr=1,
+ gsmethods=c("rf"), #"lasso","elasticnet","kruskal.test"), #"f.test", "f.test", "elasticnet", "wilcox.test", "welch.test"),
+ pct_train=0.40,
+ accuracyweight=1,
+ featweight=0.06,
+ minpresent=1,
+ kname="radial",
+ norm_method="none",
+ tolerance=0.1,
+ maxitrs=5,
+ classindex=1,
+ numfacts=0,
+ evalmethod="CV",
+ numfolds=10,
+ CVfoldthresh=0.7,
+ varselmethod="none",
+ scheme_val="one-vs-all",
+ iter_learn=1,boostweight=rep(0,dim(trainm)[2]))
+ }
> 
> CMAres<-performCMA(trainm, trainclass, testm, testclass,outloc,
+ maxnum=as.numeric(args[10]),
+ minnum=3,
+ stepitr=1,
+ gsmethods=c("f.test"), #"lasso","elasticnet","kruskal.test"), #"f.test", "f.test", "elasticnet", "wilcox.test", "welch.test"),
+ pct_train=0.40,
+ accuracyweight=1,
+ featweight=0.06,
+ minpresent=1,
+ kname="radial",
+ norm_method="none",
+ tolerance=0.1,
+ maxitrs=5,
+ classindex=1,
+ numfacts=0,
+ evalmethod="CV",
+ numfolds=10,
+ CVfoldthresh=0.7,
+ varselmethod="none",
+ scheme_val="one-vs-all",
+ iter_learn=1,boostweight=rep(0,dim(trainm)[2]))
[1] "dim of trainm is "
[1]   130 22283
[1]   130 22283
[1] "length of factcols"
[1] 0
[1]   130 22283
[1]   100 22283
integer(0)
character(0)
NULL
[1] "ok"
[1] "test class"
[1] 2 1 2 2
Levels: 1 2
[1] "orig train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] "orig train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] 6.7866 8.0963 7.4812
[1] "norm train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] "mean of feat 2"
[1] 8.273493
[1] "sd of feat 2"
[1] 0.7010279
[1] "maxnum is "
[1] 5
[1] "# of genes left after filtering:"
[1]   130 22283
GeneSelection: iteration 1 
GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
[1] "varselmethod"
[1] "none"
[1] "dim of scoring matrix is "
[1] 22283     1
[1] 22283
[1] "DS index stage 1"
[1] NA
[1] "bestgenelist"
[1]  1083  4352  5927 13543 18415
     201555_at 204825_at 206401_s_at 214164_x_at 219051_x_at
[1,]    9.9323    8.9393      9.9796     12.6474      8.5236
[2,]    9.5628    7.7652      9.9498     11.7852      8.9626
[3,]   10.3905    9.9136      6.0807     12.7464     10.7458
     201555_at 204825_at 206401_s_at 214164_x_at 219051_x_at
[1,]    9.9499    7.9851     10.6463     12.7392      9.5138
[2,]    9.6616    5.2744      8.2532     10.9092      5.3641
[3,]    9.4638    5.9481      7.4477     10.6696      7.1097
[1] "numgenes selected:5"
[1] "test acc:0.71"
[1] "test AUC acc:0.664705882352941"
[1] "10 fold train78.4615384615385"
[1] "confusion matrix train 10 fold"
          nci_y
pred10fold  1  2
         1 22 11
         2 11 86
[1] "confusion matrix test"
         test_y
pred_test  1  2
        1  9 23
        2  6 62
[1] "train acc:0.830769230769231"
[1] "confusion matrix train"
          nci_y
pred_train  1  2
         1 22 11
         2 11 86
[1] "DS index stage 1"
[1] NA
[1] "KI index stage 1"
[1] NA
Warning messages:
1: In if (is.na(boostweight) == TRUE) { :
  the condition has length > 1 and only the first element will be used
2: In if (is.na(testm) == TRUE) { :
  the condition has length > 1 and only the first element will be used
3: In if (is.na(testclass) == TRUE) { :
  the condition has length > 1 and only the first element will be used
4: In mean.default(DS_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
5: In mean.default(DS_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
6: In mean.default(KI_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
> 
> #1
> CMAres<-performCMA(trainm, trainclass, testm, testclass,outloc,
+ maxnum=as.numeric(args[10]),
+ minnum=3,
+ stepitr=1,
+ gsmethods=c("limma","lasso","rfe","elasticnet", "f.test"), #"lasso","elasticnet","kruskal.test"), #"f.test", "f.test", "elasticnet", "wilcox.test", "welch.test"),
+ pct_train=0.40,
+ accuracyweight=1,
+ featweight=0.06,
+ minpresent=1,
+ kname="radial",
+ norm_method="none",
+ tolerance=0.1,
+ maxitrs=5,
+ classindex=1,
+ numfacts=0,
+ evalmethod="CV",
+ numfolds=10,
+ CVfoldthresh=0.7,
+ varselmethod="none",
+ scheme_val="one-vs-all",
+ iter_learn=1,boostweight=rep(0,dim(trainm)[2]))
[1] "dim of trainm is "
[1]   130 22283
[1]   130 22283
[1] "length of factcols"
[1] 0
[1]   130 22283
[1]   100 22283
integer(0)
character(0)
NULL
[1] "ok"
[1] "test class"
[1] 2 1 2 2
Levels: 1 2
[1] "orig train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] "orig train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] 6.7866 8.0963 7.4812
[1] "norm train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] "mean of feat 2"
[1] 8.273493
[1] "sd of feat 2"
[1] 0.7010279
[1] "maxnum is "
[1] 5
[1] "# of genes left after filtering:"
[1]   130 22283
GeneSelection: iteration 1 
GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
[1] "varselmethod"
[1] "none"
GeneSelection: iteration 1 
GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
genelist
 1083 15464  2667 11253  2211  8166 11968 18226  1326 18415  1732  3155  4208 
   18    14    12     8     6     6     6     6     4     4     2     2     2 
 4349  4352  5278  8550 18456 
    2     2     2     2     2 
[1] "varselmethod"
[1] "none"
GeneSelection: iteration 1 
GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
[1] "varselmethod"
[1] "none"
GeneSelection: iteration 1 
GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
[1] "varselmethod"
[1] "none"
GeneSelection: iteration 1 
GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
[1] "varselmethod"
[1] "none"
[1] "dim of scoring matrix is "
[1] 22283     5
[1] 22283
[1] "DS index stage 1"
[1] 0.2
[1] "bestgenelist"
 [1]  1083  2211  2667  3155  4352  4756  5240  5278  5927  8166  8388  8667
[13] 11253 13543 15464 18415
     201555_at 202683_s_at 203139_at 203628_at 204825_at 205229_s_at
[1,]    9.9323      8.8393    9.7965   10.7755    8.9393      6.8695
[2,]    9.5628      8.4030    8.3696    9.8410    7.7652      5.4533
[3,]   10.3905      8.3998    9.0933    9.4169    9.9136      6.2767
     205713_s_at 205751_at 206401_s_at 208670_s_at 208893_s_at 209173_at
[1,]     10.0607    5.3569      9.9796      8.6539      4.0949   12.9392
[2,]      5.6228    3.7733      9.9498      9.5953      9.2703   14.1501
[3,]      6.8404    2.5009      6.0807      9.8134      3.9487   14.5585
     211864_s_at 214164_x_at 216092_s_at 219051_x_at
[1,]     10.7931     12.6474     10.4159      8.5236
[2,]      9.0349     11.7852      9.7648      8.9626
[3,]     10.4934     12.7464      8.3641     10.7458
     201555_at 202683_s_at 203139_at 203628_at 204825_at 205229_s_at
[1,]    9.9499      8.8732    8.8140    9.4326    7.9851      5.2668
[2,]    9.6616      8.5511    8.7652    9.8046    5.2744      7.1769
[3,]    9.4638      8.5826    9.4426    7.9079    5.9481      6.9284
     205713_s_at 205751_at 206401_s_at 208670_s_at 208893_s_at 209173_at
[1,]      5.2933    5.4450     10.6463      8.8319      7.6049   13.2041
[2,]      4.3142    6.3482      8.2532      9.8519      8.9154   11.3631
[3,]      4.5240    6.0619      7.4477      9.3521      9.1121   11.1800
     211864_s_at 214164_x_at 216092_s_at 219051_x_at
[1,]      9.2348     12.7392     10.6963      9.5138
[2,]     10.1938     10.9092      9.3780      5.3641
[3,]      8.4931     10.6696      9.3840      7.1097
[1] "numgenes selected:16"
[1] "test acc:0.8"
[1] "test AUC acc:0.71764705882353"
[1] "10 fold train86.1538461538462"
[1] "confusion matrix train 10 fold"
          nci_y
pred10fold  1  2
         1 31  2
         2  2 95
[1] "confusion matrix test"
         test_y
pred_test  1  2
        1  9 14
        2  6 71
[1] "train acc:0.969230769230769"
[1] "confusion matrix train"
          nci_y
pred_train  1  2
         1 31  2
         2  2 95
[1] "DS index stage 1"
[1] 0.2
[1] "KI index stage 1"
[1] 0.1998205
[[1]]
[1] "var3155"  "var4352"  "var5927"  "var13543" "var18415"

[[2]]
[1] "var1083"  "var2211"  "var2667"  "var11253" "var15464"

[[3]]
[1] "var4756" "var5240" "var5278" "var8388" "var8667"

[[4]]
[1] "var1083"  "var2211"  "var2667"  "var8166"  "var15464"

[[5]]
[1] "var1083"  "var4352"  "var5927"  "var13543" "var18415"


 Iteration 1 :  Optimal value:  16.8 
 Optimal List:   var1083,var5927,var2667,var13543,var15464 

 Iteration 2 :  Optimal value:  16.8 
 Optimal List:   var1083,var2211,var2667,var5278,var15464 

 Iteration 3 :  Optimal value:  17.2 
 Optimal List:   var1083,var2667,var2211,var5927,var8166 

 Iteration 4 :  Optimal value:  16 
 Optimal List:   var1083,var4352,var5927,var2667,var15464 

 Iteration 5 :  Optimal value:  16 
 Optimal List:   var1083,var4352,var2667,var5927,var13543 

 Iteration 6 :  Optimal value:  16 
 Optimal List:   var1083,var4352,var2211,var5927,var2667 

 Iteration 7 :  Optimal value:  16 
 Optimal List:   var1083,var4352,var2211,var5927,var13543 

 Iteration 8 :  Optimal value:  16 
 Optimal List:   var1083,var4352,var5927,var2211,var13543 

 Iteration 9 :  Optimal value:  16 
 Optimal List:   var1083,var2211,var2667,var13543,var5927 

 Iteration 10 :  Optimal value:  16 
 Optimal List:   var1083,var4352,var5927,var2211,var15464 
[1] "test acc rank aggreg CE:0.73"
[1] "test AUC acc rank aggreg CE:0.676470588235294"
[1] "10 fold train rank aggreg res CE82.3076923076923"
[1] "confusion matrix train 10 fold rank aggreg CE"
            nci_y
pred10foldRA  1  2
           1 25  8
           2  8 89
[1] "Num itr RA CE"
[1] 10
[1] "Test BER aggreg CE is"
[1] 0.6764706

 Iteration 1 :  Optimal value:  18.8 
 Optimal List:   var1083,var2667,var15464,var5927,var5278 

 Iteration 2 :  Optimal value:  18.8 
 Optimal List:   var1083,var2667,var15464,var5927,var4756 

 Iteration 3 :  Optimal value:  18 
 Optimal List:   var1083,var4352,var18415,var2211,var3155 

 Iteration 4 :  Optimal value:  18 
 Optimal List:   var1083,var4352,var18415,var2211,var3155 

 Iteration 5 :  Optimal value:  17.2 
 Optimal List:   var1083,var4352,var3155,var2211,var18415 

 Iteration 6 :  Optimal value:  17.2 
 Optimal List:   var1083,var4352,var3155,var2211,var18415 

 Iteration 7 :  Optimal value:  17.2 
 Optimal List:   var1083,var4352,var3155,var2211,var18415 

 Iteration 8 :  Optimal value:  17.2 
 Optimal List:   var1083,var4352,var3155,var2211,var18415 

 Iteration 9 :  Optimal value:  16.4 
 Optimal List:   var1083,var4352,var2211,var13543,var3155 

 Iteration 10 :  Optimal value:  16.4 
 Optimal List:   var1083,var4352,var2667,var13543,var3155 

 Iteration 11 :  Optimal value:  16.4 
 Optimal List:   var1083,var4352,var2667,var13543,var8667 

 Iteration 12 :  Optimal value:  16 
 Optimal List:   var1083,var4352,var2667,var13543,var18415 

 Iteration 13 :  Optimal value:  16.4 
 Optimal List:   var1083,var4352,var2211,var13543,var3155 

 Iteration 14 :  Optimal value:  16.4 
 Optimal List:   var1083,var4352,var2211,var13543,var8667 

 Iteration 15 :  Optimal value:  16.4 
 Optimal List:   var1083,var4352,var2211,var2667,var8667 

 Iteration 16 :  Optimal value:  16.4 
 Optimal List:   var1083,var4352,var2211,var13543,var3155 

 Iteration 17 :  Optimal value:  16.4 
 Optimal List:   var1083,var4352,var2211,var13543,var8667 

 Iteration 18 :  Optimal value:  16.4 
 Optimal List:   var1083,var4352,var2211,var13543,var3155 

 Iteration 19 :  Optimal value:  16.4 
 Optimal List:   var1083,var4352,var2211,var13543,var8667 

 Iteration 20 :  Optimal value:  16.4 
 Optimal List:   var1083,var4352,var2211,var13543,var8667 

 Iteration 21 :  Optimal value:  16.4 
 Optimal List:   var1083,var4352,var2211,var13543,var11253 

 Iteration 22 :  Optimal value:  16.4 
 Optimal List:   var1083,var4352,var2211,var13543,var4756 

 Iteration 23 :  Optimal value:  16.4 
 Optimal List:   var1083,var4352,var2211,var13543,var11253 

 Iteration 24 :  Optimal value:  16.4 
 Optimal List:   var1083,var4352,var2211,var13543,var8667 

 Iteration 25 :  Optimal value:  16.4 
 Optimal List:   var1083,var4352,var2211,var13543,var3155 

 Iteration 26 :  Optimal value:  16.4 
 Optimal List:   var1083,var4352,var2211,var13543,var8667 

 Iteration 27 :  Optimal value:  16.4 
 Optimal List:   var1083,var4352,var2211,var13543,var8667 

 Iteration 28 :  Optimal value:  16.4 
 Optimal List:   var1083,var4352,var2211,var13543,var4756 

 Iteration 29 :  Optimal value:  16.4 
 Optimal List:   var1083,var4352,var2211,var13543,var11253 

 Iteration 30 :  Optimal value:  16.4 
 Optimal List:   var1083,var4352,var2211,var13543,var8667 

 Iteration 31 :  Optimal value:  16.4 
 Optimal List:   var1083,var2211,var4352,var13543,var11253 

 Iteration 32 :  Optimal value:  16.4 
 Optimal List:   var1083,var2211,var4352,var13543,var11253 

 Iteration 33 :  Optimal value:  16.4 
 Optimal List:   var1083,var2211,var4352,var13543,var11253 

 Iteration 34 :  Optimal value:  16 
 Optimal List:   var1083,var4352,var2211,var13543,var2667 

 Iteration 35 :  Optimal value:  16 
 Optimal List:   var1083,var4352,var2211,var13543,var2667 

 Iteration 36 :  Optimal value:  16 
 Optimal List:   var1083,var4352,var2211,var13543,var2667 

 Iteration 37 :  Optimal value:  16 
 Optimal List:   var1083,var4352,var2211,var13543,var2667 

 Iteration 38 :  Optimal value:  16 
 Optimal List:   var1083,var4352,var2211,var2667,var13543 

 Iteration 39 :  Optimal value:  16 
 Optimal List:   var1083,var4352,var2211,var13543,var2667 

 Iteration 40 :  Optimal value:  16 
 Optimal List:   var1083,var4352,var2211,var13543,var2667 

 Iteration 41 :  Optimal value:  16 
 Optimal List:   var1083,var4352,var2211,var13543,var2667 

 Iteration 42 :  Optimal value:  16 
 Optimal List:   var1083,var4352,var2211,var13543,var2667 

 Iteration 43 :  Optimal value:  16 
 Optimal List:   var1083,var4352,var2211,var13543,var2667 

 Iteration 44 :  Optimal value:  16 
 Optimal List:   var1083,var4352,var2211,var13543,var2667 

 Iteration 45 :  Optimal value:  16 
 Optimal List:   var1083,var4352,var2211,var13543,var2667 

 Iteration 46 :  Optimal value:  16 
 Optimal List:   var1083,var4352,var2211,var13543,var2667 

 Iteration 47 :  Optimal value:  16 
 Optimal List:   var1083,var4352,var2211,var13543,var2667 

 Iteration 48 :  Optimal value:  16 
 Optimal List:   var1083,var4352,var2211,var13543,var2667 

 Iteration 49 :  Optimal value:  16 
 Optimal List:   var1083,var4352,var2211,var13543,var2667 

 Iteration 50 :  Optimal value:  16 
 Optimal List:   var1083,var4352,var2211,var13543,var2667 

 Iteration 51 :  Optimal value:  16 
 Optimal List:   var1083,var4352,var2211,var13543,var2667 

 Iteration 52 :  Optimal value:  16 
 Optimal List:   var1083,var4352,var2211,var13543,var2667 

 Iteration 53 :  Optimal value:  16 
 Optimal List:   var1083,var4352,var5927,var13543,var2667 

 Iteration 54 :  Optimal value:  16 
 Optimal List:   var1083,var4352,var5927,var13543,var2667 

 Iteration 55 :  Optimal value:  16 
 Optimal List:   var1083,var4352,var2211,var13543,var2667 

 Iteration 56 :  Optimal value:  16 
 Optimal List:   var1083,var4352,var2211,var13543,var2667 

 Iteration 57 :  Optimal value:  16 
 Optimal List:   var1083,var4352,var2211,var13543,var2667 

 Iteration 58 :  Optimal value:  16 
 Optimal List:   var1083,var4352,var2211,var13543,var2667 

 Iteration 59 :  Optimal value:  16 
 Optimal List:   var1083,var4352,var5927,var13543,var2667 

 Iteration 60 :  Optimal value:  16 
 Optimal List:   var1083,var4352,var5927,var13543,var2667 

 Iteration 61 :  Optimal value:  16 
 Optimal List:   var1083,var4352,var2211,var13543,var2667 

 Iteration 62 :  Optimal value:  16 
 Optimal List:   var1083,var4352,var2211,var13543,var2667 

 Iteration 63 :  Optimal value:  16 
 Optimal List:   var1083,var4352,var2211,var13543,var2667 
[1] "test acc rank aggreg GA:0.74"
[1] "test AUC acc rank aggreg GA:0.654901960784314"
[1] "10 fold train rank aggreg res GA75.3846153846154"
[1] "confusion matrix train 10 fold rank aggreg GA"
            nci_y
pred10foldRA  1  2
           1 21  5
           2 12 92
[1] "Num itr RA GA"
[1] 64
[1] "Test BER aggreg GA is"
[1] 0.654902
Warning messages:
1: In if (is.na(boostweight) == TRUE) { :
  the condition has length > 1 and only the first element will be used
2: In if (is.na(testm) == TRUE) { :
  the condition has length > 1 and only the first element will be used
3: In if (is.na(testclass) == TRUE) { :
  the condition has length > 1 and only the first element will be used
> 
> cma_feat_list<-colnames(trainm)
> 
> save(CMAres,file="CMAres.Rda")
> write.table(cma_feat_list,file="selected_cma_feat_list.txt",sep="t",row.names=FALSE)
> 
> # modtraindata=modtrain, modtestdata=modtest, blindtest=testacc, modtrainclass=nci_y, modtestclass=test_y
> #if(FALSE)
> {
+ trainm<-CMAres$modtraindata
+ testm<-CMAres$modtestdata
+ trainclass<-CMAres$modtrainclass
+ testclass<-CMAres$modtestclass
+ learningsets<-CMAres$learningsets
+ }
> 
> if(FALSE)
+ {
+ trainclass<-trainm[,1] #CMAres$modtrainclass
+ testclass<-testm[,1] #CMAres$modtestclass
+ trainm<-trainm[,-c(1)] #CMAres$modtrainmata
+ testm<-testm[,-c(1)] #CMAres$modtestmata
+ 
+ }
> 
> d_dim<-dim(trainm)
> 
> print("Original dimension")
[1] "Original dimension"
> print(d_dim)
[1] 130  16
> 
> #2 call run_pso function()
> system.time(psores<-run_pso(outloc=outloc,trainm,trainclass,testm,testclass,transition_matrix,c1=2.05,
+ c2=2.05,
+ itr=10,
+ globalpso_maxitr=10,
+ global_max_itr=3,
+ num_part=20,
+ kname="radial",
+ errortype="BER",
+ weightA<-as.numeric(args[1]),
+ weightB<-as.numeric(args[2]),
+ weightC<-as.numeric(args[3]),
+ weightD<-as.numeric(args[4]),
+ featweight.max=0.01,
+ featweight.min=0.01,
+ numfolds=10,
+ followerprob=as.numeric(args[6]),
+ confusionprob=as.numeric(args[7]),
+ leaderprob=as.numeric(args[8]),
+ wmax=1,
+ wmin=1,
+ behavior_reset_itr=5,
+ maxitrreset=10,
+ num_neighbors=3,
+ minselect.pct=0.5,
+ evalMode="CV2",
+ minfitnessthresh=50,
+ maxnum=as.numeric(args[10]),minnum=3,inertia_method=args[5],particlebehav_method="randbased",constriction_factor=1,
+ select.global.best=TRUE,numnodes=2,evalFunc=eval_fit_kfold_diff,itr.terminate=FALSE,train.pct=as.numeric(args[11]),min.iter.select=1))
[1] "c1: 2.05"
[1] "c2: 2.05"
[1] "itr: 10"
[1] "globalpso_maxitr: 10"
[1] "global_max_itr: 3"
[1] "num_part: 20"
[1] "kname: radial"
[1] "errortype: BER"
[1] "weightA: 0.5"
[1] "weightB: 0.25"
[1] "weightC: 0.05"
[1] "weightD: 0.2"
[1] "featweight.max: 0.01"
[1] "featweight.min: 0.01"
[1] "numfolds: 10"
[1] "followerprob: 0.45"
[1] "confusionprob: 0.2"
[1] "leaderprob: 0.25"
[1] "wmax: 1"
[1] "wmin: 1"
[1] "behavior_reset_itr: 5"
[1] "maxitrreset: 10"
[1] "num_neighbors: 3"
[1] "minselect.pct: 0.5"
[1] "minfitnessthresh: 50"
[1] "maxnum: 5"
[1] "minnum: 3"
[1] "inertia_method: global"
[1] "particlebehav_method: randbased"
[1] "constriction_factor: 1"
[1] "select.global.best: TRUE"
[1] "DS index stage 2"
[1] 0.7463784
[1] "KI index stage 2"
[1] -Inf
[1] 1
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  2.000   3.000   7.500   6.438   9.000  10.000 
[1] "Number of features selected in 1 iterations:"
[1] 16
[1] 0.7272727 1.0000000
[1] 0.7272727 1.0000000
[1] "accuracy: 73.8426217382692 num_feat:16 fitness:39.4686724695376"
$fitfunc
[1] -39.46867

$cverror
[1] 73.84262

$cvpermerror
[1] 50

$testacc
[1] 95.93877

$reverseacc
[1] 86.36364

[1] -39.46867
[1] "Number of features selected in 2 iterations:"
[1] 16
[1] 0.7272727 1.0000000
[1] 0.7272727 1.0000000
[1] "accuracy: 73.8426217382692 num_feat:16 fitness:39.4686724695376"
$fitfunc
[1] -39.46867

$cverror
[1] 73.84262

$cvpermerror
[1] 50

$testacc
[1] 95.93877

$reverseacc
[1] 86.36364

[1] -39.46867
[1] "Number of features selected in 3 iterations:"
[1] 13
[1] 0.7575758 1.0000000
[1] 0.7575758 1.0000000
[1] "accuracy: 74.3753870415462 num_feat:13 fitness:40.0505570834083"
$fitfunc
[1] -40.05056

$cverror
[1] 74.37539

$cvpermerror
[1] 50

$testacc
[1] 97.45392

$reverseacc
[1] 87.87879

[1] -40.05056
[1] "Number of features selected in 4 iterations:"
[1] 11
[1] 0.7575758 1.0000000
[1] 0.7575758 1.0000000
[1] "accuracy: 78.1167051312534 num_feat:11 fitness:43.6048092686302"
$fitfunc
[1] -43.60481

$cverror
[1] 78.11671

$cvpermerror
[1] 50

$testacc
[1] 97.45392

$reverseacc
[1] 87.87879

[1] -43.60481
[1] "Number of features selected in 5 iterations:"
[1] 11
[1] 0.7575758 1.0000000
[1] 0.7575758 1.0000000
[1] "accuracy: 78.1167051312534 num_feat:11 fitness:43.6048092686302"
$fitfunc
[1] -43.60481

$cverror
[1] 78.11671

$cvpermerror
[1] 50

$testacc
[1] 97.45392

$reverseacc
[1] 87.87879

[1] -43.60481
[1] "Number of features selected in 6 iterations:"
[1] 11
[1] 0.7575758 1.0000000
[1] 0.7575758 1.0000000
[1] "accuracy: 78.1167051312534 num_feat:11 fitness:43.6048092686302"
$fitfunc
[1] -43.60481

$cverror
[1] 78.11671

$cvpermerror
[1] 50

$testacc
[1] 97.45392

$reverseacc
[1] 87.87879

[1] -43.60481
[1] "Number of features selected in 7 iterations:"
[1] 10
[1] 0.7575758 1.0000000
[1] 0.7575758 1.0000000
[1] "accuracy: 78.4587905417056 num_feat:10 fitness:43.9297904085597"
$fitfunc
[1] -43.92979

$cverror
[1] 78.45879

$cvpermerror
[1] 50

$testacc
[1] 97.45392

$reverseacc
[1] 87.87879

[1] -43.92979
[1] "Number of features selected in 8 iterations:"
[1] 8
[1] 0.8484848 1.0000000
[1] 0.8484848 1.0000000
[1] "accuracy: 82.2427918198254 num_feat:8 fitness:47.7518643500463"
$fitfunc
[1] -47.75186

$cverror
[1] 82.24279

$cvpermerror
[1] 50

$testacc
[1] 94.93908

$reverseacc
[1] 92.42424

[1] -47.75186
[1] "Number of features selected in 9 iterations:"
[1] 5
[1] 0.6060606 0.9793814
[1] 0.6060606 0.9793814
[1] "accuracy: 69.5080956689798 num_feat:5 fitness:34.8600747347222"
$fitfunc
[1] -34.86007

$cverror
[1] 69.5081

$cvpermerror
[1] 50.1946

$testacc
[1] 90.87785

$reverseacc
[1] 79.2721

[1] -34.86007
[1] "Number of features selected in 10 iterations:"
[1] 2
[1] "accuracy: 1 num_feat:2 fitness:-100"
$fitfunc
[1] 100

$cverror
[1] 1

$cvpermerror
[1] 100

$testacc
[1] 1

$reverseacc
[1] 1

[1] 100
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.8462  0.9038  0.9615  0.9410  0.9744  1.0000 
[1] "Number of features selected in 8 iterations:"
[1] 8
[1] "Modified train 10 fold accuracy using train data is "
[1] 91.53846
[1] "Modified train accuracy is "
[1] 0.9692308
[1] "train confusion matrix is "
          trainclass
pred_train  1  2
         1 30  1
         2  3 96
[1] "Train dimension is "
[1] 130   8
[1] "Test dimension is "
[1] 100   8
[1] "Test confusion matrix is "
    
pred  1  2
   1  6 11
   2  9 74
[1] "Test acc is "
[1] 0.8
[1] "train 10 fold"
[1] 93.07692
[1] "Test confusion matrix is "
    
pred  1  2
   1  6 11
   2  9 74
[1] "Test acc is "
[1] 0.8
[1] "Test AUC:"
[1] 0.6352941
[1] "Train acc is "
[1] 0.9692308
[1] "# of features after CMA:"
NULL
[1] "# of features after PSO:"
[1] 130   9
   user  system elapsed 
  4.660   0.000   4.682 
> 
> feat_ind<-psores$bestfeatlist
> feat_names<-psores$bestfeatnames
> 
> scoringmatrix<-as.data.frame(psores$scoringmatrix)
> print(scoringmatrix)
   V1 V2 V3 V4 V5 V6 V7 V8 V9 V10
1   1  1  1  1  1  0  1  1  1   1
2   1  1  1  1  1  1  1  1  1   1
3   1  1  1  1  0  1  1  0  1   1
4   0  0  1  0  0  0  0  0  1   0
5   1  1  1  0  1  1  1  1  1   1
6   1  0  1  1  1  1  0  1  1   0
7   0  1  1  0  0  0  1  0  0   0
8   1  1  1  1  1  1  1  1  1   1
9   1  0  1  1  1  1  0  1  1   0
10  1  1  1  0  1  0  1  1  1   1
11  1  1  1  0  1  1  1  1  1   1
12  0  0  0  1  0  0  1  0  0   0
13  1  1  1  0  1  0  1  1  1   1
14  0  0  0  0  1  0  1  1  0   0
15  0  1  0  1  1  1  1  0  0   1
16  0  0  0  0  1  0  0  0  1   0
> print(feat_names[feat_ind])
[1] "201555_at"   "202683_s_at" "203139_at"   "204825_at"   "205751_at"  
[6] "208670_s_at" "208893_s_at" "211864_s_at"
> 
> save(psores,file="psores.Rda")
> print("Complete")
[1] "Complete"
> 
