
R version 3.2.2 (2015-08-14) -- "Fire Safety"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> #.libPaths("/home/stu/kuppal3/karan_libs/Rlibs")
> library(snow)
> library(e1071)
> library(yaImpute)

Attaching package: ‘yaImpute’

The following object is masked from ‘package:e1071’:

    impute

> library(pROC)
Type 'citation("pROC")' for a citation.

Attaching package: ‘pROC’

The following objects are masked from ‘package:stats’:

    cov, smooth, var

> library(bioDist)
Loading required package: Biobase
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘parallel’

The following objects are masked from ‘package:snow’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, clusterSplit, makeCluster, parApply,
    parCapply, parLapply, parRapply, parSapply, splitIndices,
    stopCluster


Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:snow’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parRapply, parSapply

The following objects are masked from ‘package:stats’:

    IQR, mad, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, as.vector, cbind, colnames,
    do.call, duplicated, eval, evalq, Filter, Find, get, grep, grepl,
    intersect, is.unsorted, lapply, lengths, Map, mapply, match, mget,
    order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unlist, unsplit

Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

Loading required package: KernSmooth
KernSmooth 2.23 loaded
Copyright M. P. Wand 1997-2009
> #library(CMA, lib="/home/stu/kuppal3/karan_libs/Rlibs/")
> library(RankAggreg)
> library(CMA)

Attaching package: ‘CMA’

The following object is masked from ‘package:pROC’:

    roc

The following object is masked from ‘package:e1071’:

    tune

> library(expm)
Loading required package: Matrix

Attaching package: ‘expm’

The following object is masked from ‘package:Matrix’:

    expm

> 
> cl<-makeCluster(1)
> 
> 
> args<-commandArgs(trailingOnly=TRUE)
> #sname<-paste("/home/stu/kuppal3/Research/Feature_selection/Rcode/version2016/OCFS_",args[9],".R",sep="")
> #sname<-paste("/Users/karanuppal/Documents/Gatech/Projects/Algorithms/TwostagePSO/version2016/OCFS_",args[9],".R",sep="")
> 
> sname<-paste("/home/kuppal2/Documents/Projects/xmsPANDA/Other/scripts/OCFS_",args[9],".R",sep="")
> source(sname)
> print(sname)
[1] "/home/kuppal2/Documents/Projects/xmsPANDA/Other/scripts/OCFS_vfeb817_v3.R"
> 
> #data_loc<-"/home/stu/kuppal3/Research/Feature_selection/Datasets/MAQCII_BreastCancer/" 
> #data_loc<-"/Users/karanuppal/Documents/Gatech/Projects/Algorithms/TwostagePSO/Datasets/MAQCII_BreastCancer/"
> 
> data_loc<-"/home/kuppal2/Documents/Projects/xmsPANDA/Other/Datasets/MAQCII_BreastCancer/"
> setwd(data_loc)
> #load("/home/stu/kuppal3/Research/Feature_selection/Datasets/MAQCII_BreastCancer/MaqcIIbr.Rda")
> 
> load("MaqcIIbr.Rda")
> 
> outloc<-paste(data_loc,"OCFSv062016_v32_ER_sensitivity_itr",args[9],"/",sep="")
> dir.create(outloc)
> setwd(outloc)
> 
> trainm<-MaqcIIbr$trainx
> testm<-MaqcIIbr$testx
> trainclass<-MaqcIIbr$trainER #PCRvsRD
> testclass<-MaqcIIbr$testER #PCRvsRD
> 
> #trainclass<-MaqcIIbr$trainPCRvsRD
> #testclass<-MaqcIIbr$testPCRvsRD
> 
> trainm<-trainm[,-c(22284)]
> testm<-testm[,-c(22284)]
> trainm<-apply(trainm,2,as.numeric)
> testm<-apply(testm,2,as.numeric)
> 
> 
> 
> 
> trainm<-cbind(trainclass,trainm)
> testm<-cbind(testclass,testm)
> 
> trainm<-na.omit(trainm)
> testm<-na.omit(testm)
> 
> 
> 
> 
> 
> 
> #OCFSvmay2415v2reg_itr1_LassoRFELIMMAELpres1backwsel_l0.25f0.45c0.25_top10pctmaxitrs100minselmedianrandbehavfeatw0.01_CV2accA100B1wrand6methodsmax100wrand/"
> 
> dir.create(outloc)
Warning message:
In dir.create(outloc) :
  '/home/kuppal2/Documents/Projects/xmsPANDA/Other/Datasets/MAQCII_BreastCancer/OCFSv062016_v32_ER_sensitivity_itrvfeb817_v3' already exists
> setwd(outloc)
> 
> trainm<-as.matrix(trainm)
> testm<-as.matrix(testm)
> trainclass<-trainm[,1] #CMAres$modtrainclass
> testclass<-testm[,1] #CMAres$modtestclass
> trainm<-trainm[,-c(1)] #CMAres$modtrainmata
> testm<-testm[,-c(1)] #CMAres$modtestmata
> 
> #a: Confusions
> #b: Neighbors
> #c: Global
> #d: Death
> 
> a<-c(0.25,0.25,0.25,0.25)
> b<-c(0.3,0.1,0.4,0.1)
> c<-c(0.25,0.25,0.5,0)
> d<-c(0.9,0.1,0,0.1)
> 
> a<-c(0,0.4,0.1,0.5)
> b<-c(0.3,0.1,0.4,0.1)
> c<-c(0,0.5,0.5,0)
> d<-c(0.9,0.1,0,0)
> 
> a<-c(0,0.4,0.1,0.5)
> b<-c(0.2,0.3,0.4,0.1)
> c<-c(0,0.4,0.4,0.2)
> d<-c(0.9,0.1,0,0)
> 
> transition_matrix<-rbind(a,b,c,d)
> 
> 
> dir.create(outloc)
Warning message:
In dir.create(outloc) :
  '/home/kuppal2/Documents/Projects/xmsPANDA/Other/Datasets/MAQCII_BreastCancer/OCFSv062016_v32_ER_sensitivity_itrvfeb817_v3' already exists
> setwd(outloc)
> temp2=t(trainm)
> temp2=apply(temp2, 2, function(x){which(x=="MD")})
> temp2=unlist(temp2)
> temp2=unique(temp2)
> if(length(temp2)>1)
+ {
+ 	trainm=trainm[,-c(temp2)]
+ 
+ 	rm(temp2)
+ }
> 
> boostweight=rep(0,dim(trainm)[2])
> 
> CMAres<-performCMA(trainm, trainclass, testm, testclass,outloc,
+ maxnum=as.numeric(args[10]),
+ minnum=3,
+ stepitr=1,
+ gsmethods=c("limma"), #"lasso","elasticnet","kruskal.test"), #"f.test", "f.test", "elasticnet", "wilcox.test", "welch.test"),
+ pct_train=0.40,
+ accuracyweight=1,
+ featweight=0.06,
+ minpresent=1,
+ kname="radial",
+ norm_method="none",
+ tolerance=0.1,
+ maxitrs=5,
+ classindex=1,
+ numfacts=0,
+ evalmethod="CV",
+ numfolds=10,
+ CVfoldthresh=0.7,
+ varselmethod="none",
+ scheme_val="one-vs-all",
+ iter_learn=1,boostweight=rep(0,dim(trainm)[2]))
[1] "dim of trainm is "
[1]   130 22283
[1]   130 22283
[1] "length of factcols"
[1] 0
[1]   130 22283
[1]   100 22283
integer(0)
character(0)
NULL
[1] "ok"
[1] "test class"
[1] 2 1 2 2
Levels: 1 2
[1] "orig train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] "orig train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] 6.7866 8.0963 7.4812
[1] "norm train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] "mean of feat 2"
[1] 8.273493
[1] "sd of feat 2"
[1] 0.7010279
[1] "maxnum is "
[1] 15
[1] "# of genes left after filtering:"
[1]   130 22283
GeneSelection: iteration 1 

Attaching package: ‘limma’

The following object is masked from ‘package:BiocGenerics’:

    plotMA

GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
[1] "varselmethod"
[1] "none"
[1] "dim of scoring matrix is "
[1] 22283     1
[1] 22283
[1] "DS index stage 1"
[1] NA
[1] "bestgenelist"
 [1]  1616  1617  3490  4035  4752  9092  9093  9094 10196 12339 12343 13543
[13] 13819 15240 17203
     202088_at 202089_s_at 203963_at 204508_s_at 205225_at 209602_s_at
[1,]   14.6123     14.1629   12.0638     10.1763   13.0759     11.1535
[2,]   14.9213     14.5094   11.3553      9.3275   13.7616     10.8437
[3,]   12.9683     11.7586   12.3832      9.9200   12.7360     10.7019
     209603_at 209604_s_at 210735_s_at 212956_at 212960_at 214164_x_at
[1,]   10.5793     14.3763     11.5638   13.3600   10.8422     12.6474
[2,]   10.5772     14.0214     10.8918   13.2925   10.5720     11.7852
[3,]   11.1181     14.5222     11.6213   12.3582    9.8482     12.7464
     214440_at 215867_x_at 217838_s_at
[1,]   12.6295     12.6194     11.8757
[2,]   13.4492     11.5534     11.8462
[3,]   12.3205     12.7285     12.0364
     202088_at 202089_s_at 203963_at 204508_s_at 205225_at 209602_s_at
[1,]   14.9541     14.0631   12.4052      9.8038   13.8754     11.9413
[2,]   13.8916     12.7077   10.4033      7.9689   11.7217     11.0319
[3,]   11.1969     10.1126    9.8307      7.6789   10.9960      8.8487
     209603_at 209604_s_at 210735_s_at 212956_at 212960_at 214164_x_at
[1,]   11.9790     15.0625     11.3620   13.5201   11.4301     12.7392
[2,]   10.8744     14.4978      9.5434   12.5480   10.2569     10.9092
[3,]    8.0211     12.4583      9.2310   11.2917    9.3181     10.6696
     214440_at 215867_x_at 217838_s_at
[1,]   14.4201     12.5744     11.7325
[2,]    9.4904     11.0575     10.1952
[3,]    9.9120     11.0769      9.5668
[1] "numgenes selected:15"
[1] "test acc:0.88"
[1] "test AUC acc:0.883144178226145"
[1] "10 fold train93.8461538461538"
[1] "confusion matrix train 10 fold"
          nci_y
pred10fold  1  2
         1 45  1
         2  5 79
[1] "confusion matrix test"
         test_y
pred_test  1  2
        1 35  8
        2  4 53
[1] "train acc:0.953846153846154"
[1] "confusion matrix train"
          nci_y
pred_train  1  2
         1 45  1
         2  5 79
[1] "DS index stage 1"
[1] NA
[1] "KI index stage 1"
[1] NA
Warning messages:
1: In if (is.na(boostweight) == TRUE) { :
  the condition has length > 1 and only the first element will be used
2: In if (is.na(testm) == TRUE) { :
  the condition has length > 1 and only the first element will be used
3: In if (is.na(testclass) == TRUE) { :
  the condition has length > 1 and only the first element will be used
4: In mean.default(DS_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
5: In mean.default(DS_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
6: In mean.default(KI_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
> 
> 
> CMAres<-performCMA(trainm, trainclass, testm, testclass,outloc,
+ maxnum=as.numeric(args[10]),
+ minnum=3,
+ stepitr=1,
+ gsmethods=c("lasso"), #"lasso","elasticnet","kruskal.test"), #"f.test", "f.test", "elasticnet", "wilcox.test", "welch.test"),
+ pct_train=0.40,
+ accuracyweight=1,
+ featweight=0.06,
+ minpresent=1,
+ kname="radial",
+ norm_method="none",
+ tolerance=0.1,
+ maxitrs=5,
+ classindex=1,
+ numfacts=0,
+ evalmethod="CV",
+ numfolds=10,
+ CVfoldthresh=0.7,
+ varselmethod="none",
+ scheme_val="one-vs-all",
+ iter_learn=1,boostweight=rep(0,dim(trainm)[2]))
[1] "dim of trainm is "
[1]   130 22283
[1]   130 22283
[1] "length of factcols"
[1] 0
[1]   130 22283
[1]   100 22283
integer(0)
character(0)
NULL
[1] "ok"
[1] "test class"
[1] 2 1 2 2
Levels: 1 2
[1] "orig train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] "orig train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] 6.7866 8.0963 7.4812
[1] "norm train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] "mean of feat 2"
[1] 8.273493
[1] "sd of feat 2"
[1] 0.7010279
[1] "maxnum is "
[1] 15
[1] "# of genes left after filtering:"
[1]   130 22283
GeneSelection: iteration 1 
Loaded glmnet 2.0-5


Attaching package: ‘glmnet’

The following object is masked from ‘package:pROC’:

    auc

GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
genelist
    1     2     3     4     5     6  4752 15102  4035     7     8     9  9093 
   20    20    20    20    20    20    20    20    18    16    14    14    14 
   10 12339  3155    11  7147 13819 10447 17203    12  1511  9279 11605 
   12    10     8     6     6     6     4     4     2     2     2     2 
[1] "varselmethod"
[1] "none"
[1] "dim of scoring matrix is "
[1] 22283     1
[1] 22283
[1] "DS index stage 1"
[1] NA
[1] "bestgenelist"
 [1]     1     2     3     4     5     6     7     8     9    10  4035  4752
[13]  9093 12339 15102
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
     1405_i_at 1431_at 204508_s_at 205225_at 209603_at 212956_at 215729_s_at
[1,]    6.2325  6.8450     10.1763   13.0759   10.5793   13.3600      2.9565
[2,]    6.9047  5.8878      9.3275   13.7616   10.5772   13.2925      1.5807
[3,]    6.5940  5.6843      9.9200   12.7360   11.1181   12.3582      5.6368
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.3446  7.0781 7.5017 10.6764    6.4327  9.2305  8.1481  6.1196
[2,]   12.0376  7.6011 7.3458 10.5366    6.5568  9.1180  8.3105  7.1575
[3,]   10.9684  7.4696 8.3759 11.1175    7.0579  9.3514  8.1214  7.7247
     1405_i_at 1431_at 204508_s_at 205225_at 209603_at 212956_at 215729_s_at
[1,]    4.2718  7.1375      9.8038   13.8754   11.9790   13.5201      1.9565
[2,]    8.4540  6.6935      7.9689   11.7217   10.8744   12.5480      5.3426
[3,]    9.9479  7.7319      7.6789   10.9960    8.0211   11.2917      5.3609
[1] "numgenes selected:15"
[1] "test acc:0.86"
[1] "test AUC acc:0.85750315258512"
[1] "10 fold train93.8461538461538"
[1] "confusion matrix train 10 fold"
          nci_y
pred10fold  1  2
         1 49  0
         2  1 80
[1] "confusion matrix test"
         test_y
pred_test  1  2
        1 33  8
        2  6 53
[1] "train acc:0.992307692307692"
[1] "confusion matrix train"
          nci_y
pred_train  1  2
         1 49  0
         2  1 80
[1] "DS index stage 1"
[1] NA
[1] "KI index stage 1"
[1] NA
Warning messages:
1: In if (is.na(boostweight) == TRUE) { :
  the condition has length > 1 and only the first element will be used
2: In if (is.na(testm) == TRUE) { :
  the condition has length > 1 and only the first element will be used
3: In if (is.na(testclass) == TRUE) { :
  the condition has length > 1 and only the first element will be used
4: In mean.default(DS_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
5: In mean.default(DS_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
6: In mean.default(KI_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
> 
> CMAres<-performCMA(trainm, trainclass, testm, testclass,outloc,
+ maxnum=as.numeric(args[10]),
+ minnum=3,
+ stepitr=1,
+ gsmethods=c("rfe"), #"lasso","elasticnet","kruskal.test"), #"f.test", "f.test", "elasticnet", "wilcox.test", "welch.test"),
+ pct_train=0.40,
+ accuracyweight=1,
+ featweight=0.06,
+ minpresent=1,
+ kname="radial",
+ norm_method="none",
+ tolerance=0.1,
+ maxitrs=5,
+ classindex=1,
+ numfacts=0,
+ evalmethod="CV",
+ numfolds=10,
+ CVfoldthresh=0.7,
+ varselmethod="none",
+ scheme_val="one-vs-all",
+ iter_learn=1,boostweight=rep(0,dim(trainm)[2]))
[1] "dim of trainm is "
[1]   130 22283
[1]   130 22283
[1] "length of factcols"
[1] 0
[1]   130 22283
[1]   100 22283
integer(0)
character(0)
NULL
[1] "ok"
[1] "test class"
[1] 2 1 2 2
Levels: 1 2
[1] "orig train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] "orig train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] 6.7866 8.0963 7.4812
[1] "norm train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] "mean of feat 2"
[1] 8.273493
[1] "sd of feat 2"
[1] 0.7010279
[1] "maxnum is "
[1] 15
[1] "# of genes left after filtering:"
[1]   130 22283
GeneSelection: iteration 1 
GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
[1] "varselmethod"
[1] "none"
[1] "dim of scoring matrix is "
[1] 22283     1
[1] 22283
[1] "DS index stage 1"
[1] NA
[1] "bestgenelist"
 [1]  4035  4536  4556  4752  4967  5389  5904  6280  6325  7147  8667  8936
[13] 12583 15102 21934
     204508_s_at 205009_at 205029_s_at 205225_at 205440_s_at 205862_at
[1,]     10.1763   13.2850      2.9025   13.0759      8.6216    8.6098
[2,]      9.3275   14.4107      2.2747   13.7616     10.7598    8.0994
[3,]      9.9200   14.7836      0.9203   12.7360      7.7832    7.6469
     206378_at 206754_s_at 206799_at 207626_s_at 209173_at 209443_at
[1,]    6.1826     12.4854    3.1490      7.4760   12.9392    5.0127
[2,]   15.2013     10.5188   14.9688      3.5539   14.1501    4.8988
[3,]   12.9669     11.6232   11.6974      7.2242   14.5585    7.8027
     213201_s_at 215729_s_at 39549_at
[1,]      4.2884      2.9565   3.1357
[2,]      4.8678      1.5807   7.2846
[3,]      8.3652      5.6368   4.7775
     204508_s_at 205009_at 205029_s_at 205225_at 205440_s_at 205862_at
[1,]      9.8038   14.3747      3.0068   13.8754     10.5785   10.0742
[2,]      7.9689   11.2149      3.3895   11.7217      8.5134    7.3888
[3,]      7.6789    9.8209      4.9401   10.9960      9.3702    4.4202
     206378_at 206754_s_at 206799_at 207626_s_at 209173_at 209443_at
[1,]   10.2362     11.4867    7.9310      8.5889   13.2041    9.7194
[2,]   13.2355      7.4297   10.6196      7.0887   11.3631    5.8991
[3,]    9.5032      5.9013    6.2148      5.7342   11.1800    6.6629
     213201_s_at 215729_s_at 39549_at
[1,]      7.5478      1.9565   5.4232
[2,]      5.0501      5.3426   5.8324
[3,]      5.0025      5.3609   5.1314
[1] "numgenes selected:15"
[1] "test acc:0.87"
[1] "test AUC acc:0.87494745691467"
[1] "10 fold train96.9230769230769"
[1] "confusion matrix train 10 fold"
          nci_y
pred10fold  1  2
         1 48  0
         2  2 80
[1] "confusion matrix test"
         test_y
pred_test  1  2
        1 35  9
        2  4 52
[1] "train acc:0.984615384615385"
[1] "confusion matrix train"
          nci_y
pred_train  1  2
         1 48  0
         2  2 80
[1] "DS index stage 1"
[1] NA
[1] "KI index stage 1"
[1] NA
Warning messages:
1: In if (is.na(boostweight) == TRUE) { :
  the condition has length > 1 and only the first element will be used
2: In if (is.na(testm) == TRUE) { :
  the condition has length > 1 and only the first element will be used
3: In if (is.na(testclass) == TRUE) { :
  the condition has length > 1 and only the first element will be used
4: In mean.default(DS_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
5: In mean.default(DS_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
6: In mean.default(KI_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
> 
> CMAres<-performCMA(trainm, trainclass, testm, testclass,outloc,
+ maxnum=as.numeric(args[10]),
+ minnum=3,
+ stepitr=1,
+ gsmethods=c("elasticnet"), #"lasso","elasticnet","kruskal.test"), #"f.test", "f.test", "elasticnet", "wilcox.test", "welch.test"),
+ pct_train=0.40,
+ accuracyweight=1,
+ featweight=0.06,
+ minpresent=1,
+ kname="radial",
+ norm_method="none",
+ tolerance=0.1,
+ maxitrs=5,
+ classindex=1,
+ numfacts=0,
+ evalmethod="CV",
+ numfolds=10,
+ CVfoldthresh=0.7,
+ varselmethod="none",
+ scheme_val="one-vs-all",
+ iter_learn=1,boostweight=rep(0,dim(trainm)[2]))
[1] "dim of trainm is "
[1]   130 22283
[1]   130 22283
[1] "length of factcols"
[1] 0
[1]   130 22283
[1]   100 22283
integer(0)
character(0)
NULL
[1] "ok"
[1] "test class"
[1] 2 1 2 2
Levels: 1 2
[1] "orig train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] "orig train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] 6.7866 8.0963 7.4812
[1] "norm train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] "mean of feat 2"
[1] 8.273493
[1] "sd of feat 2"
[1] 0.7010279
[1] "maxnum is "
[1] 15
[1] "# of genes left after filtering:"
[1]   130 22283
GeneSelection: iteration 1 
GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
[1] "varselmethod"
[1] "none"
[1] "dim of scoring matrix is "
[1] 22283     1
[1] 22283
[1] "DS index stage 1"
[1] NA
[1] "bestgenelist"
 [1]    1    2    3    4    5    6    7    8    9   10   11   12 4035 4752 9093
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
     1405_i_at 1431_at 1438_at 1487_at 204508_s_at 205225_at 209603_at
[1,]    6.2325  6.8450  7.5774  9.3080     10.1763   13.0759   10.5793
[2,]    6.9047  5.8878  9.8562  8.8356      9.3275   13.7616   10.5772
[3,]    6.5940  5.6843  7.4038  9.5398      9.9200   12.7360   11.1181
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.3446  7.0781 7.5017 10.6764    6.4327  9.2305  8.1481  6.1196
[2,]   12.0376  7.6011 7.3458 10.5366    6.5568  9.1180  8.3105  7.1575
[3,]   10.9684  7.4696 8.3759 11.1175    7.0579  9.3514  8.1214  7.7247
     1405_i_at 1431_at 1438_at 1487_at 204508_s_at 205225_at 209603_at
[1,]    4.2718  7.1375  8.5984  8.9272      9.8038   13.8754   11.9790
[2,]    8.4540  6.6935  8.5378  8.8336      7.9689   11.7217   10.8744
[3,]    9.9479  7.7319  8.2890  9.4868      7.6789   10.9960    8.0211
[1] "numgenes selected:15"
[1] "test acc:0.88"
[1] "test AUC acc:0.878520386717108"
[1] "10 fold train91.5384615384615"
[1] "confusion matrix train 10 fold"
          nci_y
pred10fold  1  2
         1 44  0
         2  6 80
[1] "confusion matrix test"
         test_y
pred_test  1  2
        1 34  7
        2  5 54
[1] "train acc:0.953846153846154"
[1] "confusion matrix train"
          nci_y
pred_train  1  2
         1 44  0
         2  6 80
[1] "DS index stage 1"
[1] NA
[1] "KI index stage 1"
[1] NA
Warning messages:
1: In if (is.na(boostweight) == TRUE) { :
  the condition has length > 1 and only the first element will be used
2: In if (is.na(testm) == TRUE) { :
  the condition has length > 1 and only the first element will be used
3: In if (is.na(testclass) == TRUE) { :
  the condition has length > 1 and only the first element will be used
4: In mean.default(DS_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
5: In mean.default(DS_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
6: In mean.default(KI_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
> 
> if(FALSE){
+ CMAres<-performCMA(trainm, trainclass, testm, testclass,outloc,
+ maxnum=as.numeric(args[10]),
+ minnum=3,
+ stepitr=1,
+ gsmethods=c("rf"), #"lasso","elasticnet","kruskal.test"), #"f.test", "f.test", "elasticnet", "wilcox.test", "welch.test"),
+ pct_train=0.40,
+ accuracyweight=1,
+ featweight=0.06,
+ minpresent=1,
+ kname="radial",
+ norm_method="none",
+ tolerance=0.1,
+ maxitrs=5,
+ classindex=1,
+ numfacts=0,
+ evalmethod="CV",
+ numfolds=10,
+ CVfoldthresh=0.7,
+ varselmethod="none",
+ scheme_val="one-vs-all",
+ iter_learn=1,boostweight=rep(0,dim(trainm)[2]))
+ }
> 
> CMAres<-performCMA(trainm, trainclass, testm, testclass,outloc,
+ maxnum=as.numeric(args[10]),
+ minnum=3,
+ stepitr=1,
+ gsmethods=c("f.test"), #"lasso","elasticnet","kruskal.test"), #"f.test", "f.test", "elasticnet", "wilcox.test", "welch.test"),
+ pct_train=0.40,
+ accuracyweight=1,
+ featweight=0.06,
+ minpresent=1,
+ kname="radial",
+ norm_method="none",
+ tolerance=0.1,
+ maxitrs=5,
+ classindex=1,
+ numfacts=0,
+ evalmethod="CV",
+ numfolds=10,
+ CVfoldthresh=0.7,
+ varselmethod="none",
+ scheme_val="one-vs-all",
+ iter_learn=1,boostweight=rep(0,dim(trainm)[2]))
[1] "dim of trainm is "
[1]   130 22283
[1]   130 22283
[1] "length of factcols"
[1] 0
[1]   130 22283
[1]   100 22283
integer(0)
character(0)
NULL
[1] "ok"
[1] "test class"
[1] 2 1 2 2
Levels: 1 2
[1] "orig train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] "orig train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] 6.7866 8.0963 7.4812
[1] "norm train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] "mean of feat 2"
[1] 8.273493
[1] "sd of feat 2"
[1] 0.7010279
[1] "maxnum is "
[1] 15
[1] "# of genes left after filtering:"
[1]   130 22283
GeneSelection: iteration 1 
GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
[1] "varselmethod"
[1] "none"
[1] "dim of scoring matrix is "
[1] 22283     1
[1] 22283
[1] "DS index stage 1"
[1] NA
[1] "bestgenelist"
 [1]  1616  1617  3490  4035  4752  9092  9093  9094 10196 12339 12343 13543
[13] 13819 15240 17203
     202088_at 202089_s_at 203963_at 204508_s_at 205225_at 209602_s_at
[1,]   14.6123     14.1629   12.0638     10.1763   13.0759     11.1535
[2,]   14.9213     14.5094   11.3553      9.3275   13.7616     10.8437
[3,]   12.9683     11.7586   12.3832      9.9200   12.7360     10.7019
     209603_at 209604_s_at 210735_s_at 212956_at 212960_at 214164_x_at
[1,]   10.5793     14.3763     11.5638   13.3600   10.8422     12.6474
[2,]   10.5772     14.0214     10.8918   13.2925   10.5720     11.7852
[3,]   11.1181     14.5222     11.6213   12.3582    9.8482     12.7464
     214440_at 215867_x_at 217838_s_at
[1,]   12.6295     12.6194     11.8757
[2,]   13.4492     11.5534     11.8462
[3,]   12.3205     12.7285     12.0364
     202088_at 202089_s_at 203963_at 204508_s_at 205225_at 209602_s_at
[1,]   14.9541     14.0631   12.4052      9.8038   13.8754     11.9413
[2,]   13.8916     12.7077   10.4033      7.9689   11.7217     11.0319
[3,]   11.1969     10.1126    9.8307      7.6789   10.9960      8.8487
     209603_at 209604_s_at 210735_s_at 212956_at 212960_at 214164_x_at
[1,]   11.9790     15.0625     11.3620   13.5201   11.4301     12.7392
[2,]   10.8744     14.4978      9.5434   12.5480   10.2569     10.9092
[3,]    8.0211     12.4583      9.2310   11.2917    9.3181     10.6696
     214440_at 215867_x_at 217838_s_at
[1,]   14.4201     12.5744     11.7325
[2,]    9.4904     11.0575     10.1952
[3,]    9.9120     11.0769      9.5668
[1] "numgenes selected:15"
[1] "test acc:0.88"
[1] "test AUC acc:0.883144178226145"
[1] "10 fold train93.8461538461538"
[1] "confusion matrix train 10 fold"
          nci_y
pred10fold  1  2
         1 45  1
         2  5 79
[1] "confusion matrix test"
         test_y
pred_test  1  2
        1 35  8
        2  4 53
[1] "train acc:0.953846153846154"
[1] "confusion matrix train"
          nci_y
pred_train  1  2
         1 45  1
         2  5 79
[1] "DS index stage 1"
[1] NA
[1] "KI index stage 1"
[1] NA
Warning messages:
1: In if (is.na(boostweight) == TRUE) { :
  the condition has length > 1 and only the first element will be used
2: In if (is.na(testm) == TRUE) { :
  the condition has length > 1 and only the first element will be used
3: In if (is.na(testclass) == TRUE) { :
  the condition has length > 1 and only the first element will be used
4: In mean.default(DS_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
5: In mean.default(DS_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
6: In mean.default(KI_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
> 
> #1
> CMAres<-performCMA(trainm, trainclass, testm, testclass,outloc,
+ maxnum=as.numeric(args[10]),
+ minnum=3,
+ stepitr=1,
+ gsmethods=c("limma","lasso","rfe","elasticnet", "f.test"), #"lasso","elasticnet","kruskal.test"), #"f.test", "f.test", "elasticnet", "wilcox.test", "welch.test"),
+ pct_train=0.40,
+ accuracyweight=1,
+ featweight=0.06,
+ minpresent=1,
+ kname="radial",
+ norm_method="none",
+ tolerance=0.1,
+ maxitrs=5,
+ classindex=1,
+ numfacts=0,
+ evalmethod="CV",
+ numfolds=10,
+ CVfoldthresh=0.7,
+ varselmethod="none",
+ scheme_val="one-vs-all",
+ iter_learn=1,boostweight=rep(0,dim(trainm)[2]))
[1] "dim of trainm is "
[1]   130 22283
[1]   130 22283
[1] "length of factcols"
[1] 0
[1]   130 22283
[1]   100 22283
integer(0)
character(0)
NULL
[1] "ok"
[1] "test class"
[1] 2 1 2 2
Levels: 1 2
[1] "orig train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] "orig train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] 6.7866 8.0963 7.4812
[1] "norm train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] "mean of feat 2"
[1] 8.273493
[1] "sd of feat 2"
[1] 0.7010279
[1] "maxnum is "
[1] 15
[1] "# of genes left after filtering:"
[1]   130 22283
GeneSelection: iteration 1 
GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
[1] "varselmethod"
[1] "none"
GeneSelection: iteration 1 
GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
genelist
    1     2     3     4     5     6  4752 15102  4035     7     8     9  9093 
   20    20    20    20    20    20    20    20    18    16    14    14    14 
   10 12339  3155    11  7147 13819 10447 17203    12  1511  9279 11605 
   12    10     8     6     6     6     4     4     2     2     2     2 
[1] "varselmethod"
[1] "none"
GeneSelection: iteration 1 
GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
[1] "varselmethod"
[1] "none"
GeneSelection: iteration 1 
GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
[1] "varselmethod"
[1] "none"
GeneSelection: iteration 1 
GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
[1] "varselmethod"
[1] "none"
[1] "dim of scoring matrix is "
[1] 22283     5
[1] 22283
[1] "DS index stage 1"
[1] 0.34
[1] "bestgenelist"
 [1]     1     2     3     4     5     6     7     8     9    10    11    12
[13]  1616  1617  3490  4035  4536  4556  4752  4967  5389  5904  6280  6325
[25]  7147  8667  8936  9092  9093  9094 10196 12339 12343 12583 13543 13819
[37] 15102 15240 17203 21934
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
     1405_i_at 1431_at 1438_at 1487_at 202088_at 202089_s_at 203963_at
[1,]    6.2325  6.8450  7.5774  9.3080   14.6123     14.1629   12.0638
[2,]    6.9047  5.8878  9.8562  8.8356   14.9213     14.5094   11.3553
[3,]    6.5940  5.6843  7.4038  9.5398   12.9683     11.7586   12.3832
     204508_s_at 205009_at 205029_s_at 205225_at 205440_s_at 205862_at
[1,]     10.1763   13.2850      2.9025   13.0759      8.6216    8.6098
[2,]      9.3275   14.4107      2.2747   13.7616     10.7598    8.0994
[3,]      9.9200   14.7836      0.9203   12.7360      7.7832    7.6469
     206378_at 206754_s_at 206799_at 207626_s_at 209173_at 209443_at
[1,]    6.1826     12.4854    3.1490      7.4760   12.9392    5.0127
[2,]   15.2013     10.5188   14.9688      3.5539   14.1501    4.8988
[3,]   12.9669     11.6232   11.6974      7.2242   14.5585    7.8027
     209602_s_at 209603_at 209604_s_at 210735_s_at 212956_at 212960_at
[1,]     11.1535   10.5793     14.3763     11.5638   13.3600   10.8422
[2,]     10.8437   10.5772     14.0214     10.8918   13.2925   10.5720
[3,]     10.7019   11.1181     14.5222     11.6213   12.3582    9.8482
     213201_s_at 214164_x_at 214440_at 215729_s_at 215867_x_at 217838_s_at
[1,]      4.2884     12.6474   12.6295      2.9565     12.6194     11.8757
[2,]      4.8678     11.7852   13.4492      1.5807     11.5534     11.8462
[3,]      8.3652     12.7464   12.3205      5.6368     12.7285     12.0364
     39549_at
[1,]   3.1357
[2,]   7.2846
[3,]   4.7775
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.3446  7.0781 7.5017 10.6764    6.4327  9.2305  8.1481  6.1196
[2,]   12.0376  7.6011 7.3458 10.5366    6.5568  9.1180  8.3105  7.1575
[3,]   10.9684  7.4696 8.3759 11.1175    7.0579  9.3514  8.1214  7.7247
     1405_i_at 1431_at 1438_at 1487_at 202088_at 202089_s_at 203963_at
[1,]    4.2718  7.1375  8.5984  8.9272   14.9541     14.0631   12.4052
[2,]    8.4540  6.6935  8.5378  8.8336   13.8916     12.7077   10.4033
[3,]    9.9479  7.7319  8.2890  9.4868   11.1969     10.1126    9.8307
     204508_s_at 205009_at 205029_s_at 205225_at 205440_s_at 205862_at
[1,]      9.8038   14.3747      3.0068   13.8754     10.5785   10.0742
[2,]      7.9689   11.2149      3.3895   11.7217      8.5134    7.3888
[3,]      7.6789    9.8209      4.9401   10.9960      9.3702    4.4202
     206378_at 206754_s_at 206799_at 207626_s_at 209173_at 209443_at
[1,]   10.2362     11.4867    7.9310      8.5889   13.2041    9.7194
[2,]   13.2355      7.4297   10.6196      7.0887   11.3631    5.8991
[3,]    9.5032      5.9013    6.2148      5.7342   11.1800    6.6629
     209602_s_at 209603_at 209604_s_at 210735_s_at 212956_at 212960_at
[1,]     11.9413   11.9790     15.0625     11.3620   13.5201   11.4301
[2,]     11.0319   10.8744     14.4978      9.5434   12.5480   10.2569
[3,]      8.8487    8.0211     12.4583      9.2310   11.2917    9.3181
     213201_s_at 214164_x_at 214440_at 215729_s_at 215867_x_at 217838_s_at
[1,]      7.5478     12.7392   14.4201      1.9565     12.5744     11.7325
[2,]      5.0501     10.9092    9.4904      5.3426     11.0575     10.1952
[3,]      5.0025     10.6696    9.9120      5.3609     11.0769      9.5668
     39549_at
[1,]   5.4232
[2,]   5.8324
[3,]   5.1314
[1] "numgenes selected:40"
[1] "test acc:0.89"
[1] "test AUC acc:0.895964691046658"
[1] "10 fold train96.1538461538462"
[1] "confusion matrix train 10 fold"
          nci_y
pred10fold  1  2
         1 49  0
         2  1 80
[1] "confusion matrix test"
         test_y
pred_test  1  2
        1 36  8
        2  3 53
[1] "train acc:0.992307692307692"
[1] "confusion matrix train"
          nci_y
pred_train  1  2
         1 49  0
         2  1 80
[1] "DS index stage 1"
[1] 0.34
[1] "KI index stage 1"
[1] 0.3395554
[[1]]
 [1] "var1616"  "var1617"  "var3490"  "var4035"  "var4752"  "var9092" 
 [7] "var9093"  "var9094"  "var10196" "var12339" "var12343" "var13543"
[13] "var13819" "var15240" "var17203"

[[2]]
 [1] "var1"     "var2"     "var3"     "var4"     "var5"     "var6"    
 [7] "var7"     "var8"     "var9"     "var10"    "var4035"  "var4752" 
[13] "var9093"  "var12339" "var15102"

[[3]]
 [1] "var4035"  "var4536"  "var4556"  "var4752"  "var4967"  "var5389" 
 [7] "var5904"  "var6280"  "var6325"  "var7147"  "var8667"  "var8936" 
[13] "var12583" "var15102" "var21934"

[[4]]
 [1] "var1"    "var2"    "var3"    "var4"    "var5"    "var6"    "var7"   
 [8] "var8"    "var9"    "var10"   "var11"   "var12"   "var4035" "var4752"
[15] "var9093"

[[5]]
 [1] "var1616"  "var1617"  "var3490"  "var4035"  "var4752"  "var9092" 
 [7] "var9093"  "var9094"  "var10196" "var12339" "var12343" "var13543"
[13] "var13819" "var15240" "var17203"


 Iteration 1 :  Optimal value:  141.2 
 Optimal List:   var4752,var2,var6,var1,var4035,var5,var8,var12339,var7147,var7,var10,var9092,var17203,var1616,var15240 

 Iteration 2 :  Optimal value:  141.2 
 Optimal List:   var4035,var1617,var1,var9093,var9,var3,var3490,var4752,var2,var13543,var1616,var17203,var5904,var15240,var8667 

 Iteration 3 :  Optimal value:  140 
 Optimal List:   var4035,var2,var1617,var7,var3,var6,var1616,var4752,var4536,var9,var4556,var15240,var12339,var5,var8667 

 Iteration 4 :  Optimal value:  137.2 
 Optimal List:   var3,var4035,var4,var4752,var1616,var2,var5,var6,var1,var12583,var10,var7,var17203,var9093,var4536 

 Iteration 5 :  Optimal value:  134.8 
 Optimal List:   var4752,var4035,var3490,var6,var1,var2,var5,var8,var9093,var3,var7,var4536,var13819,var1617,var11 

 Iteration 6 :  Optimal value:  135.6 
 Optimal List:   var1616,var1617,var4035,var2,var9092,var4752,var4,var7,var1,var11,var4556,var13543,var12339,var8667,var10 

 Iteration 7 :  Optimal value:  134.4 
 Optimal List:   var3,var4035,var3490,var4752,var5,var4,var6,var2,var8,var1,var7,var12583,var15102,var12339,var12343 

 Iteration 8 :  Optimal value:  132 
 Optimal List:   var1616,var3490,var4035,var4752,var3,var6,var7,var2,var4967,var12339,var10196,var9093,var9,var5389,var4 

 Iteration 9 :  Optimal value:  132 
 Optimal List:   var1617,var4752,var3,var4035,var5,var1616,var4,var3490,var1,var12339,var9092,var6,var7,var4536,var10 

 Iteration 10 :  Optimal value:  132 
 Optimal List:   var1,var1616,var4035,var7,var4752,var9093,var2,var6,var9,var10,var8,var8667,var12339,var3490,var3 

 Iteration 11 :  Optimal value:  130.8 
 Optimal List:   var3490,var3,var4,var4035,var4752,var7,var1617,var5,var9092,var9,var9093,var12339,var13543,var8,var13819 

 Iteration 12 :  Optimal value:  129.6 
 Optimal List:   var1617,var1616,var4035,var4752,var3,var2,var3490,var7,var12339,var9093,var9,var5,var8,var15240,var6325 

 Iteration 13 :  Optimal value:  131.6 
 Optimal List:   var4035,var2,var1616,var1,var4752,var9093,var1617,var5,var12339,var6,var10,var4967,var9094,var15240,var12 

 Iteration 14 :  Optimal value:  129.6 
 Optimal List:   var4035,var1617,var2,var4752,var5,var9093,var1616,var9094,var8,var10,var6,var9092,var12339,var13819,var12 

 Iteration 15 :  Optimal value:  130.4 
 Optimal List:   var1616,var3,var4035,var4752,var5,var9092,var1,var9093,var7,var9094,var1617,var2,var9,var5904,var21934 

 Iteration 16 :  Optimal value:  129.2 
 Optimal List:   var4035,var2,var1617,var3490,var4752,var9092,var9093,var8,var3,var9,var12339,var10,var12343,var8936,var4536 

 Iteration 17 :  Optimal value:  129.6 
 Optimal List:   var4035,var2,var1617,var4752,var5,var3,var6,var10196,var9094,var12339,var10,var12343,var9093,var15102,var13819 

 Iteration 18 :  Optimal value:  129.2 
 Optimal List:   var1,var1617,var4035,var1616,var4752,var5,var9093,var9094,var9,var2,var10,var12343,var7147,var15240,var15102 

 Iteration 19 :  Optimal value:  128.4 
 Optimal List:   var4035,var1,var1617,var4752,var4,var9092,var7,var9093,var10196,var12339,var6,var12343,var2,var9,var15102 

 Iteration 20 :  Optimal value:  128 
 Optimal List:   var1,var2,var4035,var5,var4752,var1616,var9093,var4,var10196,var12339,var10,var7,var13543,var13819,var12343 

 Iteration 21 :  Optimal value:  128.4 
 Optimal List:   var1616,var1,var4035,var4752,var3490,var6,var9093,var9092,var1617,var7,var12343,var9094,var4,var13543,var15240 

 Iteration 22 :  Optimal value:  128.4 
 Optimal List:   var1,var2,var4035,var4,var4752,var5,var7,var8,var9093,var12339,var9,var12343,var13819,var7147,var12583 

 Iteration 23 :  Optimal value:  128 
 Optimal List:   var1,var4035,var1617,var4752,var4,var9092,var5,var9093,var10196,var12339,var10,var12343,var3490,var13819,var17203 

 Iteration 24 :  Optimal value:  128 
 Optimal List:   var1,var4035,var2,var4752,var3490,var9092,var7,var9093,var9094,var1616,var9,var13543,var12339,var12343,var13819 

 Iteration 25 :  Optimal value:  127.6 
 Optimal List:   var1,var2,var4035,var4752,var3,var9092,var9093,var3490,var8,var12339,var10,var12343,var13543,var15240,var13819 

 Iteration 26 :  Optimal value:  127.6 
 Optimal List:   var1616,var2,var4035,var4752,var4,var9092,var9093,var3490,var8,var12339,var10,var13543,var12343,var10196,var15240 

 Iteration 27 :  Optimal value:  127.6 
 Optimal List:   var1616,var1617,var4035,var4752,var2,var5,var9093,var3490,var9094,var12339,var9,var12343,var13819,var15240,var6 

 Iteration 28 :  Optimal value:  127.2 
 Optimal List:   var1,var1617,var4035,var3,var4752,var1616,var9093,var9092,var5,var9,var12339,var12343,var13543,var15240,var17203 

 Iteration 29 :  Optimal value:  127.6 
 Optimal List:   var1616,var2,var1,var4035,var4752,var9093,var7,var9094,var10196,var12339,var10,var12343,var13819,var9,var15102 

 Iteration 30 :  Optimal value:  127.6 
 Optimal List:   var1,var1617,var4035,var4752,var2,var6,var9093,var4,var10196,var9,var5,var12343,var12339,var15240,var17203 

 Iteration 31 :  Optimal value:  127.6 
 Optimal List:   var1616,var1617,var4035,var4752,var5,var9092,var9093,var3490,var3,var12339,var12343,var6,var13819,var15240,var13543 

 Iteration 32 :  Optimal value:  127.6 
 Optimal List:   var1,var1617,var4035,var4752,var5,var4,var9093,var8,var9,var12339,var10,var13543,var13819,var15240,var7 

 Iteration 33 :  Optimal value:  127.6 
 Optimal List:   var1,var1617,var4035,var3,var4752,var9092,var9093,var3490,var4,var10,var12339,var13543,var13819,var9,var12583 

 Iteration 34 :  Optimal value:  127.6 
 Optimal List:   var1,var2,var4035,var4752,var5,var4,var9093,var9094,var8,var12339,var10,var13543,var13819,var15240,var17203 

 Iteration 35 :  Optimal value:  127.6 
 Optimal List:   var1,var2,var4035,var4752,var1617,var4,var9093,var9094,var10196,var12339,var10,var12343,var7,var15240,var17203 

 Iteration 36 :  Optimal value:  127.2 
 Optimal List:   var1616,var1617,var3,var4035,var4752,var6,var9093,var8,var10196,var12339,var10,var13543,var13819,var15240,var4556 

 Iteration 37 :  Optimal value:  127.6 
 Optimal List:   var1,var2,var4035,var4752,var5,var6,var9093,var9094,var9,var12339,var10,var12343,var13819,var15240,var17203 

 Iteration 38 :  Optimal value:  127.6 
 Optimal List:   var1616,var1617,var4035,var4752,var5,var9092,var9093,var8,var9094,var12339,var10,var2,var13819,var15240,var17203 

 Iteration 39 :  Optimal value:  127.6 
 Optimal List:   var1616,var1,var4035,var4752,var5,var9092,var9093,var9094,var9,var12339,var12343,var13543,var13819,var15240,var17203 

 Iteration 40 :  Optimal value:  127.6 
 Optimal List:   var1616,var2,var3490,var4752,var4035,var4,var9093,var9094,var9,var12339,var7,var13543,var13819,var15240,var17203 

 Iteration 41 :  Optimal value:  127.6 
 Optimal List:   var1616,var2,var4035,var4752,var5,var6,var9093,var1617,var9,var12339,var10,var13543,var13819,var15240,var17203 

 Iteration 42 :  Optimal value:  127.6 
 Optimal List:   var1616,var1,var4035,var4752,var3490,var9092,var9093,var8,var1617,var12339,var12343,var13543,var13819,var15240,var17203 

 Iteration 43 :  Optimal value:  127.6 
 Optimal List:   var1,var2,var4035,var4752,var5,var4,var9093,var9094,var8,var12339,var12343,var1617,var13819,var15240,var17203 
[1] "test acc rank aggreg CE:0.88"
[1] "test AUC acc rank aggreg CE:0.878520386717108"
[1] "10 fold train rank aggreg res CE93.0769230769231"
[1] "confusion matrix train 10 fold rank aggreg CE"
            nci_y
pred10foldRA  1  2
           1 45  0
           2  5 80
[1] "Num itr RA CE"
[1] 43
[1] "Test BER aggreg CE is"
[1] 0.8785204

 Iteration 1 :  Optimal value:  145.6 
 Optimal List:   var3,var4035,var1,var1617,var4752,var6,var5904,var3490,var7147,var4967,var12,var6280,var5,var8936,var10196 

 Iteration 2 :  Optimal value:  145.6 
 Optimal List:   var3,var4035,var1,var1617,var4752,var6,var5904,var3490,var7147,var4967,var12,var6280,var5,var8936,var10196 

 Iteration 3 :  Optimal value:  145.6 
 Optimal List:   var3,var4035,var1,var1617,var4752,var6,var5904,var3490,var7147,var4967,var12,var6280,var5,var8936,var10196 

 Iteration 4 :  Optimal value:  144.8 
 Optimal List:   var4752,var1616,var4035,var10196,var5,var1,var9092,var7147,var10,var1617,var4967,var11,var8,var12343,var3 

 Iteration 5 :  Optimal value:  143.2 
 Optimal List:   var3,var4035,var1,var1617,var4752,var6,var5904,var3490,var7147,var4967,var10,var6280,var5,var8936,var10196 

 Iteration 6 :  Optimal value:  138.4 
 Optimal List:   var3,var4035,var1,var1617,var4752,var6,var5904,var3490,var9093,var4967,var10,var6280,var5,var8936,var10196 

 Iteration 7 :  Optimal value:  135.6 
 Optimal List:   var4035,var1616,var3,var4752,var5,var1,var9092,var2,var10,var3490,var12,var11,var8,var12343,var10196 

 Iteration 8 :  Optimal value:  135.6 
 Optimal List:   var4035,var1616,var3,var4752,var5,var1,var9092,var2,var10,var3490,var12,var11,var8,var12343,var10196 

 Iteration 9 :  Optimal value:  135.2 
 Optimal List:   var1616,var3490,var4035,var4752,var5,var1,var9092,var2,var10,var3,var4967,var11,var8,var12343,var10196 

 Iteration 10 :  Optimal value:  134.4 
 Optimal List:   var1616,var3490,var4035,var4752,var5,var1,var9092,var2,var10196,var3,var4967,var11,var8,var12343,var10 

 Iteration 11 :  Optimal value:  134.4 
 Optimal List:   var1616,var3490,var4035,var4752,var5,var1,var9092,var2,var10196,var3,var4967,var11,var8,var12343,var10 

 Iteration 12 :  Optimal value:  133.2 
 Optimal List:   var4035,var1616,var3,var4752,var5,var1,var9092,var2,var9093,var3490,var12,var11,var8,var12343,var10196 

 Iteration 13 :  Optimal value:  133.2 
 Optimal List:   var4035,var1616,var3,var4752,var5,var1,var9092,var2,var9093,var3490,var12,var11,var8,var12343,var10196 

 Iteration 14 :  Optimal value:  134.8 
 Optimal List:   var3,var1616,var2,var4035,var5,var1,var9092,var4752,var10,var3490,var9094,var11,var8,var12343,var5904 

 Iteration 15 :  Optimal value:  134 
 Optimal List:   var1616,var3,var4752,var4035,var5,var1,var9092,var2,var10,var3490,var9094,var11,var8,var12343,var5904 

 Iteration 16 :  Optimal value:  132.4 
 Optimal List:   var1616,var3,var4752,var4035,var5,var1,var9092,var2,var10,var3490,var9094,var9,var8,var12343,var5904 

 Iteration 17 :  Optimal value:  133.2 
 Optimal List:   var3,var1616,var4752,var4035,var5,var1,var9092,var2,var10,var3490,var9094,var9,var8,var12343,var5904 

 Iteration 18 :  Optimal value:  132.8 
 Optimal List:   var4035,var1616,var4752,var3,var5,var1,var9092,var2,var10,var3490,var9094,var9,var8,var12343,var5904 

 Iteration 19 :  Optimal value:  132.8 
 Optimal List:   var4035,var1616,var4752,var3,var5,var1,var9092,var2,var10,var3490,var9094,var9,var8,var12343,var5904 

 Iteration 20 :  Optimal value:  132.4 
 Optimal List:   var1,var1616,var4752,var3,var5,var4035,var9092,var2,var10,var3490,var9094,var9,var8,var12343,var5904 

 Iteration 21 :  Optimal value:  132.4 
 Optimal List:   var1,var1616,var4752,var3,var5,var4035,var9092,var2,var10,var3490,var9094,var9,var8,var12343,var5904 

 Iteration 22 :  Optimal value:  132.4 
 Optimal List:   var1,var1616,var4752,var3,var5,var4035,var9092,var2,var10,var3490,var9094,var9,var8,var12343,var5904 

 Iteration 23 :  Optimal value:  130.8 
 Optimal List:   var1,var1616,var3,var4752,var5,var4035,var9092,var2,var9093,var3490,var9094,var11,var8,var12343,var5904 

 Iteration 24 :  Optimal value:  130.8 
 Optimal List:   var1,var1616,var3,var4752,var5,var4035,var9092,var2,var9093,var3490,var9094,var11,var8,var12343,var21934 

 Iteration 25 :  Optimal value:  130.8 
 Optimal List:   var1,var1616,var3,var4752,var5,var4035,var9092,var2,var9093,var3490,var9094,var11,var8,var12343,var21934 

 Iteration 26 :  Optimal value:  132.4 
 Optimal List:   var1616,var1,var4752,var3,var5,var4035,var9092,var8,var10,var3490,var9094,var9,var2,var12343,var5904 

 Iteration 27 :  Optimal value:  132.4 
 Optimal List:   var1616,var1,var4752,var3,var5,var4035,var9092,var8,var10,var3490,var9094,var9,var2,var12343,var5904 

 Iteration 28 :  Optimal value:  132.4 
 Optimal List:   var1616,var1,var4752,var3,var5,var4035,var9092,var8,var10,var3490,var9094,var9,var2,var12343,var5904 

 Iteration 29 :  Optimal value:  132 
 Optimal List:   var1,var1616,var4752,var4035,var5,var3,var9092,var2,var10,var3490,var9094,var13819,var8,var12343,var10196 

 Iteration 30 :  Optimal value:  132 
 Optimal List:   var1616,var4035,var3,var4752,var5,var1,var9092,var2,var10,var3490,var9094,var11,var12339,var12343,var10196 

 Iteration 31 :  Optimal value:  132 
 Optimal List:   var1616,var4035,var3,var4752,var5,var1,var9092,var2,var10,var3490,var9094,var11,var12339,var12343,var10196 

 Iteration 32 :  Optimal value:  132 
 Optimal List:   var1,var4035,var3,var4752,var5,var1616,var9092,var2,var10,var3490,var9094,var11,var12339,var12343,var10196 

 Iteration 33 :  Optimal value:  132 
 Optimal List:   var1,var4035,var3,var4752,var5,var1616,var9092,var2,var10,var3490,var9094,var11,var12339,var12343,var10196 

 Iteration 34 :  Optimal value:  131.6 
 Optimal List:   var1,var1616,var4752,var3,var5,var4035,var9092,var2,var10196,var3490,var9094,var9,var8,var4,var5904 

 Iteration 35 :  Optimal value:  131.6 
 Optimal List:   var1,var1616,var4752,var3,var5,var4035,var9092,var2,var10196,var3490,var9094,var9,var8,var4,var5904 

 Iteration 36 :  Optimal value:  131.6 
 Optimal List:   var1,var1616,var4752,var3,var5,var4035,var9092,var2,var10196,var3490,var9094,var9,var8,var4,var5904 

 Iteration 37 :  Optimal value:  130.4 
 Optimal List:   var1,var1616,var4035,var3,var5,var4752,var9092,var2,var10196,var3490,var9094,var9,var8,var4,var5904 

 Iteration 38 :  Optimal value:  130.4 
 Optimal List:   var1,var1616,var4035,var3,var5,var4752,var9092,var4,var10196,var3490,var9094,var9,var8,var2,var5904 

 Iteration 39 :  Optimal value:  130.4 
 Optimal List:   var1,var1616,var4035,var3,var5,var4752,var9092,var4,var10196,var3490,var9094,var9,var8,var2,var5904 

 Iteration 40 :  Optimal value:  130.4 
 Optimal List:   var1,var1616,var4035,var3,var5,var4752,var9092,var4,var10196,var3490,var9094,var9,var8,var2,var5904 

 Iteration 41 :  Optimal value:  130.4 
 Optimal List:   var1,var1616,var4035,var3,var5,var4752,var9092,var4,var10196,var3490,var9094,var9,var8,var2,var5904 

 Iteration 42 :  Optimal value:  130.4 
 Optimal List:   var1,var1616,var4035,var3,var5,var4752,var9092,var4,var10196,var3490,var9094,var9,var8,var2,var5904 

 Iteration 43 :  Optimal value:  130.4 
 Optimal List:   var1,var1616,var4035,var3,var5,var4752,var9092,var2,var10196,var3490,var9094,var9,var8,var4,var5904 

 Iteration 44 :  Optimal value:  130.4 
 Optimal List:   var1,var1616,var4035,var3,var5,var4752,var9092,var2,var10196,var3490,var9094,var9,var8,var4,var5904 

 Iteration 45 :  Optimal value:  130.4 
 Optimal List:   var1,var1616,var4035,var3,var5,var4752,var9092,var4,var10196,var3490,var9094,var9,var8,var2,var5904 

 Iteration 46 :  Optimal value:  131.2 
 Optimal List:   var1,var3,var2,var4035,var5,var1616,var3490,var4752,var10196,var9092,var9094,var13543,var8,var4,var10 

 Iteration 47 :  Optimal value:  131.2 
 Optimal List:   var1,var3,var2,var4035,var5,var1616,var3490,var4752,var10196,var9092,var9094,var13543,var8,var4,var10 

 Iteration 48 :  Optimal value:  131.2 
 Optimal List:   var1,var3,var2,var4035,var5,var1616,var3490,var4752,var10196,var9092,var9094,var13543,var8,var4,var10 

 Iteration 49 :  Optimal value:  131.6 
 Optimal List:   var1616,var1,var2,var4035,var5,var3,var9093,var4752,var10,var9092,var9094,var4536,var8,var4,var5904 

 Iteration 50 :  Optimal value:  130.4 
 Optimal List:   var1,var4035,var1616,var4752,var5,var6,var9092,var2,var10,var3490,var9094,var13543,var12339,var12343,var10196 

 Iteration 51 :  Optimal value:  130.4 
 Optimal List:   var1616,var4035,var3,var4752,var5,var6,var9092,var2,var10,var3490,var9094,var13543,var12339,var12343,var10196 

 Iteration 52 :  Optimal value:  130.4 
 Optimal List:   var1616,var4035,var3,var4752,var5,var6,var9092,var2,var10,var3490,var9094,var13543,var12339,var12343,var10196 

 Iteration 53 :  Optimal value:  130.4 
 Optimal List:   var1616,var4035,var3,var4752,var5,var6,var9092,var2,var10,var3490,var9094,var13543,var12339,var12343,var10196 

 Iteration 54 :  Optimal value:  130.4 
 Optimal List:   var1,var4035,var1616,var2,var5,var3,var9092,var4752,var9094,var3490,var10196,var13543,var12339,var12343,var10 

 Iteration 55 :  Optimal value:  129.6 
 Optimal List:   var1616,var4035,var3,var4752,var5,var6,var9092,var2,var10196,var3490,var9094,var13543,var12339,var12343,var10 

 Iteration 56 :  Optimal value:  130.4 
 Optimal List:   var1616,var4035,var3,var4752,var5,var6,var9092,var2,var10,var3490,var9094,var13543,var12339,var12343,var10196 

 Iteration 57 :  Optimal value:  130.4 
 Optimal List:   var1616,var4035,var3,var4752,var5,var6,var9092,var2,var10,var3490,var9094,var13543,var12339,var12343,var10196 

 Iteration 58 :  Optimal value:  130.4 
 Optimal List:   var1616,var4035,var3,var4752,var5,var6,var9092,var2,var10,var3490,var9094,var13543,var12339,var12343,var10196 

 Iteration 59 :  Optimal value:  130 
 Optimal List:   var1616,var3,var2,var1,var4752,var4035,var9092,var5,var10196,var3490,var12339,var9,var9094,var4,var10 

 Iteration 60 :  Optimal value:  130 
 Optimal List:   var1,var1616,var3490,var4035,var5,var4752,var9092,var2,var10196,var3,var8,var9,var9094,var4,var5904 

 Iteration 61 :  Optimal value:  130 
 Optimal List:   var1616,var3,var2,var1,var4752,var4035,var9092,var5,var10196,var3490,var12339,var9,var9094,var4,var10 

 Iteration 62 :  Optimal value:  130 
 Optimal List:   var1616,var3,var4035,var4752,var5,var6,var9092,var2,var3490,var10,var9094,var13543,var12339,var12343,var10196 

 Iteration 63 :  Optimal value:  130 
 Optimal List:   var1,var1616,var3,var4035,var5,var4752,var9092,var2,var10196,var3490,var4,var9,var9094,var8,var5904 

 Iteration 64 :  Optimal value:  130 
 Optimal List:   var1,var1616,var3,var4035,var5,var4752,var9092,var2,var10196,var3490,var4,var9,var9094,var8,var5904 

 Iteration 65 :  Optimal value:  130 
 Optimal List:   var1616,var4035,var1,var3,var4752,var2,var9092,var5,var10196,var3490,var8,var9,var9094,var4,var10 

 Iteration 66 :  Optimal value:  130 
 Optimal List:   var1616,var4035,var1,var3,var4752,var2,var9092,var5,var10196,var3490,var8,var9,var9094,var4,var10 

 Iteration 67 :  Optimal value:  129.6 
 Optimal List:   var1,var1616,var3,var4035,var5,var4752,var9092,var2,var10196,var3490,var8,var9,var9094,var12343,var10 

 Iteration 68 :  Optimal value:  129.6 
 Optimal List:   var1,var1616,var3,var4035,var5,var4752,var9092,var2,var10196,var3490,var8,var9,var9094,var12343,var10 

 Iteration 69 :  Optimal value:  129.6 
 Optimal List:   var1,var1616,var3,var4035,var5,var4752,var9092,var2,var10196,var3490,var8,var9,var9094,var12343,var10 

 Iteration 70 :  Optimal value:  129.6 
 Optimal List:   var1,var1616,var3,var4035,var5,var4752,var9092,var2,var10196,var3490,var8,var9,var9094,var12343,var10 

 Iteration 71 :  Optimal value:  129.6 
 Optimal List:   var1,var1616,var3,var4035,var5,var4752,var9092,var2,var10196,var3490,var8,var9,var9094,var12343,var10 

 Iteration 72 :  Optimal value:  128.4 
 Optimal List:   var1616,var3,var4035,var4752,var5,var6,var9092,var2,var9093,var3490,var9094,var13543,var12339,var12343,var10 

 Iteration 73 :  Optimal value:  128.4 
 Optimal List:   var1616,var3,var4035,var4752,var5,var6,var9092,var2,var9093,var3490,var9094,var13543,var12339,var12343,var10 

 Iteration 74 :  Optimal value:  128.4 
 Optimal List:   var1616,var3,var4035,var4752,var5,var6,var9092,var2,var9093,var3490,var9094,var13543,var12339,var12343,var10 

 Iteration 75 :  Optimal value:  128.4 
 Optimal List:   var1616,var3,var4035,var4752,var5,var6,var9092,var2,var3490,var9093,var9094,var13543,var12339,var12343,var10 

 Iteration 76 :  Optimal value:  128.4 
 Optimal List:   var1616,var3,var4035,var4752,var5,var6,var9092,var2,var3490,var9093,var9094,var13543,var12339,var12343,var10 

 Iteration 77 :  Optimal value:  128.4 
 Optimal List:   var1,var3,var4035,var4752,var5,var6,var9092,var2,var3490,var9093,var9094,var13543,var12339,var12343,var10 

 Iteration 78 :  Optimal value:  128.4 
 Optimal List:   var1,var3,var4035,var4752,var5,var6,var9092,var2,var3490,var9093,var9094,var13543,var12339,var12343,var10 

 Iteration 79 :  Optimal value:  128.4 
 Optimal List:   var1,var3,var4035,var4752,var5,var6,var9092,var2,var3490,var9093,var9094,var13543,var12339,var12343,var10 

 Iteration 80 :  Optimal value:  128.4 
 Optimal List:   var1,var3,var4035,var4752,var5,var6,var9092,var2,var3490,var9093,var9094,var13543,var12339,var12343,var10 

 Iteration 81 :  Optimal value:  128.4 
 Optimal List:   var1,var3,var4035,var4752,var5,var6,var9092,var2,var3490,var9093,var9094,var13543,var12339,var12343,var10 

 Iteration 82 :  Optimal value:  128.4 
 Optimal List:   var1616,var3,var4035,var4752,var5,var6,var9092,var2,var3490,var9093,var9094,var13543,var12339,var12343,var10 

 Iteration 83 :  Optimal value:  128.4 
 Optimal List:   var1616,var3,var4035,var4752,var5,var6,var9092,var2,var3490,var9093,var9094,var9,var12339,var4,var10 

 Iteration 84 :  Optimal value:  128.4 
 Optimal List:   var1616,var3,var4035,var4752,var5,var6,var9092,var2,var3490,var9093,var9094,var9,var12339,var4,var10 

 Iteration 85 :  Optimal value:  128.4 
 Optimal List:   var1616,var3,var4035,var4752,var5,var6,var9092,var2,var3490,var9093,var9094,var9,var12339,var4,var10 

 Iteration 86 :  Optimal value:  128.4 
 Optimal List:   var1616,var3,var4035,var4752,var5,var6,var9092,var2,var3490,var9093,var9094,var9,var12339,var4,var10 

 Iteration 87 :  Optimal value:  128.4 
 Optimal List:   var1616,var3,var4035,var4752,var5,var6,var9092,var2,var3490,var9093,var9094,var9,var12339,var4,var10 

 Iteration 88 :  Optimal value:  128.4 
 Optimal List:   var1616,var3,var4035,var4752,var5,var6,var9092,var2,var3490,var9093,var9094,var9,var12339,var4,var10 

 Iteration 89 :  Optimal value:  128.4 
 Optimal List:   var1616,var3,var4035,var4752,var5,var6,var9092,var2,var3490,var9093,var9094,var9,var12339,var4,var10 

 Iteration 90 :  Optimal value:  128.4 
 Optimal List:   var1616,var3,var4035,var4752,var5,var6,var9092,var2,var3490,var9093,var9094,var9,var12339,var4,var10 

 Iteration 91 :  Optimal value:  128.4 
 Optimal List:   var1616,var1,var4035,var3,var5,var4752,var9092,var2,var9093,var3490,var8,var9,var9094,var12343,var10 

 Iteration 92 :  Optimal value:  128.4 
 Optimal List:   var1,var3,var4035,var4752,var5,var6,var9092,var2,var3490,var9093,var8,var9,var12339,var4,var10 

 Iteration 93 :  Optimal value:  128.4 
 Optimal List:   var1616,var3,var4035,var4752,var5,var6,var9092,var2,var3490,var9093,var9094,var9,var12339,var4,var10 

 Iteration 94 :  Optimal value:  128.4 
 Optimal List:   var1616,var3,var4035,var4752,var5,var6,var9092,var2,var3490,var9093,var12339,var13543,var8,var4,var10 

 Iteration 95 :  Optimal value:  128.4 
 Optimal List:   var1,var3,var4035,var4752,var5,var6,var9092,var2,var3490,var9093,var8,var9,var12339,var4,var10 

 Iteration 96 :  Optimal value:  128.4 
 Optimal List:   var1,var3,var4035,var4752,var5,var6,var9092,var2,var9093,var3490,var8,var9,var12339,var4,var10 

 Iteration 97 :  Optimal value:  127.6 
 Optimal List:   var1616,var2,var4035,var4752,var5,var6,var9092,var3,var9093,var3490,var8,var13543,var12339,var4,var10 

 Iteration 98 :  Optimal value:  127.6 
 Optimal List:   var1616,var2,var4035,var4752,var5,var6,var9092,var3,var9093,var3490,var8,var13543,var12339,var4,var10 

 Iteration 99 :  Optimal value:  128 
 Optimal List:   var1616,var1,var4035,var4752,var5,var6,var9092,var2,var3490,var9093,var12343,var13543,var12339,var4,var5904 

 Iteration 100 :  Optimal value:  128 
 Optimal List:   var1616,var1,var4035,var4752,var5,var6,var9092,var2,var3490,var9093,var9094,var13543,var12339,var4,var5904 

 Iteration 101 :  Optimal value:  128 
 Optimal List:   var1616,var1,var4035,var4752,var5,var6,var9092,var2,var3490,var9093,var12343,var13543,var12339,var4,var5904 

 Iteration 102 :  Optimal value:  128 
 Optimal List:   var1616,var1,var4035,var4752,var5,var6,var9092,var2,var3490,var9093,var9094,var13543,var12339,var4,var5904 

 Iteration 103 :  Optimal value:  128 
 Optimal List:   var1616,var1,var4035,var4752,var5,var6,var9092,var2,var3490,var9093,var8,var13543,var12339,var4,var5904 

 Iteration 104 :  Optimal value:  128 
 Optimal List:   var1,var1616,var4035,var4752,var5,var6,var9092,var2,var3490,var9093,var12343,var13543,var12339,var4,var5904 

 Iteration 105 :  Optimal value:  127.6 
 Optimal List:   var1,var1616,var4035,var3,var5,var4752,var9092,var2,var9093,var3490,var8,var9,var12339,var12343,var10 

 Iteration 106 :  Optimal value:  127.6 
 Optimal List:   var1,var1616,var4035,var3,var5,var4752,var9092,var2,var9093,var3490,var8,var9,var12339,var12343,var10 

 Iteration 107 :  Optimal value:  127.6 
 Optimal List:   var1,var1616,var4035,var3,var5,var4752,var9092,var2,var9093,var3490,var8,var9,var12339,var12343,var10 

 Iteration 108 :  Optimal value:  127.6 
 Optimal List:   var1,var1616,var4035,var3,var5,var4752,var9092,var2,var9093,var3490,var8,var9,var12339,var12343,var10 

 Iteration 109 :  Optimal value:  127.6 
 Optimal List:   var1,var1616,var4035,var3,var5,var4752,var9092,var2,var9093,var3490,var8,var9,var12339,var12343,var10 

 Iteration 110 :  Optimal value:  127.6 
 Optimal List:   var1,var1616,var4035,var3,var5,var4752,var9092,var2,var9093,var3490,var8,var9,var12339,var12343,var10 

 Iteration 111 :  Optimal value:  127.6 
 Optimal List:   var1,var1616,var4035,var3,var5,var4752,var9092,var2,var9093,var3490,var8,var9,var12339,var12343,var10 

 Iteration 112 :  Optimal value:  127.6 
 Optimal List:   var1,var1616,var4035,var4752,var5,var6,var9092,var2,var3490,var9093,var12343,var13543,var12339,var4,var10 

 Iteration 113 :  Optimal value:  127.6 
 Optimal List:   var1,var1616,var4035,var3,var5,var4752,var9092,var2,var9093,var3490,var8,var9,var12339,var12343,var10 

 Iteration 114 :  Optimal value:  127.6 
 Optimal List:   var1,var1616,var4035,var4752,var5,var6,var9092,var2,var3490,var9093,var12343,var13543,var12339,var4,var10 

 Iteration 115 :  Optimal value:  127.6 
 Optimal List:   var1,var1616,var4035,var3,var5,var4752,var9092,var2,var3490,var9093,var8,var13543,var12339,var4,var10 

 Iteration 116 :  Optimal value:  127.6 
 Optimal List:   var1616,var1,var4035,var3,var5,var4752,var9092,var2,var9093,var3490,var10,var13543,var12339,var12343,var8 

 Iteration 117 :  Optimal value:  127.6 
 Optimal List:   var1,var1616,var4035,var3,var5,var4752,var9092,var6,var9093,var3490,var8,var9,var12339,var12343,var2 

 Iteration 118 :  Optimal value:  127.6 
 Optimal List:   var1616,var1,var4035,var3,var5,var4752,var9092,var2,var9093,var3490,var8,var13543,var12339,var12343,var10 

 Iteration 119 :  Optimal value:  127.6 
 Optimal List:   var1616,var1,var4035,var3,var5,var4752,var9092,var2,var9093,var3490,var8,var13543,var12339,var12343,var10 

 Iteration 120 :  Optimal value:  127.6 
 Optimal List:   var1616,var1,var4035,var3,var5,var4752,var9092,var2,var9093,var3490,var8,var13543,var12339,var12343,var10 

 Iteration 121 :  Optimal value:  127.6 
 Optimal List:   var1,var1616,var4035,var3,var5,var4752,var9092,var2,var3490,var9093,var8,var9,var12339,var12343,var10 

 Iteration 122 :  Optimal value:  127.6 
 Optimal List:   var1,var1616,var4035,var3,var5,var4752,var9092,var2,var3490,var9093,var8,var9,var12339,var12343,var10 

 Iteration 123 :  Optimal value:  127.6 
 Optimal List:   var1,var1616,var4035,var3,var5,var4752,var9092,var2,var3490,var9093,var8,var9,var12339,var12343,var10 

 Iteration 124 :  Optimal value:  127.6 
 Optimal List:   var1,var1616,var4035,var3,var5,var4752,var9092,var2,var3490,var9093,var8,var9,var12339,var12343,var10 

 Iteration 125 :  Optimal value:  127.6 
 Optimal List:   var1,var1616,var4035,var3,var5,var4752,var9092,var2,var9093,var3490,var12343,var13543,var12339,var8,var10 

 Iteration 126 :  Optimal value:  127.6 
 Optimal List:   var1,var1616,var4035,var3,var5,var4752,var9092,var2,var10196,var9093,var8,var9,var12339,var12343,var10 

 Iteration 127 :  Optimal value:  127.6 
 Optimal List:   var1,var1616,var4035,var3,var5,var4752,var9092,var2,var9093,var3490,var8,var13543,var12339,var4,var10 

 Iteration 128 :  Optimal value:  127.6 
 Optimal List:   var1616,var1,var4035,var3,var5,var4752,var9092,var2,var3490,var9093,var8,var13543,var12339,var12343,var10 

 Iteration 129 :  Optimal value:  127.6 
 Optimal List:   var1616,var1,var4035,var3,var5,var4752,var9092,var2,var9093,var3490,var8,var13543,var12339,var12343,var10 

 Iteration 130 :  Optimal value:  127.6 
 Optimal List:   var1616,var1,var4035,var3,var5,var4752,var9092,var2,var3490,var9093,var8,var13543,var12339,var12343,var10 

 Iteration 131 :  Optimal value:  127.6 
 Optimal List:   var1,var1616,var4035,var3,var5,var4752,var9092,var2,var8,var9093,var4,var13543,var12339,var12343,var10 

 Iteration 132 :  Optimal value:  127.6 
 Optimal List:   var1616,var1,var4035,var3,var5,var4752,var9092,var2,var3490,var9093,var8,var13543,var12339,var12343,var10 

 Iteration 133 :  Optimal value:  127.6 
 Optimal List:   var1,var1616,var4035,var3,var5,var4752,var9092,var2,var8,var9093,var4,var13543,var12339,var12343,var10 

 Iteration 134 :  Optimal value:  127.6 
 Optimal List:   var1,var1616,var4035,var3,var5,var4752,var9092,var2,var8,var9093,var4,var13543,var12339,var12343,var10 
[1] "test acc rank aggreg GA:0.87"
[1] "test AUC acc rank aggreg GA:0.865699873896595"
[1] "10 fold train rank aggreg res GA93.0769230769231"
[1] "confusion matrix train 10 fold rank aggreg GA"
            nci_y
pred10foldRA  1  2
           1 47  1
           2  3 79
[1] "Num itr RA GA"
[1] 135
[1] "Test BER aggreg GA is"
[1] 0.8656999
Warning messages:
1: In if (is.na(boostweight) == TRUE) { :
  the condition has length > 1 and only the first element will be used
2: In if (is.na(testm) == TRUE) { :
  the condition has length > 1 and only the first element will be used
3: In if (is.na(testclass) == TRUE) { :
  the condition has length > 1 and only the first element will be used
> 
> cma_feat_list<-colnames(trainm)
> 
> save(CMAres,file="CMAres.Rda")
> write.table(cma_feat_list,file="selected_cma_feat_list.txt",sep="t",row.names=FALSE)
> 
> # modtraindata=modtrain, modtestdata=modtest, blindtest=testacc, modtrainclass=nci_y, modtestclass=test_y
> #if(FALSE)
> {
+ trainm<-CMAres$modtraindata
+ testm<-CMAres$modtestdata
+ trainclass<-CMAres$modtrainclass
+ testclass<-CMAres$modtestclass
+ learningsets<-CMAres$learningsets
+ }
> 
> if(FALSE)
+ {
+ trainclass<-trainm[,1] #CMAres$modtrainclass
+ testclass<-testm[,1] #CMAres$modtestclass
+ trainm<-trainm[,-c(1)] #CMAres$modtrainmata
+ testm<-testm[,-c(1)] #CMAres$modtestmata
+ 
+ }
> 
> d_dim<-dim(trainm)
> 
> print("Original dimension")
[1] "Original dimension"
> print(d_dim)
[1] 130  40
> 
> #2 call run_pso function()
> system.time(psores<-run_pso(outloc=outloc,trainm,trainclass,testm,testclass,transition_matrix,c1=2.05,
+ c2=2.05,
+ itr=10,
+ globalpso_maxitr=10,
+ global_max_itr=3,
+ num_part=20,
+ kname="radial",
+ errortype="BER",
+ weightA<-as.numeric(args[1]),
+ weightB<-as.numeric(args[2]),
+ weightC<-as.numeric(args[3]),
+ weightD<-as.numeric(args[4]),
+ featweight.max=0.01,
+ featweight.min=0.01,
+ numfolds=10,
+ followerprob=as.numeric(args[6]),
+ confusionprob=as.numeric(args[7]),
+ leaderprob=as.numeric(args[8]),
+ wmax=1,
+ wmin=1,
+ behavior_reset_itr=5,
+ maxitrreset=10,
+ num_neighbors=3,
+ minselect.pct=0.5,
+ evalMode="CV2",
+ minfitnessthresh=50,
+ maxnum=as.numeric(args[10]),minnum=3,inertia_method=args[5],particlebehav_method="randbased",constriction_factor=1,
+ select.global.best=TRUE,numnodes=4,evalFunc=eval_fit_kfold_diff,itr.terminate=FALSE,train.pct=as.numeric(args[11]),min.iter.select=1))
[1] "c1: 2.05"
[1] "c2: 2.05"
[1] "itr: 10"
[1] "globalpso_maxitr: 10"
[1] "global_max_itr: 3"
[1] "num_part: 20"
[1] "kname: radial"
[1] "errortype: BER"
[1] "weightA: 0.7"
[1] "weightB: 0"
[1] "weightC: 0.05"
[1] "weightD: 0.25"
[1] "featweight.max: 0.01"
[1] "featweight.min: 0.01"
[1] "numfolds: 10"
[1] "followerprob: 0.45"
[1] "confusionprob: 0.2"
[1] "leaderprob: 0.25"
[1] "wmax: 1"
[1] "wmin: 1"
[1] "behavior_reset_itr: 5"
[1] "maxitrreset: 10"
[1] "num_neighbors: 3"
[1] "minselect.pct: 0.5"
[1] "minfitnessthresh: 50"
[1] "maxnum: 15"
[1] "minnum: 3"
[1] "inertia_method: global"
[1] "particlebehav_method: randbased"
[1] "constriction_factor: 1"
[1] "select.global.best: TRUE"
[1] "train 10 fold"
[1] 96.15385
[1] "here"
[1] "s"
[1] 104
[1] 130  40
[1] 10
[1] "learning sets: 1"
  [1] 118 110  23 129  33  31  43  24  42  78  54  30  72   6  46  16  83  29
 [19]  18 104  73  71  66  76  90  98  51  74   8 103  13  68  45  32  22  15
 [37] 109   5  17  14  12  96 126  39  95 123  70  19  36  28  82 122 101  55
 [55]  27  85 121  38  75  84 119   4   7 105  37  86 128 125  44  58 116 107
 [73]  62  88 106  61  65  69  25  40  81  93  50  10  11   3 114 100 102  63
 [91]  26   1  52  67  92  41 113  35  64  77  21 130  34   2
[1] "Starting global iteration number : 1"
[1] "iteration number: "
[1] 1
Error in checkForRemoteErrors(val) : 
  20 nodes produced errors; first error: Model is empty!
Calls: system.time ... clusterApply -> staticClusterApply -> checkForRemoteErrors
In addition: Warning messages:
1: In if (is.na(testm) == TRUE) { :
  the condition has length > 1 and only the first element will be used
2: In if (is.na(testclass) == TRUE) { :
  the condition has length > 1 and only the first element will be used
Timing stopped at: 0.117 0.11 26.976 
Execution halted
