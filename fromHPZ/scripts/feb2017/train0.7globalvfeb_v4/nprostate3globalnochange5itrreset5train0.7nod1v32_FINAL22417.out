
R version 3.2.2 (2015-08-14) -- "Fire Safety"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> #.libPaths("/home/stu/kuppal3/karan_libs/Rlibs")
> library(snow)
> library(e1071)
> library(yaImpute)

Attaching package: ‘yaImpute’

The following object is masked from ‘package:e1071’:

    impute

> library(pROC)
Type 'citation("pROC")' for a citation.

Attaching package: ‘pROC’

The following objects are masked from ‘package:stats’:

    cov, smooth, var

> library(bioDist)
Loading required package: Biobase
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘parallel’

The following objects are masked from ‘package:snow’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, clusterSplit, makeCluster, parApply,
    parCapply, parLapply, parRapply, parSapply, splitIndices,
    stopCluster


Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:snow’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parRapply, parSapply

The following objects are masked from ‘package:stats’:

    IQR, mad, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, as.vector, cbind, colnames,
    do.call, duplicated, eval, evalq, Filter, Find, get, grep, grepl,
    intersect, is.unsorted, lapply, lengths, Map, mapply, match, mget,
    order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unlist, unsplit

Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

Loading required package: KernSmooth
KernSmooth 2.23 loaded
Copyright M. P. Wand 1997-2009
> #library(CMA, lib="/home/stu/kuppal3/karan_libs/Rlibs/")
> library(RankAggreg)
> library(CMA)

Attaching package: ‘CMA’

The following object is masked from ‘package:pROC’:

    roc

The following object is masked from ‘package:e1071’:

    tune

> library(expm)
Loading required package: Matrix

Attaching package: ‘expm’

The following object is masked from ‘package:Matrix’:

    expm

> 
> cl<-makeCluster(1)
> 
> 
> args<-commandArgs(trailingOnly=TRUE)
> #sname<-paste("/home/stu/kuppal3/Research/Feature_selection/Rcode/version2016/OCFS_",args[9],".R",sep="")
> #sname<-paste("/Users/karanuppal/Documents/Gatech/Projects/Algorithms/TwostagePSO/version2016/OCFS_",args[9],".R",sep="")
> 
> sname<-paste("/home/kuppal2/Documents/Projects/xmsPANDA/Other/scripts/OCFS_",args[9],".R",sep="")
> source(sname)
> print(sname)
[1] "/home/kuppal2/Documents/Projects/xmsPANDA/Other/scripts/OCFS_vfeb817_v4.R"
> 
> #data_loc<-"/home/stu/kuppal3/Research/Feature_selection/Datasets/Prostate/" 
> #data_loc<-"/Users/karanuppal/Documents/Gatech/Projects/Algorithms/TwostagePSO/Datasets/Prostate/"
> 
> data_loc<-"/home/kuppal2/Documents/Projects/xmsPANDA/Other/Datasets/Prostate/"
> 
> setwd(data_loc)
> #load("/home/stu/kuppal3/Research/Feature_selection/Datasets/MAQCII_BreastCancer/MaqcIIbr.Rda")
> 
> 
> #outloc<-paste(data_loc,"OCFSv062016_v32_Prostate_sensitivity_itr",args[9],"/",sep="")
> 
> outloc<-paste(data_loc,"OCFS_prostate",args[9],"_",args[10],"_",args[11],"/",sep="")
> 
> load("Prostate.Rda")
> 
> dir.create(outloc)
Warning message:
In dir.create(outloc) :
  '/home/kuppal2/Documents/Projects/xmsPANDA/Other/Datasets/Prostate/OCFS_prostatevfeb817_v4_3_0.7' already exists
> setwd(outloc)
> 
> 
> 
> trainm<-Prostate$X
> testm<-Prostate$Xt
> trainclass<-Prostate$Y
> testclass<-Prostate$Yt
> 
> cnames<-paste("var",seq(1,dim(trainm)[2]),sep="")
> colnames(trainm)<-cnames
> colnames(testm)<-cnames
> 
> trainm<-t(trainm)
> testm<-t(testm)
> 
> args<-commandArgs(trailingOnly=TRUE)
> 
> 
> trainm<-t(trainm)
> testm<-t(testm)
> 
> trainm<-cbind(trainclass,trainm)
> testm<-cbind(testclass,testm)
Warning message:
In .Method(..., deparse.level = deparse.level) :
  number of rows of result is not a multiple of vector length (arg 1)
> 
> trainm<-na.omit(trainm)
> testm<-na.omit(testm)
> 
> 
> 
> 
> 
> #OCFSvmay2415v2reg_itr1_LassoRFELIMMAELpres1backwsel_l0.25f0.45c0.25_top10pctmaxitrs100minselmedianrandbehavfeatw0.01_CV2accA100B1wrand6methodsmax100wrand/"
> 
> dir.create(outloc)
Warning message:
In dir.create(outloc) :
  '/home/kuppal2/Documents/Projects/xmsPANDA/Other/Datasets/Prostate/OCFS_prostatevfeb817_v4_3_0.7' already exists
> setwd(outloc)
> 
> trainm<-as.matrix(trainm)
> testm<-as.matrix(testm)
> trainclass<-trainm[,1] #CMAres$modtrainclass
> testclass<-testm[,1] #CMAres$modtestclass
> trainm<-trainm[,-c(1)] #CMAres$modtrainmata
> testm<-testm[,-c(1)] #CMAres$modtestmata
> 
> #a: Confusions
> #b: Neighbors
> #c: Global
> #d: Death
> 
> a<-c(0.25,0.25,0.25,0.25)
> b<-c(0.3,0.1,0.4,0.1)
> c<-c(0.25,0.25,0.5,0)
> d<-c(0.9,0.1,0,0.1)
> 
> a<-c(0,0.4,0.1,0.5)
> b<-c(0.3,0.1,0.4,0.1)
> c<-c(0,0.5,0.5,0)
> d<-c(0.9,0.1,0,0)
> 
> a<-c(0,0.4,0.1,0.5)
> b<-c(0.2,0.3,0.4,0.1)
> c<-c(0,0.4,0.4,0.2)
> d<-c(0.9,0.1,0,0)
> 
> transition_matrix<-rbind(a,b,c,d)
> 
> 
> dir.create(outloc)
Warning message:
In dir.create(outloc) :
  '/home/kuppal2/Documents/Projects/xmsPANDA/Other/Datasets/Prostate/OCFS_prostatevfeb817_v4_3_0.7' already exists
> setwd(outloc)
> temp2=t(trainm)
> temp2=apply(temp2, 2, function(x){which(x=="MD")})
> temp2=unlist(temp2)
> temp2=unique(temp2)
> if(length(temp2)>1)
+ {
+ 	trainm=trainm[,-c(temp2)]
+ 
+ 	rm(temp2)
+ }
> 
> boostweight=rep(0,dim(trainm)[2])
> 
> CMAres<-performCMA(trainm, trainclass, testm, testclass,outloc,
+ maxnum=as.numeric(args[10]),
+ minnum=3,
+ stepitr=1,
+ gsmethods=c("limma"), #"lasso","elasticnet","kruskal.test"), #"f.test", "f.test", "elasticnet", "wilcox.test", "welch.test"),
+ pct_train=0.40,
+ accuracyweight=1,
+ featweight=0.06,
+ minpresent=1,
+ kname="radial",
+ norm_method="none",
+ tolerance=0.1,
+ maxitrs=5,
+ classindex=1,
+ numfacts=0,
+ evalmethod="CV",
+ numfolds=10,
+ CVfoldthresh=0.7,
+ varselmethod="none",
+ scheme_val="one-vs-all",
+ iter_learn=1,boostweight=rep(0,dim(trainm)[2]))
[1] "dim of trainm is "
[1]   61 6033
[1]   61 6033
[1] "length of factcols"
[1] 0
[1]   61 6033
[1]   41 6033
integer(0)
character(0)
NULL
[1] "ok"
[1] "test class"
[1] 1 1 1 1
Levels: 1 2
[1] "orig train matrix"
           var1       var2       var3       var4       var5        var6
[1,] -0.9271777 -0.7400391 -0.5320164 -1.0978915 -0.9866733  0.01875159
[2,] -0.8358990 -0.8358990 -0.5856470 -0.8358990 -0.3297677 -0.83589902
[3,]  0.2360733  0.2526450 -1.1543512 -0.3723715 -0.3388998  1.25346654
[4,] -0.7486226 -0.4391652  0.7909530 -1.0338757  0.2411153  1.21600730
[5,]  0.1012387 -0.2982854 -1.1215187 -0.9577135  0.3422581  1.18293740
           var7     var8        var9     var10
[1,] -0.8633258 3.959997 -0.39821897 -1.097891
[2,] -0.8358990 4.037788 -0.83589902 -0.835899
[3,]  0.5063251 3.868961  0.20193196 -1.154351
[4,]  0.1062824 3.976272  0.08175534 -1.121534
[5,]  0.0293250 4.575871 -0.19646622 -1.121519
[1] "orig train matrix"
           var1       var2       var3       var4       var5        var6
[1,] -0.9271777 -0.7400391 -0.5320164 -1.0978915 -0.9866733  0.01875159
[2,] -0.8358990 -0.8358990 -0.5856470 -0.8358990 -0.3297677 -0.83589902
[3,]  0.2360733  0.2526450 -1.1543512 -0.3723715 -0.3388998  1.25346654
[4,] -0.7486226 -0.4391652  0.7909530 -1.0338757  0.2411153  1.21600730
[5,]  0.1012387 -0.2982854 -1.1215187 -0.9577135  0.3422581  1.18293740
           var7     var8        var9     var10
[1,] -0.8633258 3.959997 -0.39821897 -1.097891
[2,] -0.8358990 4.037788 -0.83589902 -0.835899
[3,]  0.5063251 3.868961  0.20193196 -1.154351
[4,]  0.1062824 3.976272  0.08175534 -1.121534
[5,]  0.0293250 4.575871 -0.19646622 -1.121519
[1] -0.5320164 -0.5856470 -1.1543512
[1] "norm train matrix"
           var1       var2       var3       var4       var5        var6
[1,] -0.9271777 -0.7400391 -0.5320164 -1.0978915 -0.9866733  0.01875159
[2,] -0.8358990 -0.8358990 -0.5856470 -0.8358990 -0.3297677 -0.83589902
[3,]  0.2360733  0.2526450 -1.1543512 -0.3723715 -0.3388998  1.25346654
[4,] -0.7486226 -0.4391652  0.7909530 -1.0338757  0.2411153  1.21600730
[5,]  0.1012387 -0.2982854 -1.1215187 -0.9577135  0.3422581  1.18293740
           var7     var8        var9     var10
[1,] -0.8633258 3.959997 -0.39821897 -1.097891
[2,] -0.8358990 4.037788 -0.83589902 -0.835899
[3,]  0.5063251 3.868961  0.20193196 -1.154351
[4,]  0.1062824 3.976272  0.08175534 -1.121534
[5,]  0.0293250 4.575871 -0.19646622 -1.121519
[1] "mean of feat 2"
[1] -0.6215651
[1] "sd of feat 2"
[1] 0.4198486
[1] "maxnum is "
[1] 3
[1] "# of genes left after filtering:"
[1]   61 6033
GeneSelection: iteration 1 

Attaching package: ‘limma’

The following object is masked from ‘package:BiocGenerics’:

    plotMA

GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
[1] "varselmethod"
[1] "none"
[1] "dim of scoring matrix is "
[1] 6033    1
[1] 6033
[1] "DS index stage 1"
[1] NA
[1] "bestgenelist"
[1] 1839 2619 4155
         var1839   var2619    var4155
[1,] -0.06663936 0.6272297  0.3605717
[2,] -0.12821383 1.2275524  0.6992379
[3,] -1.15435124 0.8523566 -1.1543512
        var1839    var2619   var4155
[1,] -0.6617976 -0.1454227 0.5349203
[2,]  2.3738926  1.4795100 2.4922452
[3,]  1.4243602 -0.6180501 1.0613480
[1] "numgenes selected:3"
[1] "test acc:0.634146341463415"
[1] "test AUC acc:0.721212121212121"
[1] "10 fold train93.4426229508197"
[1] "confusion matrix train 10 fold"
          nci_y
pred10fold  1  2
         1 29  3
         2  1 28
[1] "confusion matrix test"
         test_y
pred_test  1  2
        1 16  1
        2 14 10
[1] "train acc:0.934426229508197"
[1] "confusion matrix train"
          nci_y
pred_train  1  2
         1 29  3
         2  1 28
[1] "DS index stage 1"
[1] NA
[1] "KI index stage 1"
[1] NA
Warning messages:
1: In if (is.na(boostweight) == TRUE) { :
  the condition has length > 1 and only the first element will be used
2: In if (is.na(testm) == TRUE) { :
  the condition has length > 1 and only the first element will be used
3: In if (is.na(testclass) == TRUE) { :
  the condition has length > 1 and only the first element will be used
4: In mean.default(DS_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
5: In mean.default(DS_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
6: In mean.default(KI_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
> 
> 
> CMAres<-performCMA(trainm, trainclass, testm, testclass,outloc,
+ maxnum=as.numeric(args[10]),
+ minnum=3,
+ stepitr=1,
+ gsmethods=c("lasso"), #"lasso","elasticnet","kruskal.test"), #"f.test", "f.test", "elasticnet", "wilcox.test", "welch.test"),
+ pct_train=0.40,
+ accuracyweight=1,
+ featweight=0.06,
+ minpresent=1,
+ kname="radial",
+ norm_method="none",
+ tolerance=0.1,
+ maxitrs=5,
+ classindex=1,
+ numfacts=0,
+ evalmethod="CV",
+ numfolds=10,
+ CVfoldthresh=0.7,
+ varselmethod="none",
+ scheme_val="one-vs-all",
+ iter_learn=1,boostweight=rep(0,dim(trainm)[2]))
[1] "dim of trainm is "
[1]   61 6033
[1]   61 6033
[1] "length of factcols"
[1] 0
[1]   61 6033
[1]   41 6033
integer(0)
character(0)
NULL
[1] "ok"
[1] "test class"
[1] 1 1 1 1
Levels: 1 2
[1] "orig train matrix"
           var1       var2       var3       var4       var5        var6
[1,] -0.9271777 -0.7400391 -0.5320164 -1.0978915 -0.9866733  0.01875159
[2,] -0.8358990 -0.8358990 -0.5856470 -0.8358990 -0.3297677 -0.83589902
[3,]  0.2360733  0.2526450 -1.1543512 -0.3723715 -0.3388998  1.25346654
[4,] -0.7486226 -0.4391652  0.7909530 -1.0338757  0.2411153  1.21600730
[5,]  0.1012387 -0.2982854 -1.1215187 -0.9577135  0.3422581  1.18293740
           var7     var8        var9     var10
[1,] -0.8633258 3.959997 -0.39821897 -1.097891
[2,] -0.8358990 4.037788 -0.83589902 -0.835899
[3,]  0.5063251 3.868961  0.20193196 -1.154351
[4,]  0.1062824 3.976272  0.08175534 -1.121534
[5,]  0.0293250 4.575871 -0.19646622 -1.121519
[1] "orig train matrix"
           var1       var2       var3       var4       var5        var6
[1,] -0.9271777 -0.7400391 -0.5320164 -1.0978915 -0.9866733  0.01875159
[2,] -0.8358990 -0.8358990 -0.5856470 -0.8358990 -0.3297677 -0.83589902
[3,]  0.2360733  0.2526450 -1.1543512 -0.3723715 -0.3388998  1.25346654
[4,] -0.7486226 -0.4391652  0.7909530 -1.0338757  0.2411153  1.21600730
[5,]  0.1012387 -0.2982854 -1.1215187 -0.9577135  0.3422581  1.18293740
           var7     var8        var9     var10
[1,] -0.8633258 3.959997 -0.39821897 -1.097891
[2,] -0.8358990 4.037788 -0.83589902 -0.835899
[3,]  0.5063251 3.868961  0.20193196 -1.154351
[4,]  0.1062824 3.976272  0.08175534 -1.121534
[5,]  0.0293250 4.575871 -0.19646622 -1.121519
[1] -0.5320164 -0.5856470 -1.1543512
[1] "norm train matrix"
           var1       var2       var3       var4       var5        var6
[1,] -0.9271777 -0.7400391 -0.5320164 -1.0978915 -0.9866733  0.01875159
[2,] -0.8358990 -0.8358990 -0.5856470 -0.8358990 -0.3297677 -0.83589902
[3,]  0.2360733  0.2526450 -1.1543512 -0.3723715 -0.3388998  1.25346654
[4,] -0.7486226 -0.4391652  0.7909530 -1.0338757  0.2411153  1.21600730
[5,]  0.1012387 -0.2982854 -1.1215187 -0.9577135  0.3422581  1.18293740
           var7     var8        var9     var10
[1,] -0.8633258 3.959997 -0.39821897 -1.097891
[2,] -0.8358990 4.037788 -0.83589902 -0.835899
[3,]  0.5063251 3.868961  0.20193196 -1.154351
[4,]  0.1062824 3.976272  0.08175534 -1.121534
[5,]  0.0293250 4.575871 -0.19646622 -1.121519
[1] "mean of feat 2"
[1] -0.6215651
[1] "sd of feat 2"
[1] 0.4198486
[1] "maxnum is "
[1] 3
[1] "# of genes left after filtering:"
[1]   61 6033
GeneSelection: iteration 1 
Loaded glmnet 2.0-5


Attaching package: ‘glmnet’

The following object is masked from ‘package:pROC’:

    auc

GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
genelist
1839 2619 5016    1 2115 4266 
  20   20   14    2    2    2 
[1] "varselmethod"
[1] "none"
[1] "dim of scoring matrix is "
[1] 6033    1
[1] 6033
[1] "DS index stage 1"
[1] NA
[1] "bestgenelist"
[1] 1839 2619 5016
         var1839   var2619   var5016
[1,] -0.06663936 0.6272297 0.5010076
[2,] -0.12821383 1.2275524 1.6606626
[3,] -1.15435124 0.8523566 0.3005128
        var1839    var2619    var5016
[1,] -0.6617976 -0.1454227  1.1926986
[2,]  2.3738926  1.4795100 -0.9011489
[3,]  1.4243602 -0.6180501  1.1862983
[1] "numgenes selected:3"
[1] "test acc:0.707317073170732"
[1] "test AUC acc:0.771212121212121"
[1] "10 fold train95.0819672131148"
[1] "confusion matrix train 10 fold"
          nci_y
pred10fold  1  2
         1 30  3
         2  0 28
[1] "confusion matrix test"
         test_y
pred_test  1  2
        1 19  1
        2 11 10
[1] "train acc:0.950819672131147"
[1] "confusion matrix train"
          nci_y
pred_train  1  2
         1 30  3
         2  0 28
[1] "DS index stage 1"
[1] NA
[1] "KI index stage 1"
[1] NA
Warning messages:
1: In if (is.na(boostweight) == TRUE) { :
  the condition has length > 1 and only the first element will be used
2: In if (is.na(testm) == TRUE) { :
  the condition has length > 1 and only the first element will be used
3: In if (is.na(testclass) == TRUE) { :
  the condition has length > 1 and only the first element will be used
4: In mean.default(DS_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
5: In mean.default(DS_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
6: In mean.default(KI_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
> 
> CMAres<-performCMA(trainm, trainclass, testm, testclass,outloc,
+ maxnum=as.numeric(args[10]),
+ minnum=3,
+ stepitr=1,
+ gsmethods=c("rfe"), #"lasso","elasticnet","kruskal.test"), #"f.test", "f.test", "elasticnet", "wilcox.test", "welch.test"),
+ pct_train=0.40,
+ accuracyweight=1,
+ featweight=0.06,
+ minpresent=1,
+ kname="radial",
+ norm_method="none",
+ tolerance=0.1,
+ maxitrs=5,
+ classindex=1,
+ numfacts=0,
+ evalmethod="CV",
+ numfolds=10,
+ CVfoldthresh=0.7,
+ varselmethod="none",
+ scheme_val="one-vs-all",
+ iter_learn=1,boostweight=rep(0,dim(trainm)[2]))
[1] "dim of trainm is "
[1]   61 6033
[1]   61 6033
[1] "length of factcols"
[1] 0
[1]   61 6033
[1]   41 6033
integer(0)
character(0)
NULL
[1] "ok"
[1] "test class"
[1] 1 1 1 1
Levels: 1 2
[1] "orig train matrix"
           var1       var2       var3       var4       var5        var6
[1,] -0.9271777 -0.7400391 -0.5320164 -1.0978915 -0.9866733  0.01875159
[2,] -0.8358990 -0.8358990 -0.5856470 -0.8358990 -0.3297677 -0.83589902
[3,]  0.2360733  0.2526450 -1.1543512 -0.3723715 -0.3388998  1.25346654
[4,] -0.7486226 -0.4391652  0.7909530 -1.0338757  0.2411153  1.21600730
[5,]  0.1012387 -0.2982854 -1.1215187 -0.9577135  0.3422581  1.18293740
           var7     var8        var9     var10
[1,] -0.8633258 3.959997 -0.39821897 -1.097891
[2,] -0.8358990 4.037788 -0.83589902 -0.835899
[3,]  0.5063251 3.868961  0.20193196 -1.154351
[4,]  0.1062824 3.976272  0.08175534 -1.121534
[5,]  0.0293250 4.575871 -0.19646622 -1.121519
[1] "orig train matrix"
           var1       var2       var3       var4       var5        var6
[1,] -0.9271777 -0.7400391 -0.5320164 -1.0978915 -0.9866733  0.01875159
[2,] -0.8358990 -0.8358990 -0.5856470 -0.8358990 -0.3297677 -0.83589902
[3,]  0.2360733  0.2526450 -1.1543512 -0.3723715 -0.3388998  1.25346654
[4,] -0.7486226 -0.4391652  0.7909530 -1.0338757  0.2411153  1.21600730
[5,]  0.1012387 -0.2982854 -1.1215187 -0.9577135  0.3422581  1.18293740
           var7     var8        var9     var10
[1,] -0.8633258 3.959997 -0.39821897 -1.097891
[2,] -0.8358990 4.037788 -0.83589902 -0.835899
[3,]  0.5063251 3.868961  0.20193196 -1.154351
[4,]  0.1062824 3.976272  0.08175534 -1.121534
[5,]  0.0293250 4.575871 -0.19646622 -1.121519
[1] -0.5320164 -0.5856470 -1.1543512
[1] "norm train matrix"
           var1       var2       var3       var4       var5        var6
[1,] -0.9271777 -0.7400391 -0.5320164 -1.0978915 -0.9866733  0.01875159
[2,] -0.8358990 -0.8358990 -0.5856470 -0.8358990 -0.3297677 -0.83589902
[3,]  0.2360733  0.2526450 -1.1543512 -0.3723715 -0.3388998  1.25346654
[4,] -0.7486226 -0.4391652  0.7909530 -1.0338757  0.2411153  1.21600730
[5,]  0.1012387 -0.2982854 -1.1215187 -0.9577135  0.3422581  1.18293740
           var7     var8        var9     var10
[1,] -0.8633258 3.959997 -0.39821897 -1.097891
[2,] -0.8358990 4.037788 -0.83589902 -0.835899
[3,]  0.5063251 3.868961  0.20193196 -1.154351
[4,]  0.1062824 3.976272  0.08175534 -1.121534
[5,]  0.0293250 4.575871 -0.19646622 -1.121519
[1] "mean of feat 2"
[1] -0.6215651
[1] "sd of feat 2"
[1] 0.4198486
[1] "maxnum is "
[1] 3
[1] "# of genes left after filtering:"
[1]   61 6033
GeneSelection: iteration 1 
GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
[1] "varselmethod"
[1] "none"
[1] "dim of scoring matrix is "
[1] 6033    1
[1] 6033
[1] "DS index stage 1"
[1] NA
[1] "bestgenelist"
[1] 1839 4155 4701
         var1839    var4155   var4701
[1,] -0.06663936  0.3605717 1.2878145
[2,] -0.12821383  0.6992379 2.8076595
[3,] -1.15435124 -1.1543512 0.5765086
        var1839   var4155    var4701
[1,] -0.6617976 0.5349203  2.5952770
[2,]  2.3738926 2.4922452 -0.9011489
[3,]  1.4243602 1.0613480  2.3050832
[1] "numgenes selected:3"
[1] "test acc:0.658536585365854"
[1] "test AUC acc:0.737878787878788"
[1] "10 fold train96.7213114754098"
[1] "confusion matrix train 10 fold"
          nci_y
pred10fold  1  2
         1 30  2
         2  0 29
[1] "confusion matrix test"
         test_y
pred_test  1  2
        1 17  1
        2 13 10
[1] "train acc:0.967213114754098"
[1] "confusion matrix train"
          nci_y
pred_train  1  2
         1 30  2
         2  0 29
[1] "DS index stage 1"
[1] NA
[1] "KI index stage 1"
[1] NA
Warning messages:
1: In if (is.na(boostweight) == TRUE) { :
  the condition has length > 1 and only the first element will be used
2: In if (is.na(testm) == TRUE) { :
  the condition has length > 1 and only the first element will be used
3: In if (is.na(testclass) == TRUE) { :
  the condition has length > 1 and only the first element will be used
4: In mean.default(DS_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
5: In mean.default(DS_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
6: In mean.default(KI_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
> 
> CMAres<-performCMA(trainm, trainclass, testm, testclass,outloc,
+ maxnum=as.numeric(args[10]),
+ minnum=3,
+ stepitr=1,
+ gsmethods=c("elasticnet"), #"lasso","elasticnet","kruskal.test"), #"f.test", "f.test", "elasticnet", "wilcox.test", "welch.test"),
+ pct_train=0.40,
+ accuracyweight=1,
+ featweight=0.06,
+ minpresent=1,
+ kname="radial",
+ norm_method="none",
+ tolerance=0.1,
+ maxitrs=5,
+ classindex=1,
+ numfacts=0,
+ evalmethod="CV",
+ numfolds=10,
+ CVfoldthresh=0.7,
+ varselmethod="none",
+ scheme_val="one-vs-all",
+ iter_learn=1,boostweight=rep(0,dim(trainm)[2]))
[1] "dim of trainm is "
[1]   61 6033
[1]   61 6033
[1] "length of factcols"
[1] 0
[1]   61 6033
[1]   41 6033
integer(0)
character(0)
NULL
[1] "ok"
[1] "test class"
[1] 1 1 1 1
Levels: 1 2
[1] "orig train matrix"
           var1       var2       var3       var4       var5        var6
[1,] -0.9271777 -0.7400391 -0.5320164 -1.0978915 -0.9866733  0.01875159
[2,] -0.8358990 -0.8358990 -0.5856470 -0.8358990 -0.3297677 -0.83589902
[3,]  0.2360733  0.2526450 -1.1543512 -0.3723715 -0.3388998  1.25346654
[4,] -0.7486226 -0.4391652  0.7909530 -1.0338757  0.2411153  1.21600730
[5,]  0.1012387 -0.2982854 -1.1215187 -0.9577135  0.3422581  1.18293740
           var7     var8        var9     var10
[1,] -0.8633258 3.959997 -0.39821897 -1.097891
[2,] -0.8358990 4.037788 -0.83589902 -0.835899
[3,]  0.5063251 3.868961  0.20193196 -1.154351
[4,]  0.1062824 3.976272  0.08175534 -1.121534
[5,]  0.0293250 4.575871 -0.19646622 -1.121519
[1] "orig train matrix"
           var1       var2       var3       var4       var5        var6
[1,] -0.9271777 -0.7400391 -0.5320164 -1.0978915 -0.9866733  0.01875159
[2,] -0.8358990 -0.8358990 -0.5856470 -0.8358990 -0.3297677 -0.83589902
[3,]  0.2360733  0.2526450 -1.1543512 -0.3723715 -0.3388998  1.25346654
[4,] -0.7486226 -0.4391652  0.7909530 -1.0338757  0.2411153  1.21600730
[5,]  0.1012387 -0.2982854 -1.1215187 -0.9577135  0.3422581  1.18293740
           var7     var8        var9     var10
[1,] -0.8633258 3.959997 -0.39821897 -1.097891
[2,] -0.8358990 4.037788 -0.83589902 -0.835899
[3,]  0.5063251 3.868961  0.20193196 -1.154351
[4,]  0.1062824 3.976272  0.08175534 -1.121534
[5,]  0.0293250 4.575871 -0.19646622 -1.121519
[1] -0.5320164 -0.5856470 -1.1543512
[1] "norm train matrix"
           var1       var2       var3       var4       var5        var6
[1,] -0.9271777 -0.7400391 -0.5320164 -1.0978915 -0.9866733  0.01875159
[2,] -0.8358990 -0.8358990 -0.5856470 -0.8358990 -0.3297677 -0.83589902
[3,]  0.2360733  0.2526450 -1.1543512 -0.3723715 -0.3388998  1.25346654
[4,] -0.7486226 -0.4391652  0.7909530 -1.0338757  0.2411153  1.21600730
[5,]  0.1012387 -0.2982854 -1.1215187 -0.9577135  0.3422581  1.18293740
           var7     var8        var9     var10
[1,] -0.8633258 3.959997 -0.39821897 -1.097891
[2,] -0.8358990 4.037788 -0.83589902 -0.835899
[3,]  0.5063251 3.868961  0.20193196 -1.154351
[4,]  0.1062824 3.976272  0.08175534 -1.121534
[5,]  0.0293250 4.575871 -0.19646622 -1.121519
[1] "mean of feat 2"
[1] -0.6215651
[1] "sd of feat 2"
[1] 0.4198486
[1] "maxnum is "
[1] 3
[1] "# of genes left after filtering:"
[1]   61 6033
GeneSelection: iteration 1 
GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
[1] "varselmethod"
[1] "none"
[1] "dim of scoring matrix is "
[1] 6033    1
[1] 6033
[1] "DS index stage 1"
[1] NA
[1] "bestgenelist"
[1]    1 1839 2619
           var1     var1839   var2619
[1,] -0.9271777 -0.06663936 0.6272297
[2,] -0.8358990 -0.12821383 1.2275524
[3,]  0.2360733 -1.15435124 0.8523566
           var1    var1839    var2619
[1,] -0.9193153 -0.6617976 -0.1454227
[2,] -0.9011489  2.3738926  1.4795100
[3,] -0.8734031  1.4243602 -0.6180501
[1] "numgenes selected:3"
[1] "test acc:0.707317073170732"
[1] "test AUC acc:0.771212121212121"
[1] "10 fold train95.0819672131148"
[1] "confusion matrix train 10 fold"
          nci_y
pred10fold  1  2
         1 30  1
         2  0 30
[1] "confusion matrix test"
         test_y
pred_test  1  2
        1 19  1
        2 11 10
[1] "train acc:0.983606557377049"
[1] "confusion matrix train"
          nci_y
pred_train  1  2
         1 30  1
         2  0 30
[1] "DS index stage 1"
[1] NA
[1] "KI index stage 1"
[1] NA
Warning messages:
1: In if (is.na(boostweight) == TRUE) { :
  the condition has length > 1 and only the first element will be used
2: In if (is.na(testm) == TRUE) { :
  the condition has length > 1 and only the first element will be used
3: In if (is.na(testclass) == TRUE) { :
  the condition has length > 1 and only the first element will be used
4: In mean.default(DS_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
5: In mean.default(DS_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
6: In mean.default(KI_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
> 
> if(FALSE){
+ CMAres<-performCMA(trainm, trainclass, testm, testclass,outloc,
+ maxnum=as.numeric(args[10]),
+ minnum=3,
+ stepitr=1,
+ gsmethods=c("rf"), #"lasso","elasticnet","kruskal.test"), #"f.test", "f.test", "elasticnet", "wilcox.test", "welch.test"),
+ pct_train=0.40,
+ accuracyweight=1,
+ featweight=0.06,
+ minpresent=1,
+ kname="radial",
+ norm_method="none",
+ tolerance=0.1,
+ maxitrs=5,
+ classindex=1,
+ numfacts=0,
+ evalmethod="CV",
+ numfolds=10,
+ CVfoldthresh=0.7,
+ varselmethod="none",
+ scheme_val="one-vs-all",
+ iter_learn=1,boostweight=rep(0,dim(trainm)[2]))
+ }
> 
> CMAres<-performCMA(trainm, trainclass, testm, testclass,outloc,
+ maxnum=as.numeric(args[10]),
+ minnum=3,
+ stepitr=1,
+ gsmethods=c("f.test"), #"lasso","elasticnet","kruskal.test"), #"f.test", "f.test", "elasticnet", "wilcox.test", "welch.test"),
+ pct_train=0.40,
+ accuracyweight=1,
+ featweight=0.06,
+ minpresent=1,
+ kname="radial",
+ norm_method="none",
+ tolerance=0.1,
+ maxitrs=5,
+ classindex=1,
+ numfacts=0,
+ evalmethod="CV",
+ numfolds=10,
+ CVfoldthresh=0.7,
+ varselmethod="none",
+ scheme_val="one-vs-all",
+ iter_learn=1,boostweight=rep(0,dim(trainm)[2]))
[1] "dim of trainm is "
[1]   61 6033
[1]   61 6033
[1] "length of factcols"
[1] 0
[1]   61 6033
[1]   41 6033
integer(0)
character(0)
NULL
[1] "ok"
[1] "test class"
[1] 1 1 1 1
Levels: 1 2
[1] "orig train matrix"
           var1       var2       var3       var4       var5        var6
[1,] -0.9271777 -0.7400391 -0.5320164 -1.0978915 -0.9866733  0.01875159
[2,] -0.8358990 -0.8358990 -0.5856470 -0.8358990 -0.3297677 -0.83589902
[3,]  0.2360733  0.2526450 -1.1543512 -0.3723715 -0.3388998  1.25346654
[4,] -0.7486226 -0.4391652  0.7909530 -1.0338757  0.2411153  1.21600730
[5,]  0.1012387 -0.2982854 -1.1215187 -0.9577135  0.3422581  1.18293740
           var7     var8        var9     var10
[1,] -0.8633258 3.959997 -0.39821897 -1.097891
[2,] -0.8358990 4.037788 -0.83589902 -0.835899
[3,]  0.5063251 3.868961  0.20193196 -1.154351
[4,]  0.1062824 3.976272  0.08175534 -1.121534
[5,]  0.0293250 4.575871 -0.19646622 -1.121519
[1] "orig train matrix"
           var1       var2       var3       var4       var5        var6
[1,] -0.9271777 -0.7400391 -0.5320164 -1.0978915 -0.9866733  0.01875159
[2,] -0.8358990 -0.8358990 -0.5856470 -0.8358990 -0.3297677 -0.83589902
[3,]  0.2360733  0.2526450 -1.1543512 -0.3723715 -0.3388998  1.25346654
[4,] -0.7486226 -0.4391652  0.7909530 -1.0338757  0.2411153  1.21600730
[5,]  0.1012387 -0.2982854 -1.1215187 -0.9577135  0.3422581  1.18293740
           var7     var8        var9     var10
[1,] -0.8633258 3.959997 -0.39821897 -1.097891
[2,] -0.8358990 4.037788 -0.83589902 -0.835899
[3,]  0.5063251 3.868961  0.20193196 -1.154351
[4,]  0.1062824 3.976272  0.08175534 -1.121534
[5,]  0.0293250 4.575871 -0.19646622 -1.121519
[1] -0.5320164 -0.5856470 -1.1543512
[1] "norm train matrix"
           var1       var2       var3       var4       var5        var6
[1,] -0.9271777 -0.7400391 -0.5320164 -1.0978915 -0.9866733  0.01875159
[2,] -0.8358990 -0.8358990 -0.5856470 -0.8358990 -0.3297677 -0.83589902
[3,]  0.2360733  0.2526450 -1.1543512 -0.3723715 -0.3388998  1.25346654
[4,] -0.7486226 -0.4391652  0.7909530 -1.0338757  0.2411153  1.21600730
[5,]  0.1012387 -0.2982854 -1.1215187 -0.9577135  0.3422581  1.18293740
           var7     var8        var9     var10
[1,] -0.8633258 3.959997 -0.39821897 -1.097891
[2,] -0.8358990 4.037788 -0.83589902 -0.835899
[3,]  0.5063251 3.868961  0.20193196 -1.154351
[4,]  0.1062824 3.976272  0.08175534 -1.121534
[5,]  0.0293250 4.575871 -0.19646622 -1.121519
[1] "mean of feat 2"
[1] -0.6215651
[1] "sd of feat 2"
[1] 0.4198486
[1] "maxnum is "
[1] 3
[1] "# of genes left after filtering:"
[1]   61 6033
GeneSelection: iteration 1 
GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
[1] "varselmethod"
[1] "none"
[1] "dim of scoring matrix is "
[1] 6033    1
[1] 6033
[1] "DS index stage 1"
[1] NA
[1] "bestgenelist"
[1] 1839 2619 4155
         var1839   var2619    var4155
[1,] -0.06663936 0.6272297  0.3605717
[2,] -0.12821383 1.2275524  0.6992379
[3,] -1.15435124 0.8523566 -1.1543512
        var1839    var2619   var4155
[1,] -0.6617976 -0.1454227 0.5349203
[2,]  2.3738926  1.4795100 2.4922452
[3,]  1.4243602 -0.6180501 1.0613480
[1] "numgenes selected:3"
[1] "test acc:0.634146341463415"
[1] "test AUC acc:0.721212121212121"
[1] "10 fold train93.4426229508197"
[1] "confusion matrix train 10 fold"
          nci_y
pred10fold  1  2
         1 29  3
         2  1 28
[1] "confusion matrix test"
         test_y
pred_test  1  2
        1 16  1
        2 14 10
[1] "train acc:0.934426229508197"
[1] "confusion matrix train"
          nci_y
pred_train  1  2
         1 29  3
         2  1 28
[1] "DS index stage 1"
[1] NA
[1] "KI index stage 1"
[1] NA
Warning messages:
1: In if (is.na(boostweight) == TRUE) { :
  the condition has length > 1 and only the first element will be used
2: In if (is.na(testm) == TRUE) { :
  the condition has length > 1 and only the first element will be used
3: In if (is.na(testclass) == TRUE) { :
  the condition has length > 1 and only the first element will be used
4: In mean.default(DS_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
5: In mean.default(DS_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
6: In mean.default(KI_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
> 
> #1
> CMAres<-performCMA(trainm, trainclass, testm, testclass,outloc,
+ maxnum=as.numeric(args[10]),
+ minnum=3,
+ stepitr=1,
+ gsmethods=c("limma","lasso","rfe","elasticnet", "f.test"), #"lasso","elasticnet","kruskal.test"), #"f.test", "f.test", "elasticnet", "wilcox.test", "welch.test"),
+ pct_train=0.40,
+ accuracyweight=1,
+ featweight=0.06,
+ minpresent=1,
+ kname="radial",
+ norm_method="none",
+ tolerance=0.1,
+ maxitrs=5,
+ classindex=1,
+ numfacts=0,
+ evalmethod="CV",
+ numfolds=10,
+ CVfoldthresh=0.7,
+ varselmethod="none",
+ scheme_val="one-vs-all",
+ iter_learn=1,boostweight=rep(0,dim(trainm)[2]))
[1] "dim of trainm is "
[1]   61 6033
[1]   61 6033
[1] "length of factcols"
[1] 0
[1]   61 6033
[1]   41 6033
integer(0)
character(0)
NULL
[1] "ok"
[1] "test class"
[1] 1 1 1 1
Levels: 1 2
[1] "orig train matrix"
           var1       var2       var3       var4       var5        var6
[1,] -0.9271777 -0.7400391 -0.5320164 -1.0978915 -0.9866733  0.01875159
[2,] -0.8358990 -0.8358990 -0.5856470 -0.8358990 -0.3297677 -0.83589902
[3,]  0.2360733  0.2526450 -1.1543512 -0.3723715 -0.3388998  1.25346654
[4,] -0.7486226 -0.4391652  0.7909530 -1.0338757  0.2411153  1.21600730
[5,]  0.1012387 -0.2982854 -1.1215187 -0.9577135  0.3422581  1.18293740
           var7     var8        var9     var10
[1,] -0.8633258 3.959997 -0.39821897 -1.097891
[2,] -0.8358990 4.037788 -0.83589902 -0.835899
[3,]  0.5063251 3.868961  0.20193196 -1.154351
[4,]  0.1062824 3.976272  0.08175534 -1.121534
[5,]  0.0293250 4.575871 -0.19646622 -1.121519
[1] "orig train matrix"
           var1       var2       var3       var4       var5        var6
[1,] -0.9271777 -0.7400391 -0.5320164 -1.0978915 -0.9866733  0.01875159
[2,] -0.8358990 -0.8358990 -0.5856470 -0.8358990 -0.3297677 -0.83589902
[3,]  0.2360733  0.2526450 -1.1543512 -0.3723715 -0.3388998  1.25346654
[4,] -0.7486226 -0.4391652  0.7909530 -1.0338757  0.2411153  1.21600730
[5,]  0.1012387 -0.2982854 -1.1215187 -0.9577135  0.3422581  1.18293740
           var7     var8        var9     var10
[1,] -0.8633258 3.959997 -0.39821897 -1.097891
[2,] -0.8358990 4.037788 -0.83589902 -0.835899
[3,]  0.5063251 3.868961  0.20193196 -1.154351
[4,]  0.1062824 3.976272  0.08175534 -1.121534
[5,]  0.0293250 4.575871 -0.19646622 -1.121519
[1] -0.5320164 -0.5856470 -1.1543512
[1] "norm train matrix"
           var1       var2       var3       var4       var5        var6
[1,] -0.9271777 -0.7400391 -0.5320164 -1.0978915 -0.9866733  0.01875159
[2,] -0.8358990 -0.8358990 -0.5856470 -0.8358990 -0.3297677 -0.83589902
[3,]  0.2360733  0.2526450 -1.1543512 -0.3723715 -0.3388998  1.25346654
[4,] -0.7486226 -0.4391652  0.7909530 -1.0338757  0.2411153  1.21600730
[5,]  0.1012387 -0.2982854 -1.1215187 -0.9577135  0.3422581  1.18293740
           var7     var8        var9     var10
[1,] -0.8633258 3.959997 -0.39821897 -1.097891
[2,] -0.8358990 4.037788 -0.83589902 -0.835899
[3,]  0.5063251 3.868961  0.20193196 -1.154351
[4,]  0.1062824 3.976272  0.08175534 -1.121534
[5,]  0.0293250 4.575871 -0.19646622 -1.121519
[1] "mean of feat 2"
[1] -0.6215651
[1] "sd of feat 2"
[1] 0.4198486
[1] "maxnum is "
[1] 3
[1] "# of genes left after filtering:"
[1]   61 6033
GeneSelection: iteration 1 
GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
[1] "varselmethod"
[1] "none"
GeneSelection: iteration 1 
GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
genelist
1839 2619 5016    1 2115 4266 
  20   20   14    2    2    2 
[1] "varselmethod"
[1] "none"
GeneSelection: iteration 1 
GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
[1] "varselmethod"
[1] "none"
GeneSelection: iteration 1 
GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
[1] "varselmethod"
[1] "none"
GeneSelection: iteration 1 
GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
[1] "varselmethod"
[1] "none"
[1] "dim of scoring matrix is "
[1] 6033    5
[1] 6033
[1] "DS index stage 1"
[1] 0.6333333
[1] "bestgenelist"
[1]    1 1839 2619 4155 4701 5016
           var1     var1839   var2619    var4155   var4701   var5016
[1,] -0.9271777 -0.06663936 0.6272297  0.3605717 1.2878145 0.5010076
[2,] -0.8358990 -0.12821383 1.2275524  0.6992379 2.8076595 1.6606626
[3,]  0.2360733 -1.15435124 0.8523566 -1.1543512 0.5765086 0.3005128
           var1    var1839    var2619   var4155    var4701    var5016
[1,] -0.9193153 -0.6617976 -0.1454227 0.5349203  2.5952770  1.1926986
[2,] -0.9011489  2.3738926  1.4795100 2.4922452 -0.9011489 -0.9011489
[3,] -0.8734031  1.4243602 -0.6180501 1.0613480  2.3050832  1.1862983
[1] "numgenes selected:6"
[1] "test acc:0.707317073170732"
[1] "test AUC acc:0.771212121212121"
[1] "10 fold train96.7213114754098"
[1] "confusion matrix train 10 fold"
          nci_y
pred10fold  1  2
         1 30  1
         2  0 30
[1] "confusion matrix test"
         test_y
pred_test  1  2
        1 19  1
        2 11 10
[1] "train acc:0.983606557377049"
[1] "confusion matrix train"
          nci_y
pred_train  1  2
         1 30  1
         2  0 30
[1] "DS index stage 1"
[1] 0.6333333
[1] "KI index stage 1"
[1] 0.6331509
[[1]]
[1] "var1839" "var2619" "var4155"

[[2]]
[1] "var1839" "var2619" "var5016"

[[3]]
[1] "var1839" "var4155" "var4701"

[[4]]
[1] "var1"    "var1839" "var2619"

[[5]]
[1] "var1839" "var2619" "var4155"


 Iteration 1 :  Optimal value:  3.2 
 Optimal List:   var1839,var2619,var4701 

 Iteration 2 :  Optimal value:  3.2 
 Optimal List:   var1839,var2619,var1 

 Iteration 3 :  Optimal value:  2.4 
 Optimal List:   var1839,var2619,var4155 

 Iteration 4 :  Optimal value:  2.4 
 Optimal List:   var1839,var2619,var4155 

 Iteration 5 :  Optimal value:  2.4 
 Optimal List:   var1839,var2619,var4155 

 Iteration 6 :  Optimal value:  2.4 
 Optimal List:   var1839,var2619,var4155 

 Iteration 7 :  Optimal value:  2.4 
 Optimal List:   var1839,var2619,var4155 

 Iteration 8 :  Optimal value:  2.4 
 Optimal List:   var1839,var2619,var4155 

 Iteration 9 :  Optimal value:  2.4 
 Optimal List:   var1839,var2619,var4155 
[1] "test acc rank aggreg CE:0.634146341463415"
[1] "test AUC acc rank aggreg CE:0.721212121212121"
[1] "10 fold train rank aggreg res CE93.4426229508197"
[1] "confusion matrix train 10 fold rank aggreg CE"
            nci_y
pred10foldRA  1  2
           1 29  3
           2  1 28
[1] "Num itr RA CE"
[1] 9
[1] "Test BER aggreg CE is"
[1] 0.7212121

 Iteration 1 :  Optimal value:  2.4 
 Optimal List:   var1839,var2619,var4155 

 Iteration 2 :  Optimal value:  2.4 
 Optimal List:   var1839,var2619,var4155 

 Iteration 3 :  Optimal value:  2.4 
 Optimal List:   var1839,var2619,var4155 

 Iteration 4 :  Optimal value:  2.4 
 Optimal List:   var1839,var2619,var4155 

 Iteration 5 :  Optimal value:  2.4 
 Optimal List:   var1839,var2619,var4155 

 Iteration 6 :  Optimal value:  2.4 
 Optimal List:   var1839,var2619,var4155 

 Iteration 7 :  Optimal value:  2.4 
 Optimal List:   var1839,var2619,var4155 

 Iteration 8 :  Optimal value:  2.4 
 Optimal List:   var1839,var2619,var4155 

 Iteration 9 :  Optimal value:  2.4 
 Optimal List:   var1839,var2619,var4155 

 Iteration 10 :  Optimal value:  2.4 
 Optimal List:   var1839,var2619,var4155 

 Iteration 11 :  Optimal value:  2.4 
 Optimal List:   var1839,var2619,var4155 

 Iteration 12 :  Optimal value:  2.4 
 Optimal List:   var1839,var2619,var4155 

 Iteration 13 :  Optimal value:  2.4 
 Optimal List:   var1839,var2619,var4155 

 Iteration 14 :  Optimal value:  2.4 
 Optimal List:   var1839,var2619,var4155 

 Iteration 15 :  Optimal value:  2.4 
 Optimal List:   var1839,var2619,var4155 

 Iteration 16 :  Optimal value:  2.4 
 Optimal List:   var1839,var2619,var4155 

 Iteration 17 :  Optimal value:  2.4 
 Optimal List:   var1839,var2619,var4155 

 Iteration 18 :  Optimal value:  2.4 
 Optimal List:   var1839,var2619,var4155 

 Iteration 19 :  Optimal value:  2.4 
 Optimal List:   var1839,var2619,var4155 

 Iteration 20 :  Optimal value:  2.4 
 Optimal List:   var1839,var2619,var4155 

 Iteration 21 :  Optimal value:  2.4 
 Optimal List:   var1839,var2619,var4155 

 Iteration 22 :  Optimal value:  2.4 
 Optimal List:   var1839,var2619,var4155 

 Iteration 23 :  Optimal value:  2.4 
 Optimal List:   var1839,var2619,var4155 

 Iteration 24 :  Optimal value:  2.4 
 Optimal List:   var1839,var2619,var4155 

 Iteration 25 :  Optimal value:  2.4 
 Optimal List:   var1839,var2619,var4155 

 Iteration 26 :  Optimal value:  2.4 
 Optimal List:   var1839,var2619,var4155 

 Iteration 27 :  Optimal value:  2.4 
 Optimal List:   var1839,var2619,var4155 

 Iteration 28 :  Optimal value:  2.4 
 Optimal List:   var1839,var2619,var4155 

 Iteration 29 :  Optimal value:  2.4 
 Optimal List:   var1839,var2619,var4155 

 Iteration 30 :  Optimal value:  2.4 
 Optimal List:   var1839,var2619,var4155 
[1] "test acc rank aggreg GA:0.634146341463415"
[1] "test AUC acc rank aggreg GA:0.721212121212121"
[1] "10 fold train rank aggreg res GA93.4426229508197"
[1] "confusion matrix train 10 fold rank aggreg GA"
            nci_y
pred10foldRA  1  2
           1 29  3
           2  1 28
[1] "Num itr RA GA"
[1] 31
[1] "Test BER aggreg GA is"
[1] 0.7212121
Warning messages:
1: In if (is.na(boostweight) == TRUE) { :
  the condition has length > 1 and only the first element will be used
2: In if (is.na(testm) == TRUE) { :
  the condition has length > 1 and only the first element will be used
3: In if (is.na(testclass) == TRUE) { :
  the condition has length > 1 and only the first element will be used
> 
> cma_feat_list<-colnames(trainm)
> 
> save(CMAres,file="CMAres.Rda")
> write.table(cma_feat_list,file="selected_cma_feat_list.txt",sep="t",row.names=FALSE)
> 
> # modtraindata=modtrain, modtestdata=modtest, blindtest=testacc, modtrainclass=nci_y, modtestclass=test_y
> #if(FALSE)
> {
+ trainm<-CMAres$modtraindata
+ testm<-CMAres$modtestdata
+ trainclass<-CMAres$modtrainclass
+ testclass<-CMAres$modtestclass
+ learningsets<-CMAres$learningsets
+ }
> 
> if(FALSE)
+ {
+ trainclass<-trainm[,1] #CMAres$modtrainclass
+ testclass<-testm[,1] #CMAres$modtestclass
+ trainm<-trainm[,-c(1)] #CMAres$modtrainmata
+ testm<-testm[,-c(1)] #CMAres$modtestmata
+ 
+ }
> 
> d_dim<-dim(trainm)
> 
> print("Original dimension")
[1] "Original dimension"
> print(d_dim)
[1] 61  6
> 
> #2 call run_pso function()
> system.time(psores<-run_pso(outloc=outloc,trainm,trainclass,testm,testclass,transition_matrix,c1=2.05,
+ c2=2.05,
+ itr=10,
+ globalpso_maxitr=10,
+ global_max_itr=3,
+ num_part=20,
+ kname="radial",
+ errortype="BER",
+ weightA<-as.numeric(args[1]),
+ weightB<-as.numeric(args[2]),
+ weightC<-as.numeric(args[3]),
+ weightD<-as.numeric(args[4]),
+ featweight.max=0.01,
+ featweight.min=0.01,
+ numfolds=10,
+ followerprob=as.numeric(args[6]),
+ confusionprob=as.numeric(args[7]),
+ leaderprob=as.numeric(args[8]),
+ wmax=1,
+ wmin=1,
+ behavior_reset_itr=5,
+ maxitrreset=10,
+ num_neighbors=3,
+ minselect.pct=0.5,
+ evalMode="CV2",
+ minfitnessthresh=50,
+ maxnum=as.numeric(args[10]),minnum=3,inertia_method=args[5],particlebehav_method="randbased",constriction_factor=1,
+ select.global.best=TRUE,numnodes=4,evalFunc=eval_fit_kfold_diff,itr.terminate=FALSE,train.pct=as.numeric(args[11]),min.iter.select=1))
[1] "c1: 2.05"
[1] "c2: 2.05"
[1] "itr: 10"
[1] "globalpso_maxitr: 10"
[1] "global_max_itr: 3"
[1] "num_part: 20"
[1] "kname: radial"
[1] "errortype: BER"
[1] "weightA: 0.5"
[1] "weightB: 0.4"
[1] "weightC: 0.05"
[1] "weightD: 0.05"
[1] "featweight.max: 0.01"
[1] "featweight.min: 0.01"
[1] "numfolds: 10"
[1] "followerprob: 0.45"
[1] "confusionprob: 0.2"
[1] "leaderprob: 0.25"
[1] "wmax: 1"
[1] "wmin: 1"
[1] "behavior_reset_itr: 5"
[1] "maxitrreset: 10"
[1] "num_neighbors: 3"
[1] "minselect.pct: 0.5"
[1] "minfitnessthresh: 50"
[1] "maxnum: 3"
[1] "minnum: 3"
[1] "inertia_method: global"
[1] "particlebehav_method: randbased"
[1] "constriction_factor: 1"
[1] "select.global.best: TRUE"
[1] "DS index stage 2"
[1] 0.5587302
[1] "KI index stage 2"
[1] -Inf
[1] 1
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   5.00    5.25    6.00    6.00    6.75    7.00 
[1] "Number of features selected in 1 iterations:"
[1] 6
[1] 1 1
[1] 1 1
[1] "accuracy: 92.4685873820782 num_feat:6 fitness:50.2188086488097"
[1] -50.21881
[1] "Number of features selected in 2 iterations:"
[1] 6
[1] 1 1
[1] 1 1
[1] "accuracy: 92.4685873820782 num_feat:6 fitness:50.2188086488097"
[1] -50.21881
[1] "Number of features selected in 3 iterations:"
[1] 6
[1] 1 1
[1] 1 1
[1] "accuracy: 92.4685873820782 num_feat:6 fitness:50.2188086488097"
[1] -50.21881
[1] "Number of features selected in 4 iterations:"
[1] 6
[1] 1 1
[1] 1 1
[1] "accuracy: 92.4685873820782 num_feat:6 fitness:50.2188086488097"
[1] -50.21881
[1] "Number of features selected in 5 iterations:"
[1] 6
[1] 1 1
[1] 1 1
[1] "accuracy: 92.4685873820782 num_feat:6 fitness:50.2188086488097"
[1] -50.21881
[1] "Number of features selected in 6 iterations:"
[1] 4
[1] 1.0000000 0.9677419
[1] 1.0000000 0.9677419
[1] "accuracy: 94.8820297760585 num_feat:4 fitness:54.9834752814339"
[1] -54.98348
[1] "Number of features selected in 7 iterations:"
[1] 2
[1] "accuracy: 1 num_feat:2 fitness:-100"
[1] 100
[1] "Number of features selected in 8 iterations:"
[1] 0
[1] "accuracy: 1 num_feat:0 fitness:-100"
[1] 100
[1] "Number of features selected in 9 iterations:"
[1] 0
[1] "accuracy: 1 num_feat:0 fitness:-100"
[1] 100
[1] "Number of features selected in 10 iterations:"
[1] 0
[1] "accuracy: 1 num_feat:0 fitness:-100"
[1] 100
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.8947  0.9474  0.9474  0.9526  0.9474  1.0000 
[1] "Number of features selected in 6 iterations:"
[1] 4
[1] "Modified train 10 fold accuracy using train data is "
[1] 98.36066
[1] "Modified train accuracy is "
[1] 0.9836066
[1] "train confusion matrix is "
          trainclass
pred_train  1  2
         1 30  1
         2  0 30
[1] "Train dimension is "
[1] 61  4
[1] "Test dimension is "
[1] 41  4
[1] "Test confusion matrix is "
    
pred  1  2
   1 18  1
   2 12 10
[1] "Test acc is "
[1] 0.6829268
[1] "train 10 fold"
[1] 98.36066
[1] "Test confusion matrix is "
    
pred  1  2
   1 18  1
   2 12 10
[1] "Test acc is "
[1] 0.6829268
[1] "Test AUC:"
[1] 0.7545455
[1] "Train acc is "
[1] 0.9836066
[1] "# of features after CMA:"
NULL
[1] "# of features after PSO:"
[1] 61  5
   user  system elapsed 
  3.672   0.008   7.866 
> 
> feat_ind<-psores$bestfeatlist
> feat_names<-psores$bestfeatnames
> 
> scoringmatrix<-as.data.frame(psores$scoringmatrix)
> print(scoringmatrix)
  V1 V2 V3 V4 V5 V6 V7 V8 V9 V10
1  1  1  1  1  1  0  0  0  0   1
2  0  0  0  1  1  1  0  0  1   1
3  1  1  1  1  0  0  1  1  1   0
4  0  1  0  1  0  1  1  1  1   1
5  0  1  1  0  1  1  1  0  1   0
6  1  0  1  1  1  0  0  1  0   0
> print(feat_names[feat_ind])
[1] "var1"    "var2619" "var4155" "var4701"
> 
> save(psores,file="psores.Rda")
> print("Complete")
[1] "Complete"
> 
