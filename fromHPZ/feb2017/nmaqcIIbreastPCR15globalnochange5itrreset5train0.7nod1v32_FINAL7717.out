
R version 3.4.0 (2017-04-21) -- "You Stupid Darkness"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> #.libPaths("/home/stu/kuppal3/karan_libs/Rlibs")
> library(snow)
> library(e1071)
> library(yaImpute)

Attaching package: ‘yaImpute’

The following object is masked from ‘package:e1071’:

    impute

> library(pROC)
Type 'citation("pROC")' for a citation.

Attaching package: ‘pROC’

The following objects are masked from ‘package:stats’:

    cov, smooth, var

> library(bioDist)
Loading required package: Biobase
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘parallel’

The following objects are masked from ‘package:snow’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, clusterSplit, makeCluster, parApply,
    parCapply, parLapply, parRapply, parSapply, splitIndices,
    stopCluster


Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following object is masked from ‘package:pROC’:

    var

The following objects are masked from ‘package:snow’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parRapply, parSapply

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, cbind, colMeans, colnames,
    colSums, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, lengths, Map, mapply, match,
    mget, order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rowMeans, rownames, rowSums, sapply, setdiff, sort,
    table, tapply, union, unique, unsplit, which, which.max, which.min

Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

Loading required package: KernSmooth
KernSmooth 2.23 loaded
Copyright M. P. Wand 1997-2009
> #library(CMA, lib="/home/stu/kuppal3/karan_libs/Rlibs/")
> library(RankAggreg)
> library(CMA)

Attaching package: ‘CMA’

The following object is masked from ‘package:pROC’:

    roc

The following object is masked from ‘package:e1071’:

    tune

> library(expm)
Loading required package: Matrix

Attaching package: ‘expm’

The following object is masked from ‘package:Matrix’:

    expm

> library(glmnet)
Loading required package: foreach
Loaded glmnet 2.0-10


Attaching package: ‘glmnet’

The following object is masked from ‘package:pROC’:

    auc

> 
> cl<-makeCluster(1)
> 
> 
> args<-commandArgs(trailingOnly=TRUE)
> #sname<-paste("/home/stu/kuppal3/Research/Feature_selection/Rcode/version2016/OCFS_",args[9],".R",sep="")
> #sname<-paste("/Users/karanuppal/Documents/Gatech/Projects/Algorithms/TwostagePSO/version2016/OCFS_",args[9],".R",sep="")
> 
> sname<-paste("/home/kuppal2/Documents/Projects/xmsPANDA/Other/scripts/OCFS_",args[9],".R",sep="")
> source(sname)
> print(sname)
[1] "/home/kuppal2/Documents/Projects/xmsPANDA/Other/scripts/OCFS_vfeb817_v4.R"
> 
> #data_loc<-"/home/stu/kuppal3/Research/Feature_selection/Datasets/MAQCII_BreastCancer/" 
> #data_loc<-"/Users/karanuppal/Documents/Gatech/Projects/Algorithms/TwostagePSO/Datasets/MAQCII_BreastCancer/"
> 
> data_loc<-"/home/kuppal2/Documents/Projects/xmsPANDA/Other/Datasets/MAQCII_BreastCancer/"
> setwd(data_loc)
> #load("/home/stu/kuppal3/Research/Feature_selection/Datasets/MAQCII_BreastCancer/MaqcIIbr.Rda")
> 
> load("MaqcIIbr.Rda")
> 
> outloc<-paste(data_loc,"OCFS_PCR",args[9],"_",args[10],"_",args[11],"/",sep="")
> dir.create(outloc)
Warning message:
In dir.create(outloc) :
  '/home/kuppal2/Documents/Projects/xmsPANDA/Other/Datasets/MAQCII_BreastCancer/OCFS_PCRvfeb817_v4_15_0.7' already exists
> setwd(outloc)
> 
> trainm<-MaqcIIbr$trainx
> testm<-MaqcIIbr$testx
> #trainclass<-MaqcIIbr$trainER #PCRvsRD
> #testclass<-MaqcIIbr$testER #PCRvsRD
> 
> trainclass<-MaqcIIbr$trainPCRvsRD
> testclass<-MaqcIIbr$testPCRvsRD
> 
> trainm<-trainm[,-c(22284)]
> testm<-testm[,-c(22284)]
> trainm<-apply(trainm,2,as.numeric)
> testm<-apply(testm,2,as.numeric)
> 
> 
> 
> 
> trainm<-cbind(trainclass,trainm)
> testm<-cbind(testclass,testm)
> 
> trainm<-na.omit(trainm)
> testm<-na.omit(testm)
> 
> 
> 
> 
> 
> 
> #OCFSvmay2415v2reg_itr1_LassoRFELIMMAELpres1backwsel_l0.25f0.45c0.25_top10pctmaxitrs100minselmedianrandbehavfeatw0.01_CV2accA100B1wrand6methodsmax100wrand/"
> 
> dir.create(outloc)
Warning message:
In dir.create(outloc) :
  '/home/kuppal2/Documents/Projects/xmsPANDA/Other/Datasets/MAQCII_BreastCancer/OCFS_PCRvfeb817_v4_15_0.7' already exists
> setwd(outloc)
> 
> trainm<-as.matrix(trainm)
> testm<-as.matrix(testm)
> trainclass<-trainm[,1] #CMAres$modtrainclass
> testclass<-testm[,1] #CMAres$modtestclass
> trainm<-trainm[,-c(1)] #CMAres$modtrainmata
> testm<-testm[,-c(1)] #CMAres$modtestmata
> 
> #a: Confusions
> #b: Neighbors
> #c: Global
> #d: Death
> 
> a<-c(0.25,0.25,0.25,0.25)
> b<-c(0.3,0.1,0.4,0.1)
> c<-c(0.25,0.25,0.5,0)
> d<-c(0.9,0.1,0,0.1)
> 
> a<-c(0,0.4,0.1,0.5)
> b<-c(0.3,0.1,0.4,0.1)
> c<-c(0,0.5,0.5,0)
> d<-c(0.9,0.1,0,0)
> 
> a<-c(0,0.4,0.1,0.5)
> b<-c(0.2,0.3,0.4,0.1)
> c<-c(0,0.4,0.4,0.2)
> d<-c(0.9,0.1,0,0)
> 
> transition_matrix<-rbind(a,b,c,d)
> 
> 
> dir.create(outloc)
Warning message:
In dir.create(outloc) :
  '/home/kuppal2/Documents/Projects/xmsPANDA/Other/Datasets/MAQCII_BreastCancer/OCFS_PCRvfeb817_v4_15_0.7' already exists
> setwd(outloc)
> temp2=t(trainm)
> temp2=apply(temp2, 2, function(x){which(x=="MD")})
> temp2=unlist(temp2)
> temp2=unique(temp2)
> if(length(temp2)>1)
+ {
+ 	trainm=trainm[,-c(temp2)]
+ 
+ 	rm(temp2)
+ }
> 
> boostweight=rep(0,dim(trainm)[2])
> 
> CMAres<-performCMA(trainm, trainclass, testm, testclass,outloc,
+ maxnum=as.numeric(args[10]),
+ minnum=3,
+ stepitr=1,
+ gsmethods=c("limma"), #"lasso","elasticnet","kruskal.test"), #"f.test", "f.test", "elasticnet", "wilcox.test", "welch.test"),
+ pct_train=0.40,
+ accuracyweight=1,
+ featweight=0.06,
+ minpresent=1,
+ kname="radial",
+ norm_method="none",
+ tolerance=0.1,
+ maxitrs=5,
+ classindex=1,
+ numfacts=0,
+ evalmethod="CV",
+ numfolds=10,
+ CVfoldthresh=0.7,
+ varselmethod="none",
+ scheme_val="one-vs-all",
+ iter_learn=1,boostweight=rep(0,dim(trainm)[2]))
[1] "dim of trainm is "
[1]   130 22283
[1]   130 22283
[1] "length of factcols"
[1] 0
[1]   130 22283
[1]   100 22283
integer(0)
character(0)
NULL
[1] "ok"
[1] "test class"
[1] 2 1 2 2
Levels: 1 2
[1] "orig train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] "orig train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] 6.7866 8.0963 7.4812
[1] "norm train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] "mean of feat 2"
[1] 8.273493
[1] "sd of feat 2"
[1] 0.7010279
[1] "maxnum is "
[1] 15
[1] "# of genes left after filtering:"
[1]   130 22283
GeneSelection: iteration 1 

Attaching package: ‘limma’

The following object is masked from ‘package:BiocGenerics’:

    plotMA

GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
[1] "varselmethod"
[1] "none"
[1] "dim of scoring matrix is "
[1] 22283     1
[1] 22283
[1] "DS index stage 1"
[1] NA
[1] "bestgenelist"
 [1]  2667  3155  3455  3490  4352  4752  4874  5927  8667  9093 12339 13543
[13] 15240 15464 18415
     203139_at 203628_at 203928_x_at 203963_at 204825_at 205225_at 205347_s_at
[1,]    9.7965   10.7755      9.6578   12.0638    8.9393   13.0759      7.7184
[2,]    8.3696    9.8410      9.9980   11.3553    7.7652   13.7616      7.0526
[3,]    9.0933    9.4169      6.2526   12.3832    9.9136   12.7360      7.7606
     206401_s_at 209173_at 209603_at 212956_at 214164_x_at 215867_x_at
[1,]      9.9796   12.9392   10.5793   13.3600     12.6474     12.6194
[2,]      9.9498   14.1501   10.5772   13.2925     11.7852     11.5534
[3,]      6.0807   14.5585   11.1181   12.3582     12.7464     12.7285
     216092_s_at 219051_x_at
[1,]     10.4159      8.5236
[2,]      9.7648      8.9626
[3,]      8.3641     10.7458
     203139_at 203628_at 203928_x_at 203963_at 204825_at 205225_at 205347_s_at
[1,]    8.8140    9.4326     10.9860   12.4052    7.9851   13.8754      8.3232
[2,]    8.7652    9.8046      8.1054   10.4033    5.2744   11.7217      7.4873
[3,]    9.4426    7.9079      8.3152    9.8307    5.9481   10.9960      8.2573
     206401_s_at 209173_at 209603_at 212956_at 214164_x_at 215867_x_at
[1,]     10.6463   13.2041   11.9790   13.5201     12.7392     12.5744
[2,]      8.2532   11.3631   10.8744   12.5480     10.9092     11.0575
[3,]      7.4477   11.1800    8.0211   11.2917     10.6696     11.0769
     216092_s_at 219051_x_at
[1,]     10.6963      9.5138
[2,]      9.3780      5.3641
[3,]      9.3840      7.1097
[1] "numgenes selected:15"
[1] "test acc:0.74"
[1] "test AUC acc:0.709803921568627"
[1] "10 fold train80"
[1] "confusion matrix train 10 fold"
          nci_y
pred10fold  1  2
         1 25  4
         2  8 93
[1] "confusion matrix test"
         test_y
pred_test  1  2
        1 10 21
        2  5 64
[1] "train acc:0.907692307692308"
[1] "confusion matrix train"
          nci_y
pred_train  1  2
         1 25  4
         2  8 93
[1] "DS index stage 1"
[1] NA
[1] "KI index stage 1"
[1] NA
Warning messages:
1: In if (is.na(boostweight) == TRUE) { :
  the condition has length > 1 and only the first element will be used
2: In if (is.na(testm) == TRUE) { :
  the condition has length > 1 and only the first element will be used
3: In if (is.na(testclass) == TRUE) { :
  the condition has length > 1 and only the first element will be used
4: In mean.default(DS_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
5: In mean.default(DS_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
6: In mean.default(KI_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
> 
> 
> CMAres<-performCMA(trainm, trainclass, testm, testclass,outloc,
+ maxnum=as.numeric(args[10]),
+ minnum=3,
+ stepitr=1,
+ gsmethods=c("lasso"), #"lasso","elasticnet","kruskal.test"), #"f.test", "f.test", "elasticnet", "wilcox.test", "welch.test"),
+ pct_train=0.40,
+ accuracyweight=1,
+ featweight=0.06,
+ minpresent=1,
+ kname="radial",
+ norm_method="none",
+ tolerance=0.1,
+ maxitrs=5,
+ classindex=1,
+ numfacts=0,
+ evalmethod="CV",
+ numfolds=10,
+ CVfoldthresh=0.7,
+ varselmethod="none",
+ scheme_val="one-vs-all",
+ iter_learn=1,boostweight=rep(0,dim(trainm)[2]))
[1] "dim of trainm is "
[1]   130 22283
[1]   130 22283
[1] "length of factcols"
[1] 0
[1]   130 22283
[1]   100 22283
integer(0)
character(0)
NULL
[1] "ok"
[1] "test class"
[1] 2 1 2 2
Levels: 1 2
[1] "orig train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] "orig train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] 6.7866 8.0963 7.4812
[1] "norm train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] "mean of feat 2"
[1] 8.273493
[1] "sd of feat 2"
[1] 0.7010279
[1] "maxnum is "
[1] 15
[1] "# of genes left after filtering:"
[1]   130 22283
GeneSelection: iteration 1 
GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
genelist
 1083 15464  4208  2667  8166 11253 11968  4756  8207 18226  2211  3155  4352 
   20    18    16    14    14    14    12    10    10    10     8     8     8 
 1326  4874  5223  5278 18415 18802 19283 20137 21615  1732  5927 10291 16738 
    6     6     6     6     6     6     6     6     6     4     4     4     4 
20616 21064  2841  3223  4349  4569  7691  7860  8080  8292  8550  8851  9093 
    4     4     2     2     2     2     2     2     2     2     2     2     2 
 9279 10271 10980 11729 12226 12517 12814 12908 13226 16398 17669 18220 18313 
    2     2     2     2     2     2     2     2     2     2     2     2     2 
18330 18456 19012 19380 19856 20350 
    2     2     2     2     2     2 
[1] "varselmethod"
[1] "none"
[1] "dim of scoring matrix is "
[1] 22283     1
[1] 22283
[1] "DS index stage 1"
[1] NA
[1] "bestgenelist"
 [1]  1083  1326  2211  2667  3155  4208  4352  4756  4874  8166  8207 11253
[13] 11968 15464 18226
     201555_at 201798_s_at 202683_s_at 203139_at 203628_at 204681_s_at
[1,]    9.9323     11.6423      8.8393    9.7965   10.7755      7.5046
[2,]    9.5628     10.3129      8.4030    8.3696    9.8410      8.7229
[3,]   10.3905     11.6751      8.3998    9.0933    9.4169      6.9584
     204825_at 205229_s_at 205347_s_at 208670_s_at 208712_at 211864_s_at
[1,]    8.9393      6.8695      7.7184      8.6539   10.9476     10.7931
[2,]    7.7652      5.4533      7.0526      9.5953   11.4622      9.0349
[3,]    9.9136      6.2767      7.7606      9.8134   10.4996     10.4934
     212583_at 216092_s_at 218862_at
[1,]    6.8476     10.4159    9.8843
[2,]    6.8369      9.7648   10.0105
[3,]    7.3452      8.3641    9.0597
     201555_at 201798_s_at 202683_s_at 203139_at 203628_at 204681_s_at
[1,]    9.9499     10.8345      8.8732    8.8140    9.4326      8.7098
[2,]    9.6616     11.4169      8.5511    8.7652    9.8046      8.1223
[3,]    9.4638     10.0144      8.5826    9.4426    7.9079      7.5006
     204825_at 205229_s_at 205347_s_at 208670_s_at 208712_at 211864_s_at
[1,]    7.9851      5.2668      8.3232      8.8319   10.8225      9.2348
[2,]    5.2744      7.1769      7.4873      9.8519    9.8721     10.1938
[3,]    5.9481      6.9284      8.2573      9.3521   10.2362      8.4931
     212583_at 216092_s_at 218862_at
[1,]    7.5912     10.6963   10.4625
[2,]    7.5112      9.3780    9.8143
[3,]    4.6920      9.3840    9.3484
[1] "numgenes selected:15"
[1] "test acc:0.73"
[1] "test AUC acc:0.676470588235294"
[1] "10 fold train87.6923076923077"
[1] "confusion matrix train 10 fold"
          nci_y
pred10fold  1  2
         1 30  2
         2  3 95
[1] "confusion matrix test"
         test_y
pred_test  1  2
        1  9 21
        2  6 64
[1] "train acc:0.961538461538462"
[1] "confusion matrix train"
          nci_y
pred_train  1  2
         1 30  2
         2  3 95
[1] "DS index stage 1"
[1] NA
[1] "KI index stage 1"
[1] NA
Warning messages:
1: In if (is.na(boostweight) == TRUE) { :
  the condition has length > 1 and only the first element will be used
2: In if (is.na(testm) == TRUE) { :
  the condition has length > 1 and only the first element will be used
3: In if (is.na(testclass) == TRUE) { :
  the condition has length > 1 and only the first element will be used
4: In mean.default(DS_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
5: In mean.default(DS_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
6: In mean.default(KI_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
> 
> CMAres<-performCMA(trainm, trainclass, testm, testclass,outloc,
+ maxnum=as.numeric(args[10]),
+ minnum=3,
+ stepitr=1,
+ gsmethods=c("rfe"), #"lasso","elasticnet","kruskal.test"), #"f.test", "f.test", "elasticnet", "wilcox.test", "welch.test"),
+ pct_train=0.40,
+ accuracyweight=1,
+ featweight=0.06,
+ minpresent=1,
+ kname="radial",
+ norm_method="none",
+ tolerance=0.1,
+ maxitrs=5,
+ classindex=1,
+ numfacts=0,
+ evalmethod="CV",
+ numfolds=10,
+ CVfoldthresh=0.7,
+ varselmethod="none",
+ scheme_val="one-vs-all",
+ iter_learn=1,boostweight=rep(0,dim(trainm)[2]))
[1] "dim of trainm is "
[1]   130 22283
[1]   130 22283
[1] "length of factcols"
[1] 0
[1]   130 22283
[1]   100 22283
integer(0)
character(0)
NULL
[1] "ok"
[1] "test class"
[1] 2 1 2 2
Levels: 1 2
[1] "orig train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] "orig train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] 6.7866 8.0963 7.4812
[1] "norm train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] "mean of feat 2"
[1] 8.273493
[1] "sd of feat 2"
[1] 0.7010279
[1] "maxnum is "
[1] 15
[1] "# of genes left after filtering:"
[1]   130 22283
GeneSelection: iteration 1 
GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
[1] "varselmethod"
[1] "none"
[1] "dim of scoring matrix is "
[1] 22283     1
[1] 22283
[1] "DS index stage 1"
[1] NA
[1] "bestgenelist"
 [1]  4441  4756  5005  5223  5240  5278  5357  5927  8388  8667  9052 11729
[13] 13990 18220 19398
     204914_s_at 205229_s_at 205478_at 205696_s_at 205713_s_at 205751_at
[1,]      6.9654      6.8695    7.9799     11.6168     10.0607    5.3569
[2,]      4.0367      5.4533    6.0596      9.5737      5.6228    3.7733
[3,]      3.6401      6.2767    5.5057      7.2600      6.8404    2.5009
     205830_at 206401_s_at 208893_s_at 209173_at 209560_s_at 212344_at
[1,]    9.0445      9.9796      4.0949   12.9392      7.8880    9.2335
[2,]    9.6145      9.9498      9.2703   14.1501      5.8444    7.4051
[3,]    7.0195      6.0807      3.9487   14.5585      7.3689    8.4941
     214612_x_at 218856_at 220034_at
[1,]      6.0516    6.2115    5.4109
[2,]      5.7915    8.8050    3.3392
[3,]      3.4135    9.9478    3.2968
     204914_s_at 205229_s_at 205478_at 205696_s_at 205713_s_at 205751_at
[1,]      4.5686      5.2668    4.8386      9.0616      5.2933    5.4450
[2,]      6.6256      7.1769   11.9784      7.7288      4.3142    6.3482
[3,]      6.1259      6.9284   12.5884      7.1560      4.5240    6.0619
     205830_at 206401_s_at 208893_s_at 209173_at 209560_s_at 212344_at
[1,]    8.7696     10.6463      7.6049   13.2041      7.6698   11.6005
[2,]    7.0550      8.2532      8.9154   11.3631     11.5012    8.1512
[3,]    6.8984      7.4477      9.1121   11.1800      7.7658    8.0329
     214612_x_at 218856_at 220034_at
[1,]      6.2012    6.8392    6.6028
[2,]      7.0485   10.2503    5.8614
[3,]      5.5564   10.6432    7.9160
[1] "numgenes selected:15"
[1] "test acc:0.8"
[1] "test AUC acc:0.635294117647059"
[1] "10 fold train86.1538461538462"
[1] "confusion matrix train 10 fold"
          nci_y
pred10fold  1  2
         1 27  1
         2  6 96
[1] "confusion matrix test"
         test_y
pred_test  1  2
        1  6 11
        2  9 74
[1] "train acc:0.946153846153846"
[1] "confusion matrix train"
          nci_y
pred_train  1  2
         1 27  1
         2  6 96
[1] "DS index stage 1"
[1] NA
[1] "KI index stage 1"
[1] NA
Warning messages:
1: In if (is.na(boostweight) == TRUE) { :
  the condition has length > 1 and only the first element will be used
2: In if (is.na(testm) == TRUE) { :
  the condition has length > 1 and only the first element will be used
3: In if (is.na(testclass) == TRUE) { :
  the condition has length > 1 and only the first element will be used
4: In mean.default(DS_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
5: In mean.default(DS_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
6: In mean.default(KI_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
> 
> CMAres<-performCMA(trainm, trainclass, testm, testclass,outloc,
+ maxnum=as.numeric(args[10]),
+ minnum=3,
+ stepitr=1,
+ gsmethods=c("elasticnet"), #"lasso","elasticnet","kruskal.test"), #"f.test", "f.test", "elasticnet", "wilcox.test", "welch.test"),
+ pct_train=0.40,
+ accuracyweight=1,
+ featweight=0.06,
+ minpresent=1,
+ kname="radial",
+ norm_method="none",
+ tolerance=0.1,
+ maxitrs=5,
+ classindex=1,
+ numfacts=0,
+ evalmethod="CV",
+ numfolds=10,
+ CVfoldthresh=0.7,
+ varselmethod="none",
+ scheme_val="one-vs-all",
+ iter_learn=1,boostweight=rep(0,dim(trainm)[2]))
[1] "dim of trainm is "
[1]   130 22283
[1]   130 22283
[1] "length of factcols"
[1] 0
[1]   130 22283
[1]   100 22283
integer(0)
character(0)
NULL
[1] "ok"
[1] "test class"
[1] 2 1 2 2
Levels: 1 2
[1] "orig train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] "orig train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] 6.7866 8.0963 7.4812
[1] "norm train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] "mean of feat 2"
[1] 8.273493
[1] "sd of feat 2"
[1] 0.7010279
[1] "maxnum is "
[1] 15
[1] "# of genes left after filtering:"
[1]   130 22283
GeneSelection: iteration 1 
GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
[1] "varselmethod"
[1] "none"
[1] "dim of scoring matrix is "
[1] 22283     1
[1] 22283
[1] "DS index stage 1"
[1] NA
[1] "bestgenelist"
 [1]  1083  2667  3155  4208  4352  4756  4874  5223  5927  8166  8207 11253
[13] 11968 15464 18226
     201555_at 203139_at 203628_at 204681_s_at 204825_at 205229_s_at
[1,]    9.9323    9.7965   10.7755      7.5046    8.9393      6.8695
[2,]    9.5628    8.3696    9.8410      8.7229    7.7652      5.4533
[3,]   10.3905    9.0933    9.4169      6.9584    9.9136      6.2767
     205347_s_at 205696_s_at 206401_s_at 208670_s_at 208712_at 211864_s_at
[1,]      7.7184     11.6168      9.9796      8.6539   10.9476     10.7931
[2,]      7.0526      9.5737      9.9498      9.5953   11.4622      9.0349
[3,]      7.7606      7.2600      6.0807      9.8134   10.4996     10.4934
     212583_at 216092_s_at 218862_at
[1,]    6.8476     10.4159    9.8843
[2,]    6.8369      9.7648   10.0105
[3,]    7.3452      8.3641    9.0597
     201555_at 203139_at 203628_at 204681_s_at 204825_at 205229_s_at
[1,]    9.9499    8.8140    9.4326      8.7098    7.9851      5.2668
[2,]    9.6616    8.7652    9.8046      8.1223    5.2744      7.1769
[3,]    9.4638    9.4426    7.9079      7.5006    5.9481      6.9284
     205347_s_at 205696_s_at 206401_s_at 208670_s_at 208712_at 211864_s_at
[1,]      8.3232      9.0616     10.6463      8.8319   10.8225      9.2348
[2,]      7.4873      7.7288      8.2532      9.8519    9.8721     10.1938
[3,]      8.2573      7.1560      7.4477      9.3521   10.2362      8.4931
     212583_at 216092_s_at 218862_at
[1,]    7.5912     10.6963   10.4625
[2,]    7.5112      9.3780    9.8143
[3,]    4.6920      9.3840    9.3484
[1] "numgenes selected:15"
[1] "test acc:0.78"
[1] "test AUC acc:0.67843137254902"
[1] "10 fold train86.9230769230769"
[1] "confusion matrix train 10 fold"
          nci_y
pred10fold  1  2
         1 28  2
         2  5 95
[1] "confusion matrix test"
         test_y
pred_test  1  2
        1  8 15
        2  7 70
[1] "train acc:0.946153846153846"
[1] "confusion matrix train"
          nci_y
pred_train  1  2
         1 28  2
         2  5 95
[1] "DS index stage 1"
[1] NA
[1] "KI index stage 1"
[1] NA
Warning messages:
1: In if (is.na(boostweight) == TRUE) { :
  the condition has length > 1 and only the first element will be used
2: In if (is.na(testm) == TRUE) { :
  the condition has length > 1 and only the first element will be used
3: In if (is.na(testclass) == TRUE) { :
  the condition has length > 1 and only the first element will be used
4: In mean.default(DS_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
5: In mean.default(DS_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
6: In mean.default(KI_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
> 
> if(FALSE){
+ CMAres<-performCMA(trainm, trainclass, testm, testclass,outloc,
+ maxnum=as.numeric(args[10]),
+ minnum=3,
+ stepitr=1,
+ gsmethods=c("rf"), #"lasso","elasticnet","kruskal.test"), #"f.test", "f.test", "elasticnet", "wilcox.test", "welch.test"),
+ pct_train=0.40,
+ accuracyweight=1,
+ featweight=0.06,
+ minpresent=1,
+ kname="radial",
+ norm_method="none",
+ tolerance=0.1,
+ maxitrs=5,
+ classindex=1,
+ numfacts=0,
+ evalmethod="CV",
+ numfolds=10,
+ CVfoldthresh=0.7,
+ varselmethod="none",
+ scheme_val="one-vs-all",
+ iter_learn=1,boostweight=rep(0,dim(trainm)[2]))
+ }
> 
> CMAres<-performCMA(trainm, trainclass, testm, testclass,outloc,
+ maxnum=as.numeric(args[10]),
+ minnum=3,
+ stepitr=1,
+ gsmethods=c("f.test"), #"lasso","elasticnet","kruskal.test"), #"f.test", "f.test", "elasticnet", "wilcox.test", "welch.test"),
+ pct_train=0.40,
+ accuracyweight=1,
+ featweight=0.06,
+ minpresent=1,
+ kname="radial",
+ norm_method="none",
+ tolerance=0.1,
+ maxitrs=5,
+ classindex=1,
+ numfacts=0,
+ evalmethod="CV",
+ numfolds=10,
+ CVfoldthresh=0.7,
+ varselmethod="none",
+ scheme_val="one-vs-all",
+ iter_learn=1,boostweight=rep(0,dim(trainm)[2]))
[1] "dim of trainm is "
[1]   130 22283
[1]   130 22283
[1] "length of factcols"
[1] 0
[1]   130 22283
[1]   100 22283
integer(0)
character(0)
NULL
[1] "ok"
[1] "test class"
[1] 2 1 2 2
Levels: 1 2
[1] "orig train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] "orig train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] 6.7866 8.0963 7.4812
[1] "norm train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] "mean of feat 2"
[1] 8.273493
[1] "sd of feat 2"
[1] 0.7010279
[1] "maxnum is "
[1] 15
[1] "# of genes left after filtering:"
[1]   130 22283
GeneSelection: iteration 1 
GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
[1] "varselmethod"
[1] "none"
[1] "dim of scoring matrix is "
[1] 22283     1
[1] 22283
[1] "DS index stage 1"
[1] NA
[1] "bestgenelist"
 [1]  1083  2667  3155  3455  3490  4352  4752  5927  8667  9093 12339 13543
[13] 15240 15464 18415
     201555_at 203139_at 203628_at 203928_x_at 203963_at 204825_at 205225_at
[1,]    9.9323    9.7965   10.7755      9.6578   12.0638    8.9393   13.0759
[2,]    9.5628    8.3696    9.8410      9.9980   11.3553    7.7652   13.7616
[3,]   10.3905    9.0933    9.4169      6.2526   12.3832    9.9136   12.7360
     206401_s_at 209173_at 209603_at 212956_at 214164_x_at 215867_x_at
[1,]      9.9796   12.9392   10.5793   13.3600     12.6474     12.6194
[2,]      9.9498   14.1501   10.5772   13.2925     11.7852     11.5534
[3,]      6.0807   14.5585   11.1181   12.3582     12.7464     12.7285
     216092_s_at 219051_x_at
[1,]     10.4159      8.5236
[2,]      9.7648      8.9626
[3,]      8.3641     10.7458
     201555_at 203139_at 203628_at 203928_x_at 203963_at 204825_at 205225_at
[1,]    9.9499    8.8140    9.4326     10.9860   12.4052    7.9851   13.8754
[2,]    9.6616    8.7652    9.8046      8.1054   10.4033    5.2744   11.7217
[3,]    9.4638    9.4426    7.9079      8.3152    9.8307    5.9481   10.9960
     206401_s_at 209173_at 209603_at 212956_at 214164_x_at 215867_x_at
[1,]     10.6463   13.2041   11.9790   13.5201     12.7392     12.5744
[2,]      8.2532   11.3631   10.8744   12.5480     10.9092     11.0575
[3,]      7.4477   11.1800    8.0211   11.2917     10.6696     11.0769
     216092_s_at 219051_x_at
[1,]     10.6963      9.5138
[2,]      9.3780      5.3641
[3,]      9.3840      7.1097
[1] "numgenes selected:15"
[1] "test acc:0.7"
[1] "test AUC acc:0.658823529411765"
[1] "10 fold train82.3076923076923"
[1] "confusion matrix train 10 fold"
          nci_y
pred10fold  1  2
         1 26  5
         2  7 92
[1] "confusion matrix test"
         test_y
pred_test  1  2
        1  9 24
        2  6 61
[1] "train acc:0.907692307692308"
[1] "confusion matrix train"
          nci_y
pred_train  1  2
         1 26  5
         2  7 92
[1] "DS index stage 1"
[1] NA
[1] "KI index stage 1"
[1] NA
Warning messages:
1: In if (is.na(boostweight) == TRUE) { :
  the condition has length > 1 and only the first element will be used
2: In if (is.na(testm) == TRUE) { :
  the condition has length > 1 and only the first element will be used
3: In if (is.na(testclass) == TRUE) { :
  the condition has length > 1 and only the first element will be used
4: In mean.default(DS_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
5: In mean.default(DS_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
6: In mean.default(KI_res, na.rm = TRUE) :
  argument is not numeric or logical: returning NA
> 
> #1
> CMAres<-performCMA(trainm, trainclass, testm, testclass,outloc,
+ maxnum=as.numeric(args[10]),
+ minnum=3,
+ stepitr=1,
+ gsmethods=c("limma","lasso","rfe","elasticnet", "f.test"), #"lasso","elasticnet","kruskal.test"), #"f.test", "f.test", "elasticnet", "wilcox.test", "welch.test"),
+ pct_train=0.40,
+ accuracyweight=1,
+ featweight=0.06,
+ minpresent=1,
+ kname="radial",
+ norm_method="none",
+ tolerance=0.1,
+ maxitrs=5,
+ classindex=1,
+ numfacts=0,
+ evalmethod="CV",
+ numfolds=10,
+ CVfoldthresh=0.7,
+ varselmethod="none",
+ scheme_val="one-vs-all",
+ iter_learn=1,boostweight=rep(0,dim(trainm)[2]))
[1] "dim of trainm is "
[1]   130 22283
[1]   130 22283
[1] "length of factcols"
[1] 0
[1]   130 22283
[1]   100 22283
integer(0)
character(0)
NULL
[1] "ok"
[1] "test class"
[1] 2 1 2 2
Levels: 1 2
[1] "orig train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] "orig train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] 6.7866 8.0963 7.4812
[1] "norm train matrix"
     1007_s_at 1053_at 117_at  121_at 1255_g_at 1294_at 1316_at 1320_at
[1,]   12.4440  8.3774 6.7866 10.2851    5.9064  8.3767  8.0356  6.6745
[2,]   12.2005  7.8592 8.0963 10.4624    4.9582  9.2973  7.0581  6.4607
[3,]   12.6709  8.6762 7.4812 10.1887    5.2332  9.1721  8.6061  7.0932
[4,]   11.6619  8.2557 7.9923 10.7705    6.3296  9.3777  8.4776  6.5878
[5,]   11.8397  8.7971 7.8321 10.2869    5.8389  7.0841  7.3419  7.3167
     1405_i_at 1431_at
[1,]    6.2325  6.8450
[2,]    6.9047  5.8878
[3,]    6.5940  5.6843
[4,]    6.0877  6.5169
[5,]    6.3456  6.1708
[1] "mean of feat 2"
[1] 8.273493
[1] "sd of feat 2"
[1] 0.7010279
[1] "maxnum is "
[1] 15
[1] "# of genes left after filtering:"
[1]   130 22283
GeneSelection: iteration 1 
GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
[1] "varselmethod"
[1] "none"
GeneSelection: iteration 1 
GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
genelist
 1083 15464  4208  2667  8166 11253 11968  4756  8207 18226  2211  3155  4352 
   20    18    16    14    14    14    12    10    10    10     8     8     8 
 1326  4874  5223  5278 18415 18802 19283 20137 21615  1732  5927 10291 16738 
    6     6     6     6     6     6     6     6     6     4     4     4     4 
20616 21064  2841  3223  4349  4569  7691  7860  8080  8292  8550  8851  9093 
    4     4     2     2     2     2     2     2     2     2     2     2     2 
 9279 10271 10980 11729 12226 12517 12814 12908 13226 16398 17669 18220 18313 
    2     2     2     2     2     2     2     2     2     2     2     2     2 
18330 18456 19012 19380 19856 20350 
    2     2     2     2     2     2 
[1] "varselmethod"
[1] "none"
GeneSelection: iteration 1 
GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
[1] "varselmethod"
[1] "none"
GeneSelection: iteration 1 
GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
[1] "varselmethod"
[1] "none"
GeneSelection: iteration 1 
GeneSelection: iteration 2 
GeneSelection: iteration 3 
GeneSelection: iteration 4 
GeneSelection: iteration 5 
GeneSelection: iteration 6 
GeneSelection: iteration 7 
GeneSelection: iteration 8 
GeneSelection: iteration 9 
GeneSelection: iteration 10 
[1] "varselmethod"
[1] "none"
[1] "dim of scoring matrix is "
[1] 22283     5
[1] 22283
[1] "DS index stage 1"
[1] 0.38
[1] "bestgenelist"
 [1]  1083  1326  2211  2667  3155  3455  3490  4208  4352  4441  4752  4756
[13]  4874  5005  5223  5240  5278  5357  5927  8166  8207  8388  8667  9052
[25]  9093 11253 11729 11968 12339 13543 13990 15240 15464 18220 18226 18415
[37] 19398
     201555_at 201798_s_at 202683_s_at 203139_at 203628_at 203928_x_at
[1,]    9.9323     11.6423      8.8393    9.7965   10.7755      9.6578
[2,]    9.5628     10.3129      8.4030    8.3696    9.8410      9.9980
[3,]   10.3905     11.6751      8.3998    9.0933    9.4169      6.2526
     203963_at 204681_s_at 204825_at 204914_s_at 205225_at 205229_s_at
[1,]   12.0638      7.5046    8.9393      6.9654   13.0759      6.8695
[2,]   11.3553      8.7229    7.7652      4.0367   13.7616      5.4533
[3,]   12.3832      6.9584    9.9136      3.6401   12.7360      6.2767
     205347_s_at 205478_at 205696_s_at 205713_s_at 205751_at 205830_at
[1,]      7.7184    7.9799     11.6168     10.0607    5.3569    9.0445
[2,]      7.0526    6.0596      9.5737      5.6228    3.7733    9.6145
[3,]      7.7606    5.5057      7.2600      6.8404    2.5009    7.0195
     206401_s_at 208670_s_at 208712_at 208893_s_at 209173_at 209560_s_at
[1,]      9.9796      8.6539   10.9476      4.0949   12.9392      7.8880
[2,]      9.9498      9.5953   11.4622      9.2703   14.1501      5.8444
[3,]      6.0807      9.8134   10.4996      3.9487   14.5585      7.3689
     209603_at 211864_s_at 212344_at 212583_at 212956_at 214164_x_at
[1,]   10.5793     10.7931    9.2335    6.8476   13.3600     12.6474
[2,]   10.5772      9.0349    7.4051    6.8369   13.2925     11.7852
[3,]   11.1181     10.4934    8.4941    7.3452   12.3582     12.7464
     214612_x_at 215867_x_at 216092_s_at 218856_at 218862_at 219051_x_at
[1,]      6.0516     12.6194     10.4159    6.2115    9.8843      8.5236
[2,]      5.7915     11.5534      9.7648    8.8050   10.0105      8.9626
[3,]      3.4135     12.7285      8.3641    9.9478    9.0597     10.7458
     220034_at
[1,]    5.4109
[2,]    3.3392
[3,]    3.2968
     201555_at 201798_s_at 202683_s_at 203139_at 203628_at 203928_x_at
[1,]    9.9499     10.8345      8.8732    8.8140    9.4326     10.9860
[2,]    9.6616     11.4169      8.5511    8.7652    9.8046      8.1054
[3,]    9.4638     10.0144      8.5826    9.4426    7.9079      8.3152
     203963_at 204681_s_at 204825_at 204914_s_at 205225_at 205229_s_at
[1,]   12.4052      8.7098    7.9851      4.5686   13.8754      5.2668
[2,]   10.4033      8.1223    5.2744      6.6256   11.7217      7.1769
[3,]    9.8307      7.5006    5.9481      6.1259   10.9960      6.9284
     205347_s_at 205478_at 205696_s_at 205713_s_at 205751_at 205830_at
[1,]      8.3232    4.8386      9.0616      5.2933    5.4450    8.7696
[2,]      7.4873   11.9784      7.7288      4.3142    6.3482    7.0550
[3,]      8.2573   12.5884      7.1560      4.5240    6.0619    6.8984
     206401_s_at 208670_s_at 208712_at 208893_s_at 209173_at 209560_s_at
[1,]     10.6463      8.8319   10.8225      7.6049   13.2041      7.6698
[2,]      8.2532      9.8519    9.8721      8.9154   11.3631     11.5012
[3,]      7.4477      9.3521   10.2362      9.1121   11.1800      7.7658
     209603_at 211864_s_at 212344_at 212583_at 212956_at 214164_x_at
[1,]   11.9790      9.2348   11.6005    7.5912   13.5201     12.7392
[2,]   10.8744     10.1938    8.1512    7.5112   12.5480     10.9092
[3,]    8.0211      8.4931    8.0329    4.6920   11.2917     10.6696
     214612_x_at 215867_x_at 216092_s_at 218856_at 218862_at 219051_x_at
[1,]      6.2012     12.5744     10.6963    6.8392   10.4625      9.5138
[2,]      7.0485     11.0575      9.3780   10.2503    9.8143      5.3641
[3,]      5.5564     11.0769      9.3840   10.6432    9.3484      7.1097
     220034_at
[1,]    6.6028
[2,]    5.8614
[3,]    7.9160
[1] "numgenes selected:37"
[1] "test acc:0.77"
[1] "test AUC acc:0.672549019607843"
[1] "10 fold train93.0769230769231"
[1] "confusion matrix train 10 fold"
          nci_y
pred10fold  1  2
         1 33  1
         2  0 96
[1] "confusion matrix test"
         test_y
pred_test  1  2
        1  8 16
        2  7 69
[1] "train acc:0.992307692307692"
[1] "confusion matrix train"
          nci_y
pred_train  1  2
         1 33  1
         2  0 96
[1] "DS index stage 1"
[1] 0.38
[1] "KI index stage 1"
[1] 0.3795824
[[1]]
 [1] "var2667"  "var3155"  "var3455"  "var3490"  "var4352"  "var4752" 
 [7] "var4874"  "var5927"  "var8667"  "var9093"  "var12339" "var13543"
[13] "var15240" "var15464" "var18415"

[[2]]
 [1] "var1083"  "var1326"  "var2211"  "var2667"  "var3155"  "var4208" 
 [7] "var4352"  "var4756"  "var4874"  "var8166"  "var8207"  "var11253"
[13] "var11968" "var15464" "var18226"

[[3]]
 [1] "var4441"  "var4756"  "var5005"  "var5223"  "var5240"  "var5278" 
 [7] "var5357"  "var5927"  "var8388"  "var8667"  "var9052"  "var11729"
[13] "var13990" "var18220" "var19398"

[[4]]
 [1] "var1083"  "var2667"  "var3155"  "var4208"  "var4352"  "var4756" 
 [7] "var4874"  "var5223"  "var5927"  "var8166"  "var8207"  "var11253"
[13] "var11968" "var15464" "var18226"

[[5]]
 [1] "var1083"  "var2667"  "var3155"  "var3455"  "var3490"  "var4352" 
 [7] "var4752"  "var5927"  "var8667"  "var9093"  "var12339" "var13543"
[13] "var15240" "var15464" "var18415"


 Iteration 1 :  Optimal value:  124.4 
 Optimal List:   var3155,var4874,var4756,var2667,var1083,var3490,var5278,var4352,var2211,var13543,var4208,var8388,var8207,var9093,var13990 

 Iteration 2 :  Optimal value:  127.6 
 Optimal List:   var4441,var3155,var4874,var2667,var8388,var4756,var8667,var1083,var2211,var5927,var8166,var15240,var9093,var4352,var3490 

 Iteration 3 :  Optimal value:  122 
 Optimal List:   var2667,var5927,var4756,var1083,var4352,var4752,var3490,var19398,var12339,var3155,var8667,var5240,var13543,var5278,var11968 

 Iteration 4 :  Optimal value:  106.4 
 Optimal List:   var2667,var3155,var5927,var1083,var4208,var4352,var4874,var3490,var8667,var8166,var2211,var9052,var4756,var15464,var3455 

 Iteration 5 :  Optimal value:  112.8 
 Optimal List:   var3155,var2667,var4756,var4352,var5357,var1083,var11968,var5927,var8667,var4874,var4752,var15240,var15464,var11729,var5005 

 Iteration 6 :  Optimal value:  115.6 
 Optimal List:   var4352,var3155,var2667,var4874,var8207,var1083,var5927,var5223,var4752,var9093,var3455,var4208,var11729,var15464,var2211 

 Iteration 7 :  Optimal value:  108.8 
 Optimal List:   var2667,var1083,var3155,var4352,var4208,var4756,var5927,var1326,var4874,var18220,var8667,var8207,var19398,var5223,var9052 

 Iteration 8 :  Optimal value:  104.8 
 Optimal List:   var2667,var3155,var1083,var5223,var4352,var4752,var4756,var8667,var5927,var8207,var3490,var8166,var11253,var9093,var2211 

 Iteration 9 :  Optimal value:  107.2 
 Optimal List:   var1083,var4756,var4352,var2667,var3155,var3455,var5223,var5927,var4874,var5278,var18220,var3490,var8667,var4208,var15464 

 Iteration 10 :  Optimal value:  106.8 
 Optimal List:   var2667,var1083,var3155,var4352,var4756,var4752,var8667,var4874,var3455,var15464,var5927,var8388,var18220,var13543,var5223 

 Iteration 11 :  Optimal value:  105.6 
 Optimal List:   var3155,var4756,var1083,var4352,var2667,var5927,var3490,var9093,var4874,var5223,var8667,var8166,var15240,var12339,var3455 

 Iteration 12 :  Optimal value:  103.2 
 Optimal List:   var2667,var3155,var1083,var4352,var4208,var4752,var4756,var5927,var4874,var12339,var15464,var8166,var11968,var8207,var3490 

 Iteration 13 :  Optimal value:  99.6 
 Optimal List:   var1083,var2667,var3155,var4756,var5223,var4352,var3455,var5927,var4874,var3490,var15240,var12339,var8667,var15464,var5240 

 Iteration 14 :  Optimal value:  104.4 
 Optimal List:   var1083,var2667,var3155,var4352,var4208,var4756,var5927,var4874,var8667,var18220,var5357,var11253,var15240,var12339,var5278 

 Iteration 15 :  Optimal value:  102.8 
 Optimal List:   var3155,var2667,var1083,var3490,var4352,var4756,var4752,var5927,var5223,var4874,var8166,var8388,var11729,var15464,var18220 

 Iteration 16 :  Optimal value:  99.6 
 Optimal List:   var2667,var1083,var3155,var4756,var4352,var4874,var4752,var5927,var8667,var4208,var11968,var13543,var5240,var15464,var3490 

 Iteration 17 :  Optimal value:  99.2 
 Optimal List:   var2667,var3155,var1083,var4352,var4756,var5927,var4874,var4208,var8667,var3455,var9093,var11253,var3490,var15464,var19398 

 Iteration 18 :  Optimal value:  98.8 
 Optimal List:   var1083,var3155,var2667,var4352,var4208,var4874,var4756,var3490,var5927,var8667,var12339,var11968,var15240,var15464,var11729 

 Iteration 19 :  Optimal value:  99.2 
 Optimal List:   var2667,var3155,var1083,var4352,var4756,var3490,var4874,var5927,var8667,var8166,var12339,var13543,var8207,var11253,var11729 

 Iteration 20 :  Optimal value:  98.8 
 Optimal List:   var2667,var3155,var1083,var4352,var4756,var5927,var4874,var4752,var3455,var8667,var8207,var9093,var11968,var15464,var15240 

 Iteration 21 :  Optimal value:  100.4 
 Optimal List:   var2667,var1083,var3155,var4352,var4756,var5927,var5223,var8667,var4874,var4208,var12339,var8166,var11729,var15464,var8207 

 Iteration 22 :  Optimal value:  99.6 
 Optimal List:   var2667,var3155,var1083,var4352,var4756,var5223,var5927,var4874,var8667,var4208,var11253,var8207,var3455,var15464,var18415 

 Iteration 23 :  Optimal value:  99.6 
 Optimal List:   var1083,var2667,var3155,var4352,var4756,var8667,var5927,var4752,var4874,var12339,var8207,var11253,var9093,var15464,var18226 

 Iteration 24 :  Optimal value:  97.6 
 Optimal List:   var2667,var1083,var3155,var4352,var4756,var4752,var5927,var4874,var8667,var4208,var12339,var8207,var15240,var15464,var13543 

 Iteration 25 :  Optimal value:  97.2 
 Optimal List:   var1083,var2667,var3155,var4352,var4756,var5927,var4874,var5223,var8667,var8166,var12339,var11253,var11968,var15464,var8207 

 Iteration 26 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4352,var3455,var4756,var4874,var5927,var8667,var12339,var8166,var9093,var2211,var15464,var5278 

 Iteration 27 :  Optimal value:  95.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4756,var4352,var4874,var5927,var8667,var9093,var8207,var12339,var4752,var15464,var18415 

 Iteration 28 :  Optimal value:  97.2 
 Optimal List:   var1083,var3155,var2667,var4352,var4756,var4752,var4874,var5927,var8667,var8166,var8207,var13543,var15240,var15464,var5005 

 Iteration 29 :  Optimal value:  96.8 
 Optimal List:   var2667,var1083,var3155,var4352,var3455,var4874,var4756,var5927,var8667,var8166,var8207,var9093,var13543,var15464,var18415 

 Iteration 30 :  Optimal value:  96.4 
 Optimal List:   var2667,var1083,var3155,var4352,var4756,var3490,var4874,var5927,var8667,var9093,var4752,var13543,var11968,var15464,var15240 

 Iteration 31 :  Optimal value:  95.2 
 Optimal List:   var1083,var2667,var3155,var4352,var3455,var4756,var4874,var5927,var8667,var8166,var4752,var11253,var15240,var15464,var4208 

 Iteration 32 :  Optimal value:  96 
 Optimal List:   var1083,var2667,var3155,var4352,var4756,var3455,var4874,var5927,var8667,var8166,var8207,var11253,var11968,var15464,var2211 

 Iteration 33 :  Optimal value:  96.4 
 Optimal List:   var2667,var1083,var3155,var4352,var4756,var3455,var4874,var5927,var8667,var9093,var8166,var13543,var11968,var15464,var18415 

 Iteration 34 :  Optimal value:  96 
 Optimal List:   var2667,var1083,var3155,var4352,var3455,var4756,var4874,var5927,var8667,var4752,var12339,var11253,var13543,var15464,var18226 

 Iteration 35 :  Optimal value:  96 
 Optimal List:   var1083,var2667,var3155,var4352,var4756,var4208,var4874,var5927,var8667,var8166,var9093,var12339,var11968,var15464,var5278 

 Iteration 36 :  Optimal value:  95.6 
 Optimal List:   var1083,var2667,var3155,var4352,var4756,var3490,var4874,var5927,var8667,var8166,var12339,var11253,var11968,var15464,var18226 

 Iteration 37 :  Optimal value:  95.6 
 Optimal List:   var1083,var2667,var3155,var4352,var4756,var4208,var4874,var5927,var8667,var8166,var8207,var13543,var11968,var15464,var4752 

 Iteration 38 :  Optimal value:  95.6 
 Optimal List:   var1083,var2667,var3155,var4352,var4756,var3490,var4874,var5927,var8667,var8166,var12339,var13543,var15240,var15464,var18226 

 Iteration 39 :  Optimal value:  95.6 
 Optimal List:   var1083,var2667,var3155,var4352,var4756,var4208,var4874,var5927,var8667,var8166,var9093,var11253,var13543,var15464,var4752 

 Iteration 40 :  Optimal value:  95.6 
 Optimal List:   var1083,var2667,var3155,var4352,var4756,var3490,var4874,var5927,var8667,var8166,var8207,var13543,var15240,var15464,var18226 

 Iteration 41 :  Optimal value:  95.6 
 Optimal List:   var1083,var2667,var3155,var4352,var4756,var4208,var4874,var5927,var8667,var8166,var4752,var11253,var15240,var15464,var9093 

 Iteration 42 :  Optimal value:  95.6 
 Optimal List:   var1083,var2667,var3155,var4352,var4756,var3490,var4874,var5927,var8667,var8166,var8207,var9093,var15240,var15464,var18226 

 Iteration 43 :  Optimal value:  95.6 
 Optimal List:   var1083,var2667,var3155,var4352,var4756,var4208,var4874,var5927,var8667,var8166,var8207,var11253,var11968,var15464,var18415 

 Iteration 44 :  Optimal value:  95.6 
 Optimal List:   var1083,var2667,var3155,var4352,var4756,var3490,var4874,var5927,var8667,var8166,var8207,var11253,var11968,var15464,var18226 

 Iteration 45 :  Optimal value:  95.6 
 Optimal List:   var1083,var2667,var3155,var4352,var4756,var3490,var4874,var5927,var8667,var8166,var4752,var13543,var15240,var15464,var18226 

 Iteration 46 :  Optimal value:  95.6 
 Optimal List:   var1083,var2667,var3155,var4352,var4756,var3490,var4874,var5927,var8667,var9093,var12339,var11253,var11968,var15464,var18415 

 Iteration 47 :  Optimal value:  95.6 
 Optimal List:   var1083,var2667,var3155,var4352,var4756,var3490,var4874,var5927,var8667,var8166,var8207,var13543,var3455,var15464,var18226 

 Iteration 48 :  Optimal value:  95.6 
 Optimal List:   var1083,var2667,var3155,var4352,var4756,var3490,var4874,var5927,var8667,var8166,var8207,var13543,var15240,var15464,var18226 

 Iteration 49 :  Optimal value:  95.6 
 Optimal List:   var1083,var2667,var3155,var4352,var4756,var3490,var4874,var5927,var8667,var8166,var8207,var13543,var15240,var15464,var11968 

 Iteration 50 :  Optimal value:  95.6 
 Optimal List:   var1083,var2667,var3155,var4352,var4756,var4208,var4874,var5927,var8667,var8166,var12339,var11253,var15240,var15464,var18415 

 Iteration 51 :  Optimal value:  95.6 
 Optimal List:   var1083,var2667,var3155,var4352,var4756,var3490,var4874,var5927,var8667,var8166,var12339,var13543,var15240,var15464,var18226 
[1] "test acc rank aggreg CE:0.76"
[1] "test AUC acc rank aggreg CE:0.72156862745098"
[1] "10 fold train rank aggreg res CE80.7692307692308"
[1] "confusion matrix train 10 fold rank aggreg CE"
            nci_y
pred10foldRA  1  2
           1 26  3
           2  7 94
[1] "Num itr RA CE"
[1] 51
[1] "Test BER aggreg CE is"
[1] 0.7215686

 Iteration 1 :  Optimal value:  154 
 Optimal List:   var4352,var4756,var19398,var18415,var8667,var11968,var2667,var3155,var1326,var1083,var5278,var8388,var5357,var8207,var5927 

 Iteration 2 :  Optimal value:  151.6 
 Optimal List:   var4352,var8166,var13543,var3155,var18226,var4874,var4441,var5005,var5357,var5927,var4756,var1083,var15464,var8388,var11729 

 Iteration 3 :  Optimal value:  144.8 
 Optimal List:   var4352,var1083,var1326,var5927,var8667,var4441,var5240,var9093,var18220,var4756,var2667,var12339,var4752,var11968,var3455 

 Iteration 4 :  Optimal value:  148 
 Optimal List:   var4756,var1083,var18415,var2667,var3155,var9052,var5357,var19398,var11253,var4874,var4752,var13990,var2211,var15240,var5005 

 Iteration 5 :  Optimal value:  148.4 
 Optimal List:   var4352,var3155,var4208,var12339,var3490,var9052,var4752,var1083,var8388,var5357,var13543,var15464,var5005,var5278,var18415 

 Iteration 6 :  Optimal value:  145.2 
 Optimal List:   var4352,var2667,var19398,var4441,var8667,var11968,var4756,var3155,var1326,var1083,var5278,var5357,var8388,var8207,var5927 

 Iteration 7 :  Optimal value:  143.6 
 Optimal List:   var4352,var4756,var19398,var5927,var8667,var11968,var2667,var3155,var1326,var1083,var5278,var5357,var8388,var8207,var4441 

 Iteration 8 :  Optimal value:  139.6 
 Optimal List:   var1083,var2667,var19398,var4441,var8667,var11968,var4352,var3155,var1326,var4756,var5278,var5357,var8388,var8207,var5927 

 Iteration 9 :  Optimal value:  140.4 
 Optimal List:   var1083,var2667,var19398,var4441,var8667,var11968,var4352,var3155,var1326,var5278,var4756,var5357,var8388,var8207,var5927 

 Iteration 10 :  Optimal value:  135.2 
 Optimal List:   var4352,var1083,var18415,var2667,var3155,var9052,var5357,var4756,var11253,var4874,var4752,var13990,var2211,var15240,var11729 

 Iteration 11 :  Optimal value:  143.2 
 Optimal List:   var4756,var4352,var19398,var5927,var8667,var11968,var2667,var3155,var11253,var1083,var5278,var5357,var5005,var8207,var4441 

 Iteration 12 :  Optimal value:  136 
 Optimal List:   var4352,var1083,var4874,var2667,var3155,var9052,var13990,var4756,var11253,var18415,var15240,var5357,var2211,var4752,var5005 

 Iteration 13 :  Optimal value:  136 
 Optimal List:   var4352,var1083,var4874,var2667,var3155,var9052,var13990,var4756,var11253,var18415,var15240,var5357,var2211,var4752,var5005 

 Iteration 14 :  Optimal value:  129.2 
 Optimal List:   var4352,var2667,var1083,var4441,var8667,var11968,var4756,var3155,var1326,var5927,var5278,var13990,var8388,var8207,var19398 

 Iteration 15 :  Optimal value:  129.2 
 Optimal List:   var4352,var2667,var1083,var4441,var8667,var11968,var4756,var3155,var1326,var5927,var5278,var13990,var8388,var8207,var19398 

 Iteration 16 :  Optimal value:  128 
 Optimal List:   var4352,var2667,var3155,var4441,var8667,var11968,var4756,var1083,var1326,var5927,var5278,var13990,var8388,var8207,var19398 

 Iteration 17 :  Optimal value:  128 
 Optimal List:   var4352,var2667,var3155,var4441,var8667,var11968,var4756,var1083,var1326,var5927,var5278,var13990,var8388,var8207,var19398 

 Iteration 18 :  Optimal value:  129.2 
 Optimal List:   var4352,var2667,var1083,var4441,var8667,var11968,var4756,var3155,var1326,var5927,var5278,var13990,var8388,var8207,var19398 

 Iteration 19 :  Optimal value:  128 
 Optimal List:   var4756,var1083,var4874,var2667,var3155,var9052,var13990,var4352,var11253,var8667,var15240,var8207,var2211,var4752,var18415 

 Iteration 20 :  Optimal value:  128 
 Optimal List:   var4352,var2667,var3155,var4441,var8667,var11968,var4756,var1083,var1326,var5927,var5278,var13990,var8388,var8207,var19398 

 Iteration 21 :  Optimal value:  127.2 
 Optimal List:   var4352,var2667,var1083,var4441,var8667,var11968,var4756,var3155,var1326,var5927,var5357,var8166,var8388,var8207,var19398 

 Iteration 22 :  Optimal value:  126 
 Optimal List:   var4352,var2667,var3155,var4441,var8667,var11968,var4756,var1083,var1326,var5927,var5357,var8166,var8388,var8207,var19398 

 Iteration 23 :  Optimal value:  126 
 Optimal List:   var4352,var2667,var3155,var4441,var8667,var11968,var4756,var1083,var1326,var5927,var5357,var8166,var8388,var8207,var19398 

 Iteration 24 :  Optimal value:  118.4 
 Optimal List:   var4352,var2667,var3155,var4441,var8667,var4874,var4756,var1083,var1326,var5927,var5357,var8166,var8388,var8207,var19398 

 Iteration 25 :  Optimal value:  120.4 
 Optimal List:   var4756,var1083,var4874,var2667,var3155,var4441,var13990,var4352,var8667,var5927,var15240,var5357,var2211,var4752,var18415 

 Iteration 26 :  Optimal value:  121.2 
 Optimal List:   var1083,var2667,var3155,var4441,var8667,var11968,var4756,var4352,var1326,var5927,var5357,var8166,var8388,var8207,var19398 

 Iteration 27 :  Optimal value:  121.2 
 Optimal List:   var1083,var2667,var3155,var4441,var8667,var11968,var4756,var4352,var1326,var5927,var5357,var8166,var8388,var8207,var19398 

 Iteration 28 :  Optimal value:  121.2 
 Optimal List:   var1083,var2667,var3155,var4441,var8667,var11968,var4756,var4352,var1326,var5927,var5357,var8166,var8388,var8207,var19398 

 Iteration 29 :  Optimal value:  119.2 
 Optimal List:   var3155,var2667,var1083,var4441,var8667,var3455,var4756,var4352,var5357,var5927,var5278,var2211,var8388,var8207,var19398 

 Iteration 30 :  Optimal value:  119.2 
 Optimal List:   var3155,var2667,var1083,var4441,var8667,var3455,var4756,var4352,var5357,var5927,var5278,var2211,var8388,var8207,var19398 

 Iteration 31 :  Optimal value:  121.2 
 Optimal List:   var1083,var2667,var3155,var4441,var8667,var11968,var4756,var4352,var1326,var5927,var5278,var8166,var8388,var8207,var19398 

 Iteration 32 :  Optimal value:  121.2 
 Optimal List:   var1083,var2667,var3155,var4441,var8667,var11968,var4756,var4352,var1326,var5927,var5278,var8166,var8388,var8207,var19398 

 Iteration 33 :  Optimal value:  121.6 
 Optimal List:   var4756,var2667,var1083,var4441,var8667,var3455,var4352,var3155,var8207,var5927,var5278,var2211,var8388,var15240,var19398 

 Iteration 34 :  Optimal value:  118.4 
 Optimal List:   var3155,var2667,var1083,var4441,var8667,var3455,var4352,var4756,var5357,var5927,var5278,var2211,var8388,var4752,var19398 

 Iteration 35 :  Optimal value:  118.4 
 Optimal List:   var3155,var2667,var1083,var4441,var8667,var3455,var4352,var4756,var5357,var5927,var5278,var2211,var8388,var4752,var19398 

 Iteration 36 :  Optimal value:  118.8 
 Optimal List:   var4756,var2667,var1083,var4441,var8667,var3455,var4352,var3155,var5357,var5927,var4874,var2211,var8388,var4752,var19398 

 Iteration 37 :  Optimal value:  120.8 
 Optimal List:   var4756,var2667,var1083,var4441,var8667,var3455,var4352,var3155,var5357,var5927,var4208,var2211,var8388,var4752,var19398 

 Iteration 38 :  Optimal value:  120.8 
 Optimal List:   var4756,var2667,var1083,var4441,var8667,var3455,var4352,var3155,var5357,var5927,var4208,var2211,var8388,var4752,var19398 

 Iteration 39 :  Optimal value:  120.8 
 Optimal List:   var4756,var2667,var1083,var4441,var8667,var3455,var4352,var3155,var5357,var5927,var4208,var2211,var8388,var4752,var19398 

 Iteration 40 :  Optimal value:  120 
 Optimal List:   var4352,var2667,var1083,var4441,var1326,var3490,var4756,var3155,var8667,var5927,var5278,var4752,var8388,var8207,var19398 

 Iteration 41 :  Optimal value:  120 
 Optimal List:   var4352,var2667,var1083,var4441,var1326,var3490,var4756,var3155,var8667,var5927,var5278,var4752,var8388,var8207,var19398 

 Iteration 42 :  Optimal value:  119.6 
 Optimal List:   var4756,var2667,var1083,var4441,var1326,var3490,var4352,var3155,var8667,var5927,var5278,var4752,var8388,var8207,var19398 

 Iteration 43 :  Optimal value:  118.4 
 Optimal List:   var4352,var2667,var1083,var4441,var8667,var3455,var4756,var3155,var5223,var5927,var4208,var2211,var8388,var4752,var19398 

 Iteration 44 :  Optimal value:  118.4 
 Optimal List:   var4352,var2667,var1083,var4441,var8667,var3455,var4756,var3155,var5223,var5927,var4208,var2211,var8388,var4752,var19398 

 Iteration 45 :  Optimal value:  118.4 
 Optimal List:   var4352,var2667,var1083,var4441,var8667,var3455,var4756,var3155,var5223,var5927,var4208,var2211,var8388,var4752,var19398 

 Iteration 46 :  Optimal value:  117.2 
 Optimal List:   var1083,var2667,var4352,var4441,var1326,var3490,var4756,var3155,var8667,var5927,var4208,var2211,var8388,var8207,var19398 

 Iteration 47 :  Optimal value:  117.2 
 Optimal List:   var1083,var2667,var4352,var4441,var1326,var3490,var4756,var3155,var8667,var5927,var4208,var2211,var8388,var8207,var19398 

 Iteration 48 :  Optimal value:  118 
 Optimal List:   var3155,var2667,var1083,var4352,var8667,var3455,var5278,var5357,var4756,var5927,var4441,var2211,var13543,var5240,var19398 

 Iteration 49 :  Optimal value:  117.6 
 Optimal List:   var4352,var2667,var1083,var4441,var8667,var3455,var4756,var3155,var5927,var5223,var4208,var2211,var8388,var4752,var19398 

 Iteration 50 :  Optimal value:  115.6 
 Optimal List:   var3155,var2667,var1083,var4441,var1326,var3490,var4756,var4352,var8667,var5927,var4208,var2211,var8388,var8207,var19398 

 Iteration 51 :  Optimal value:  115.6 
 Optimal List:   var3155,var2667,var1083,var4441,var1326,var3490,var4756,var4352,var8667,var5927,var4208,var2211,var8388,var8207,var19398 

 Iteration 52 :  Optimal value:  114 
 Optimal List:   var1083,var2667,var4352,var4441,var3155,var3455,var4756,var5357,var8667,var5927,var5278,var4752,var8388,var8207,var19398 

 Iteration 53 :  Optimal value:  114 
 Optimal List:   var1083,var2667,var4352,var4441,var3155,var3455,var4756,var5357,var8667,var5927,var5278,var4752,var8388,var8207,var19398 

 Iteration 54 :  Optimal value:  114 
 Optimal List:   var1083,var2667,var4352,var4441,var3155,var3455,var4756,var5357,var8667,var5927,var5278,var4752,var8388,var8207,var19398 

 Iteration 55 :  Optimal value:  114 
 Optimal List:   var1083,var2667,var4352,var4441,var3155,var3455,var4756,var5357,var8667,var5927,var5278,var4752,var8388,var8207,var19398 

 Iteration 56 :  Optimal value:  114 
 Optimal List:   var1083,var2667,var4352,var4441,var3155,var3455,var4756,var5357,var8667,var5927,var5278,var4752,var8388,var8207,var19398 

 Iteration 57 :  Optimal value:  114 
 Optimal List:   var1083,var2667,var4352,var4441,var3155,var3455,var4756,var5357,var8667,var5927,var5278,var4752,var8388,var8207,var19398 

 Iteration 58 :  Optimal value:  114 
 Optimal List:   var1083,var2667,var4352,var4441,var3155,var3455,var4756,var5357,var8667,var5927,var5278,var4752,var8388,var8207,var19398 

 Iteration 59 :  Optimal value:  112.4 
 Optimal List:   var4352,var2667,var1083,var3155,var8667,var3455,var4756,var4441,var5223,var5927,var4208,var2211,var8388,var15464,var19398 

 Iteration 60 :  Optimal value:  112.4 
 Optimal List:   var4352,var2667,var1083,var3155,var8667,var3455,var4756,var4441,var5223,var5927,var4208,var2211,var8388,var15464,var19398 

 Iteration 61 :  Optimal value:  111.2 
 Optimal List:   var1083,var2667,var4352,var4874,var5223,var3490,var4756,var3155,var8667,var5927,var5278,var13990,var8388,var8207,var19398 

 Iteration 62 :  Optimal value:  110 
 Optimal List:   var1083,var2667,var4352,var3155,var8667,var3455,var4756,var4441,var5223,var5927,var4208,var2211,var8388,var15464,var19398 

 Iteration 63 :  Optimal value:  110 
 Optimal List:   var1083,var2667,var4352,var3155,var8667,var3455,var4756,var4441,var5223,var5927,var4208,var2211,var8388,var15464,var19398 

 Iteration 64 :  Optimal value:  108.8 
 Optimal List:   var3155,var2667,var1083,var4352,var8667,var3455,var4756,var4441,var5223,var5927,var4874,var2211,var8388,var15464,var19398 

 Iteration 65 :  Optimal value:  109.2 
 Optimal List:   var1083,var2667,var4352,var4874,var5223,var3490,var4756,var3155,var8667,var5927,var4752,var13990,var8388,var8207,var19398 

 Iteration 66 :  Optimal value:  109.2 
 Optimal List:   var1083,var2667,var4352,var4874,var5223,var3490,var4756,var3155,var8667,var5927,var4752,var13990,var8388,var8207,var19398 

 Iteration 67 :  Optimal value:  109.2 
 Optimal List:   var1083,var2667,var4352,var5927,var3155,var3455,var4756,var5357,var8667,var4208,var4874,var13990,var8388,var8207,var19398 

 Iteration 68 :  Optimal value:  109.6 
 Optimal List:   var1083,var2667,var4352,var3155,var8667,var3455,var4756,var4441,var5223,var5927,var4874,var2211,var8388,var4752,var19398 

 Iteration 69 :  Optimal value:  108 
 Optimal List:   var1083,var2667,var4352,var3155,var8667,var3455,var4756,var4441,var5223,var5927,var4874,var2211,var8388,var15464,var19398 

 Iteration 70 :  Optimal value:  108.4 
 Optimal List:   var1083,var2667,var3155,var4352,var5223,var3455,var4756,var4441,var8667,var5927,var4208,var2211,var8388,var4752,var19398 

 Iteration 71 :  Optimal value:  108 
 Optimal List:   var1083,var2667,var4352,var3155,var5223,var3455,var4756,var4441,var8667,var5927,var4208,var2211,var8388,var15464,var19398 

 Iteration 72 :  Optimal value:  108 
 Optimal List:   var1083,var2667,var4352,var3155,var8667,var3455,var4756,var4441,var5223,var5927,var4874,var2211,var8388,var15464,var19398 

 Iteration 73 :  Optimal value:  108 
 Optimal List:   var1083,var2667,var4352,var3155,var5223,var3455,var4756,var4441,var8667,var5927,var4208,var2211,var8388,var15464,var19398 

 Iteration 74 :  Optimal value:  108 
 Optimal List:   var1083,var2667,var4352,var3155,var5223,var3455,var4756,var4441,var8667,var5927,var4208,var2211,var8388,var15464,var19398 

 Iteration 75 :  Optimal value:  107.6 
 Optimal List:   var1083,var2667,var3155,var4352,var5223,var3455,var4756,var4441,var5927,var8667,var4208,var2211,var8388,var4752,var19398 

 Iteration 76 :  Optimal value:  107.2 
 Optimal List:   var1083,var2667,var3155,var4352,var5223,var3455,var4756,var4441,var8667,var5927,var4208,var2211,var9093,var4752,var8388 

 Iteration 77 :  Optimal value:  107.2 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5357,var8667,var5927,var9093,var2211,var5278,var13543,var19398 

 Iteration 78 :  Optimal value:  106 
 Optimal List:   var1083,var2667,var4352,var4208,var3155,var3455,var4756,var4441,var8667,var5927,var4874,var2211,var8388,var15464,var19398 

 Iteration 79 :  Optimal value:  106 
 Optimal List:   var1083,var2667,var4352,var4208,var3155,var3455,var4756,var4441,var8667,var5927,var4874,var2211,var8388,var15464,var19398 

 Iteration 80 :  Optimal value:  106 
 Optimal List:   var1083,var2667,var4352,var4208,var3155,var3455,var4756,var4441,var8667,var5927,var4874,var2211,var8388,var15464,var19398 

 Iteration 81 :  Optimal value:  105.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5357,var8667,var5927,var9093,var2211,var5278,var15464,var19398 

 Iteration 82 :  Optimal value:  105.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5357,var8667,var5927,var9093,var2211,var5278,var15464,var19398 

 Iteration 83 :  Optimal value:  105.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5357,var8667,var5927,var9093,var2211,var5278,var15464,var19398 

 Iteration 84 :  Optimal value:  105.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5357,var8667,var5927,var9093,var2211,var5278,var15464,var19398 

 Iteration 85 :  Optimal value:  105.6 
 Optimal List:   var1083,var2667,var3155,var4352,var5223,var3455,var4756,var4441,var5927,var8667,var4874,var2211,var8388,var4752,var19398 

 Iteration 86 :  Optimal value:  105.6 
 Optimal List:   var1083,var2667,var3155,var4352,var5223,var3455,var4756,var4441,var5927,var8667,var4874,var2211,var8388,var4752,var19398 

 Iteration 87 :  Optimal value:  105.6 
 Optimal List:   var1083,var2667,var3155,var4756,var4352,var3455,var4208,var5357,var8667,var5927,var9093,var2211,var5278,var15464,var19398 

 Iteration 88 :  Optimal value:  105.6 
 Optimal List:   var1083,var2667,var3155,var4756,var4352,var3455,var4208,var4441,var8667,var5927,var9093,var2211,var5278,var15464,var19398 

 Iteration 89 :  Optimal value:  105.2 
 Optimal List:   var1083,var2667,var4352,var3455,var3155,var4208,var4756,var4441,var8667,var5927,var4874,var2211,var8388,var15464,var19398 

 Iteration 90 :  Optimal value:  104.4 
 Optimal List:   var1083,var2667,var4352,var4208,var3155,var3455,var4756,var4441,var8667,var5927,var4874,var13543,var8388,var15464,var19398 

 Iteration 91 :  Optimal value:  105.2 
 Optimal List:   var1083,var2667,var4352,var3455,var3155,var4208,var4756,var4441,var8667,var5927,var4874,var2211,var8388,var15464,var19398 

 Iteration 92 :  Optimal value:  105.6 
 Optimal List:   var1083,var2667,var3155,var4756,var4352,var3455,var4208,var4441,var8667,var5927,var9093,var2211,var8388,var15464,var19398 

 Iteration 93 :  Optimal value:  104.4 
 Optimal List:   var1083,var2667,var4352,var3155,var5223,var3455,var4756,var4441,var8667,var5927,var4874,var13543,var8388,var15464,var19398 

 Iteration 94 :  Optimal value:  105.2 
 Optimal List:   var1083,var2667,var3155,var4352,var5223,var4208,var4756,var4441,var8667,var5927,var3455,var13543,var8388,var15464,var19398 

 Iteration 95 :  Optimal value:  105.6 
 Optimal List:   var1083,var2667,var3155,var4756,var4352,var3455,var4208,var4441,var8667,var5927,var9093,var2211,var8388,var15464,var19398 

 Iteration 96 :  Optimal value:  104.4 
 Optimal List:   var1083,var2667,var4352,var4208,var3155,var3455,var4756,var4441,var8667,var5927,var4874,var12339,var8388,var15464,var19398 

 Iteration 97 :  Optimal value:  104.8 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5357,var8667,var5927,var13543,var4752,var5278,var15464,var19398 

 Iteration 98 :  Optimal value:  104.8 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5357,var8667,var5927,var13543,var4752,var5278,var15464,var19398 

 Iteration 99 :  Optimal value:  104.8 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var4441,var8667,var5927,var13543,var4752,var5278,var15464,var19398 

 Iteration 100 :  Optimal value:  104 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var4441,var5927,var8667,var13543,var4752,var5278,var15464,var19398 

 Iteration 101 :  Optimal value:  104 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var4441,var5927,var8667,var13543,var4752,var5278,var15464,var19398 

 Iteration 102 :  Optimal value:  101.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var8667,var5927,var13543,var4752,var5278,var15464,var19398 

 Iteration 103 :  Optimal value:  101.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var8667,var5927,var13543,var4752,var5278,var15464,var19398 

 Iteration 104 :  Optimal value:  101.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var8667,var5927,var13543,var4752,var5278,var15464,var19398 

 Iteration 105 :  Optimal value:  98.8 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var8667,var5927,var4874,var4752,var5278,var15464,var19398 

 Iteration 106 :  Optimal value:  98.8 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var8667,var5927,var4874,var4752,var5278,var15464,var19398 

 Iteration 107 :  Optimal value:  98.8 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var8667,var5927,var4874,var4752,var5278,var15464,var19398 

 Iteration 108 :  Optimal value:  98.8 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var8667,var5927,var4874,var4752,var5278,var15464,var19398 

 Iteration 109 :  Optimal value:  98.8 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var8667,var5927,var4874,var4752,var1326,var15464,var19398 

 Iteration 110 :  Optimal value:  98.8 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var8667,var5927,var4874,var4752,var1326,var15464,var19398 

 Iteration 111 :  Optimal value:  98.8 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var8667,var5927,var4874,var4752,var1326,var15464,var19398 

 Iteration 112 :  Optimal value:  98.8 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var8667,var5927,var4874,var4752,var1326,var15464,var19398 

 Iteration 113 :  Optimal value:  98.8 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var8667,var5927,var4874,var4752,var1326,var15464,var19398 

 Iteration 114 :  Optimal value:  98.8 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var8667,var5927,var4874,var4752,var1326,var15464,var19398 

 Iteration 115 :  Optimal value:  98.8 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var8667,var5927,var4874,var4752,var1326,var15464,var19398 

 Iteration 116 :  Optimal value:  98.8 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var8667,var5927,var4874,var4752,var5278,var15464,var2211 

 Iteration 117 :  Optimal value:  98.8 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var8667,var5927,var4874,var4752,var5278,var15464,var2211 

 Iteration 118 :  Optimal value:  98.8 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var8667,var5927,var4874,var4752,var5278,var15464,var2211 

 Iteration 119 :  Optimal value:  98.8 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var8667,var5927,var4874,var4752,var5278,var15464,var2211 

 Iteration 120 :  Optimal value:  98.8 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var8667,var5927,var4874,var4752,var5278,var15464,var2211 

 Iteration 121 :  Optimal value:  98.8 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var8667,var5927,var4874,var4752,var5278,var15464,var2211 

 Iteration 122 :  Optimal value:  98.8 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var8667,var5927,var4874,var4752,var5278,var15464,var2211 

 Iteration 123 :  Optimal value:  98.8 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var8667,var5927,var4874,var4752,var5278,var15464,var2211 

 Iteration 124 :  Optimal value:  98.8 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var8667,var5927,var4874,var4752,var5278,var15464,var2211 

 Iteration 125 :  Optimal value:  98.8 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var8667,var5927,var4874,var4752,var5278,var15464,var2211 

 Iteration 126 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var8667,var5927,var4874,var4752,var12339,var15464,var2211 

 Iteration 127 :  Optimal value:  98.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var8667,var5927,var4874,var4752,var5278,var15464,var3490 

 Iteration 128 :  Optimal value:  98.8 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var8667,var5927,var4874,var4752,var5278,var15464,var2211 

 Iteration 129 :  Optimal value:  98.8 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var8667,var5927,var4874,var4752,var5278,var15464,var2211 

 Iteration 130 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var5278,var15464,var11253 

 Iteration 131 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var5278,var15464,var11253 

 Iteration 132 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var5278,var15464,var11253 

 Iteration 133 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var5278,var15464,var11253 

 Iteration 134 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var5278,var15464,var11253 

 Iteration 135 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var5278,var15464,var11253 

 Iteration 136 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var5278,var15464,var11253 

 Iteration 137 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var5278,var15464,var11253 

 Iteration 138 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var13543,var5278,var15464,var11253 

 Iteration 139 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var5278,var15464,var11253 

 Iteration 140 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var5278,var15464,var11253 

 Iteration 141 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var5278,var15464,var11253 

 Iteration 142 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var5278,var15464,var11253 

 Iteration 143 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var5278,var15464,var11253 

 Iteration 144 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var5278,var15464,var11253 

 Iteration 145 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var5278,var15464,var11253 

 Iteration 146 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var5278,var15464,var11253 

 Iteration 147 :  Optimal value:  97.2 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var4874,var5927,var8667,var5223,var4752,var5278,var15464,var2211 

 Iteration 148 :  Optimal value:  97.2 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var4874,var5927,var8667,var5223,var4752,var5278,var15464,var2211 

 Iteration 149 :  Optimal value:  97.2 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var4874,var5927,var8667,var5223,var4752,var5278,var15464,var2211 

 Iteration 150 :  Optimal value:  97.6 
 Optimal List:   var1083,var3155,var2667,var4208,var4352,var4756,var3455,var4874,var5927,var8667,var5223,var13543,var5278,var15464,var11253 

 Iteration 151 :  Optimal value:  96.8 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var4874,var5927,var8667,var5223,var4752,var5278,var15464,var11253 

 Iteration 152 :  Optimal value:  96.8 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var4874,var5927,var8667,var5223,var4752,var5278,var15464,var11253 

 Iteration 153 :  Optimal value:  96.8 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var4874,var5927,var8667,var5223,var4752,var5278,var15464,var11253 

 Iteration 154 :  Optimal value:  96.8 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var4874,var5927,var8667,var5223,var4752,var5278,var15464,var11253 

 Iteration 155 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var5278,var15464,var11253 

 Iteration 156 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var5278,var15464,var11253 

 Iteration 157 :  Optimal value:  97.6 
 Optimal List:   var1083,var3155,var2667,var3455,var4352,var4756,var4208,var5223,var5927,var8667,var4874,var13543,var5278,var15464,var11253 

 Iteration 158 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var5278,var15464,var11253 

 Iteration 159 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var5278,var15464,var11253 

 Iteration 160 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var5278,var15464,var11253 

 Iteration 161 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var5278,var15464,var11253 

 Iteration 162 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var5278,var15464,var11253 

 Iteration 163 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var5278,var15464,var11253 

 Iteration 164 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var5278,var15464,var11253 

 Iteration 165 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var5278,var15464,var11253 

 Iteration 166 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var5278,var15464,var11253 

 Iteration 167 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var5278,var15464,var11253 

 Iteration 168 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var5278,var15464,var11253 

 Iteration 169 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var5278,var15464,var11253 

 Iteration 170 :  Optimal value:  97.2 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var4874,var5927,var8667,var5223,var4752,var5278,var15464,var2211 

 Iteration 171 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var5278,var15464,var11253 

 Iteration 172 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var5278,var15464,var11253 

 Iteration 173 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var5278,var15464,var11253 

 Iteration 174 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var5278,var15464,var11253 

 Iteration 175 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var5278,var15464,var11253 

 Iteration 176 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var5278,var15464,var11253 

 Iteration 177 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var4874,var4756,var5223,var5927,var8667,var3455,var4752,var5278,var15464,var11253 

 Iteration 178 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var4874,var4756,var5223,var5927,var8667,var3455,var4752,var5278,var15464,var11253 

 Iteration 179 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var4874,var4756,var5223,var5927,var8667,var3455,var4752,var5278,var15464,var11253 

 Iteration 180 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var4874,var4756,var5223,var5927,var8667,var3455,var4752,var5278,var15464,var11253 

 Iteration 181 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var4874,var4756,var5223,var5927,var8667,var3455,var4752,var5278,var15464,var11253 

 Iteration 182 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var4874,var4756,var5223,var5927,var8667,var3455,var4752,var5278,var15464,var11253 

 Iteration 183 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var4874,var4756,var5223,var5927,var8667,var3455,var4752,var5278,var15464,var11253 

 Iteration 184 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var4874,var4756,var5223,var5927,var8667,var3455,var4752,var5278,var15464,var11253 

 Iteration 185 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var4874,var4756,var5223,var5927,var8667,var3455,var4752,var5278,var15464,var11253 

 Iteration 186 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var4874,var4756,var5223,var5927,var8667,var3455,var4752,var5278,var15464,var11253 

 Iteration 187 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var4874,var8667,var4752,var5278,var15464,var11253 

 Iteration 188 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var4874,var8667,var4752,var5278,var15464,var11253 

 Iteration 189 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var4874,var8667,var4752,var5278,var15464,var11253 

 Iteration 190 :  Optimal value:  97.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var4874,var8667,var4752,var5278,var15464,var11253 

 Iteration 191 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var9093,var15464,var11253 

 Iteration 192 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var3490,var8166,var15464,var11253 

 Iteration 193 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var3490,var8166,var15464,var11253 

 Iteration 194 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var3490,var8166,var15464,var11253 

 Iteration 195 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var3490,var8166,var15464,var11253 

 Iteration 196 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var3490,var8166,var15464,var11253 

 Iteration 197 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var3490,var8166,var15464,var11253 

 Iteration 198 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var3490,var8166,var15464,var11253 

 Iteration 199 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var3490,var8166,var15464,var11253 

 Iteration 200 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var3490,var11253,var15464,var8166 

 Iteration 201 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var3490,var8166,var15464,var11253 

 Iteration 202 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var8166,var15464,var9093 

 Iteration 203 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var3490,var11253,var15464,var8166 

 Iteration 204 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var8166,var15464,var9093 

 Iteration 205 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var3490,var11253,var15464,var8166 

 Iteration 206 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var8166,var15464,var9093 

 Iteration 207 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var8166,var15464,var9093 

 Iteration 208 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var4874,var8667,var3490,var11253,var15464,var8166 

 Iteration 209 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var4874,var8667,var3490,var11253,var15464,var8166 

 Iteration 210 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var4874,var8667,var3490,var11253,var15464,var8166 

 Iteration 211 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var8166,var15464,var9093 

 Iteration 212 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var3490,var8166,var15464,var9093 

 Iteration 213 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var3490,var5927,var4874,var8667,var5223,var11253,var15464,var8166 

 Iteration 214 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var4874,var8667,var3490,var11253,var15464,var8166 

 Iteration 215 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var4874,var8667,var3490,var11253,var15464,var8166 

 Iteration 216 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var8166,var15464,var9093 

 Iteration 217 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var4874,var8667,var4752,var8166,var15464,var11253 

 Iteration 218 :  Optimal value:  95.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var4874,var5927,var8667,var5223,var4752,var8166,var15464,var9093 

 Iteration 219 :  Optimal value:  95.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var4874,var5927,var8667,var5223,var4752,var8166,var15464,var9093 

 Iteration 220 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var3490,var11968,var15464,var9093 

 Iteration 221 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var4874,var8667,var3490,var11253,var15464,var8166 

 Iteration 222 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var3490,var8166,var15464,var9093 

 Iteration 223 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var4874,var8667,var3490,var8166,var15464,var11253 

 Iteration 224 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var8166,var15464,var9093 

 Iteration 225 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var3455,var4352,var4756,var5223,var5927,var4874,var8667,var3490,var8166,var15464,var11253 

 Iteration 226 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var4874,var8667,var4752,var8166,var15464,var9093 

 Iteration 227 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var8166,var15464,var9093 

 Iteration 228 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var3490,var8166,var15464,var9093 

 Iteration 229 :  Optimal value:  96 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var4874,var5927,var5223,var8667,var3490,var8166,var15464,var11253 

 Iteration 230 :  Optimal value:  96 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var4874,var5927,var5223,var8667,var3490,var8166,var15464,var11253 

 Iteration 231 :  Optimal value:  96 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var4874,var5927,var5223,var8667,var3490,var8166,var15464,var11253 

 Iteration 232 :  Optimal value:  96 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var4874,var5927,var4752,var8667,var3490,var8166,var15464,var11253 

 Iteration 233 :  Optimal value:  96 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var4874,var5927,var4752,var8667,var3490,var8166,var15464,var11253 

 Iteration 234 :  Optimal value:  96 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var4874,var5927,var4752,var8667,var3490,var8166,var15464,var11253 

 Iteration 235 :  Optimal value:  96 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var4874,var5927,var4752,var8667,var3490,var8166,var15464,var11253 

 Iteration 236 :  Optimal value:  96 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var4874,var5927,var4752,var8667,var3490,var8166,var15464,var11253 

 Iteration 237 :  Optimal value:  96 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var4874,var5927,var4752,var8667,var3490,var8166,var15464,var11253 

 Iteration 238 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var3490,var8166,var15464,var11253 

 Iteration 239 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var3490,var8166,var15464,var11253 

 Iteration 240 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var3490,var8166,var15464,var11253 

 Iteration 241 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var4874,var8667,var3490,var8166,var15464,var11253 

 Iteration 242 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var4874,var8667,var3490,var8166,var15464,var9093 

 Iteration 243 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var4874,var8667,var3490,var8166,var15464,var11253 

 Iteration 244 :  Optimal value:  95.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var4874,var5927,var8667,var5223,var3490,var8166,var15464,var11253 

 Iteration 245 :  Optimal value:  95.6 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var4874,var5927,var8667,var5223,var3490,var8166,var15464,var11253 

 Iteration 246 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var3490,var8166,var15464,var11253 

 Iteration 247 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var3490,var11253,var15464,var8166 

 Iteration 248 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var3490,var11253,var15464,var8166 

 Iteration 249 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var3490,var8166,var15464,var11253 

 Iteration 250 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var3490,var8166,var15464,var9093 

 Iteration 251 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var4874,var8667,var3490,var8166,var15464,var11253 

 Iteration 252 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var3490,var8166,var15464,var9093 

 Iteration 253 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var3490,var8166,var15464,var11253 

 Iteration 254 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var3490,var8166,var15464,var11253 

 Iteration 255 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var8166,var15464,var11253 

 Iteration 256 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var3490,var8166,var15464,var9093 

 Iteration 257 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var4874,var8667,var3490,var8166,var15464,var11253 

 Iteration 258 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var8166,var15464,var11253 

 Iteration 259 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var8166,var15464,var11253 

 Iteration 260 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var3490,var8166,var15464,var9093 

 Iteration 261 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var3490,var8166,var15464,var11253 

 Iteration 262 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var4874,var8667,var3490,var8166,var15464,var11253 

 Iteration 263 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var4874,var8667,var3490,var8166,var15464,var11253 

 Iteration 264 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var8166,var15464,var11253 

 Iteration 265 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var8166,var15464,var11253 

 Iteration 266 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var3490,var8166,var15464,var11253 

 Iteration 267 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var3490,var8166,var15464,var11253 

 Iteration 268 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var4752,var8166,var15464,var11253 

 Iteration 269 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var4874,var8667,var3490,var8166,var15464,var11253 

 Iteration 270 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var3490,var8166,var15464,var11253 

 Iteration 271 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var3490,var8166,var15464,var11253 

 Iteration 272 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var3490,var8166,var15464,var11253 

 Iteration 273 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var3490,var8166,var15464,var11253 

 Iteration 274 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var3490,var8166,var15464,var11253 

 Iteration 275 :  Optimal value:  96.4 
 Optimal List:   var1083,var2667,var3155,var4208,var4352,var3455,var4756,var5223,var5927,var8667,var4874,var3490,var8166,var15464,var11253 
[1] "test acc rank aggreg GA:0.76"
[1] "test AUC acc rank aggreg GA:0.694117647058824"
[1] "10 fold train rank aggreg res GA86.1538461538462"
[1] "confusion matrix train 10 fold rank aggreg GA"
            nci_y
pred10foldRA  1  2
           1 28  3
           2  5 94
[1] "Num itr RA GA"
[1] 276
[1] "Test BER aggreg GA is"
[1] 0.6941176
Warning messages:
1: In if (is.na(boostweight) == TRUE) { :
  the condition has length > 1 and only the first element will be used
2: In if (is.na(testm) == TRUE) { :
  the condition has length > 1 and only the first element will be used
3: In if (is.na(testclass) == TRUE) { :
  the condition has length > 1 and only the first element will be used
> 
> cma_feat_list<-colnames(trainm)
> 
> save(CMAres,file="CMAres.Rda")
> write.table(cma_feat_list,file="selected_cma_feat_list.txt",sep="t",row.names=FALSE)
> 
> # modtraindata=modtrain, modtestdata=modtest, blindtest=testacc, modtrainclass=nci_y, modtestclass=test_y
> #if(FALSE)
> {
+ trainm<-CMAres$modtraindata
+ testm<-CMAres$modtestdata
+ trainclass<-CMAres$modtrainclass
+ testclass<-CMAres$modtestclass
+ learningsets<-CMAres$learningsets
+ }
> 
> if(FALSE)
+ {
+ trainclass<-trainm[,1] #CMAres$modtrainclass
+ testclass<-testm[,1] #CMAres$modtestclass
+ trainm<-trainm[,-c(1)] #CMAres$modtrainmata
+ testm<-testm[,-c(1)] #CMAres$modtestmata
+ 
+ }
> 
> d_dim<-dim(trainm)
> 
> print("Original dimension")
[1] "Original dimension"
> print(d_dim)
[1] 130  37
> 
> #2 call run_pso function()
> system.time(psores<-run_pso(outloc=outloc,trainm,trainclass,testm,testclass,transition_matrix,c1=2.05,
+ c2=2.05,
+ itr=10,
+ globalpso_maxitr=10,
+ global_max_itr=3,
+ num_part=20,
+ kname="radial",
+ errortype="BER",
+ weightA<-as.numeric(args[1]),
+ weightB<-as.numeric(args[2]),
+ weightC<-as.numeric(args[3]),
+ weightD<-as.numeric(args[4]),
+ featweight.max=0.01,
+ featweight.min=0.01,
+ numfolds=10,
+ followerprob=as.numeric(args[6]),
+ confusionprob=as.numeric(args[7]),
+ leaderprob=as.numeric(args[8]),
+ wmax=1,
+ wmin=1,
+ behavior_reset_itr=5,
+ maxitrreset=10,
+ num_neighbors=3,
+ minselect.pct=0.5,
+ evalMode="CV2",
+ minfitnessthresh=50,
+ maxnum=as.numeric(args[10]),minnum=3,inertia_method=args[5],particlebehav_method="randbased",constriction_factor=1,
+ select.global.best=TRUE,numnodes=2,evalFunc=eval_fit_kfold_diff,itr.terminate=FALSE,train.pct=as.numeric(args[11]),min.iter.select=1))
[1] "c1: 2.05"
[1] "c2: 2.05"
[1] "itr: 10"
[1] "globalpso_maxitr: 10"
[1] "global_max_itr: 3"
[1] "num_part: 20"
[1] "kname: radial"
[1] "errortype: BER"
[1] "weightA: 0.5"
[1] "weightB: 0.25"
[1] "weightC: 0.05"
[1] "weightD: 0.2"
[1] "featweight.max: 0.01"
[1] "featweight.min: 0.01"
[1] "numfolds: 10"
[1] "followerprob: 0.45"
[1] "confusionprob: 0.2"
[1] "leaderprob: 0.25"
[1] "wmax: 1"
[1] "wmin: 1"
[1] "behavior_reset_itr: 5"
[1] "maxitrreset: 10"
[1] "num_neighbors: 3"
[1] "minselect.pct: 0.5"
[1] "minfitnessthresh: 50"
[1] "maxnum: 15"
[1] "minnum: 3"
[1] "inertia_method: global"
[1] "particlebehav_method: randbased"
[1] "constriction_factor: 1"
[1] "select.global.best: TRUE"
[1] "DS index stage 2"
[1] 0.6998699
[1] "KI index stage 2"
[1] -Inf
[1] 1
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  1.000   4.000   6.000   5.973   8.000  10.000 
[1] "Number of features selected in 1 iterations:"
[1] 37
[1] 0.8484848 1.0000000
[1] 0.8484848 1.0000000
[1] "accuracy: 85.5180129745557 num_feat:37 fitness:50.86332444704"
$fitfunc
[1] -50.86332

$cverror
[1] 85.51801

$cvpermerror
[1] 50

$testacc
[1] 99.48454

$reverseacc
[1] 92.42424

[1] -50.86332
[1] "Number of features selected in 2 iterations:"
[1] 35
[1] 0.8181818 1.0000000
[1] 0.8181818 1.0000000
[1] "accuracy: 86.0309808529785 num_feat:35 fitness:51.2748863557841"
$fitfunc
[1] -51.27489

$cverror
[1] 86.03098

$cvpermerror
[1] 50

$testacc
[1] 99.48454

$reverseacc
[1] 90.90909

[1] -51.27489
[1] "Number of features selected in 3 iterations:"
[1] 32
[1] 0.8787879 1.0000000
[1] 0.8787879 1.0000000
[1] "accuracy: 92.3882683779445 num_feat:32 fitness:57.4658246560169"
$fitfunc
[1] -57.46582

$cverror
[1] 92.38827

$cvpermerror
[1] 50

$testacc
[1] 99.48454

$reverseacc
[1] 93.93939

[1] -57.46582
[1] "Number of features selected in 4 iterations:"
[1] 28
[1] 0.8787879 1.0000000
[1] 0.8787879 1.0000000
[1] "accuracy: 93.5762240194491 num_feat:28 fitness:58.5943825154463"
$fitfunc
[1] -58.59438

$cverror
[1] 93.57622

$cvpermerror
[1] 50

$testacc
[1] 100

$reverseacc
[1] 93.93939

[1] -58.59438
[1] "Number of features selected in 5 iterations:"
[1] 24
[1] 0.8484848 1.0000000
[1] 0.8484848 1.0000000
[1] "accuracy: 91.5096812977203 num_feat:24 fitness:56.5554093540464"
$fitfunc
[1] -56.55541

$cverror
[1] 91.50968

$cvpermerror
[1] 50

$testacc
[1] 100

$reverseacc
[1] 92.42424

[1] -56.55541
[1] "Number of features selected in 6 iterations:"
[1] 19
[1] 0.9090909 1.0000000
[1] 0.9090909 1.0000000
[1] "accuracy: 92.5722185340891 num_feat:19 fitness:57.7163348801119"
$fitfunc
[1] -57.71633

$cverror
[1] 92.57222

$cvpermerror
[1] 50

$testacc
[1] 100

$reverseacc
[1] 95.45455

[1] -57.71633
[1] "Number of features selected in 7 iterations:"
[1] 17
[1] 0.9393939 1.0000000
[1] 0.9393939 1.0000000
[1] "accuracy: 92.0860728771767 num_feat:17 fitness:57.3302540818027"
$fitfunc
[1] -57.33025

$cverror
[1] 92.08607

$cvpermerror
[1] 50

$testacc
[1] 100

$reverseacc
[1] 96.9697

[1] -57.33025
[1] "Number of features selected in 8 iterations:"
[1] 15
[1] 0.9090909 1.0000000
[1] 0.9090909 1.0000000
[1] "accuracy: 90.4600951452572 num_feat:15 fitness:55.7098176607216"
$fitfunc
[1] -55.70982

$cverror
[1] 90.4601

$cvpermerror
[1] 50

$testacc
[1] 100

$reverseacc
[1] 95.45455

[1] -55.70982
[1] "Number of features selected in 9 iterations:"
[1] 8
[1] 0.6666667 0.9896907
[1] 0.6666667 0.9896907
[1] "accuracy: 77.4030279235667 num_feat:8 fitness:42.6169730812697"
$fitfunc
[1] -42.61697

$cverror
[1] 77.40303

$cvpermerror
[1] 50.08114

$testacc
[1] 92.90847

$reverseacc
[1] 82.81787

[1] -42.61697
[1] "Number of features selected in 10 iterations:"
[1] 6
[1] 0.6060606 0.9896907
[1] 0.6060606 0.9896907
[1] "accuracy: 70.2596920679595 num_feat:6 fitness:33.0708096726165"
$fitfunc
[1] -33.07081

$cverror
[1] 70.25969

$cvpermerror
[1] 53.80754

$testacc
[1] 90.36239

$reverseacc
[1] 79.78757

[1] -33.07081
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.9487  0.9487  0.9615  0.9692  0.9936  1.0000 
[1] "Number of features selected in 4 iterations:"
[1] 28
[1] "Modified train 10 fold accuracy using train data is "
[1] 94.61538
[1] "Modified train accuracy is "
[1] 1
[1] "train confusion matrix is "
          trainclass
pred_train  1  2
         1 33  0
         2  0 97
[1] "Train dimension is "
[1] 130  28
[1] "Test dimension is "
[1] 100  28
[1] "Test confusion matrix is "
    
pred  1  2
   1  8 16
   2  7 69
[1] "Test acc is "
[1] 0.77
[1] "train 10 fold"
[1] 94.61538
[1] "Test confusion matrix is "
    
pred  1  2
   1  8 16
   2  7 69
[1] "Test acc is "
[1] 0.77
[1] "Test AUC:"
[1] 0.672549
[1] "Train acc is "
[1] 1
[1] "# of features after CMA:"
NULL
[1] "# of features after PSO:"
[1] 130  29
   user  system elapsed 
  6.871   0.096   6.980 
> 
> feat_ind<-psores$bestfeatlist
> feat_names<-psores$bestfeatnames
> 
> scoringmatrix<-as.data.frame(psores$scoringmatrix)
> print(scoringmatrix)
   V1 V2 V3 V4 V5 V6 V7 V8 V9 V10
1   1  1  1  1  1  1  1  1  1   1
2   1  1  1  1  1  0  0  1  1   1
3   1  1  1  1  1  1  1  1  1   1
4   0  1  1  1  0  1  1  0  0   0
5   0  1  0  0  1  0  1  0  1   1
6   0  1  0  1  0  0  1  0  1   0
7   1  1  0  0  0  0  1  0  1   0
8   1  1  1  1  1  1  1  1  1   1
9   1  1  1  1  1  1  1  1  1   1
10  1  1  1  0  1  0  0  0  1   0
11  0  1  0  0  0  0  1  0  0   0
12  1  0  0  1  0  0  0  0  1   0
13  0  0  0  0  1  0  0  0  0   0
14  1  0  0  0  1  0  1  1  0   0
15  0  0  0  0  0  0  1  0  0   0
16  1  0  1  0  0  1  0  0  1   0
17  1  1  1  0  1  0  1  1  1   1
18  1  1  1  0  1  0  1  1  1   0
19  1  1  0  0  0  0  0  0  1   0
20  1  1  1  1  0  1  0  0  1   0
21  0  0  0  0  0  0  1  1  0   0
22  0  1  0  1  1  1  1  1  1   1
23  0  1  1  0  1  0  1  1  0   0
24  1  1  1  0  1  1  1  0  1   1
25  1  0  0  0  0  1  1  0  1   1
26  1  1  1  1  1  1  1  0  1   0
27  1  1  1  1  1  0  1  1  0   1
28  1  1  1  1  1  1  1  1  1   1
29  0  1  1  0  1  1  1  0  1   0
30  0  1  1  0  0  1  0  0  0   0
31  1  0  1  1  0  1  1  0  1   1
32  0  1  1  0  0  0  1  0  0   0
33  1  1  1  1  1  1  1  1  1   1
34  1  1  1  1  1  1  1  1  0   1
35  1  1  1  1  0  1  1  0  1   1
36  0  0  0  0  0  0  1  0  1   0
37  1  1  1  1  1  1  1  1  0   1
> print(feat_names[feat_ind])
 [1] "201555_at"   "201798_s_at" "202683_s_at" "203139_at"   "203628_at"  
 [6] "203928_x_at" "203963_at"   "204681_s_at" "204825_at"   "204914_s_at"
[11] "205478_at"   "205713_s_at" "205751_at"   "205830_at"   "208670_s_at"
[16] "208893_s_at" "209173_at"   "209560_s_at" "209603_at"   "211864_s_at"
[21] "212344_at"   "212583_at"   "212956_at"   "214612_x_at" "216092_s_at"
[26] "218856_at"   "218862_at"   "220034_at"  
> 
> save(psores,file="psores.Rda")
> print("Complete")
[1] "Complete"
> 
